{
  "language": "Solidity",
  "sources": {
    "contracts/ArrayLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.12 <0.8.0;\r\n\r\nlibrary ArrayLib {\r\n\r\n    string constant NOT_IN_ARRAY     = \"Not in array\";\r\n    string constant ALREADY_IN_ARRAY = \"Already in array\";\r\n\r\n    // address array\r\n\r\n    function inArray(address[] storage array, address _item)\r\n    internal view returns (bool) {\r\n        uint len = array.length;\r\n        for (uint i=0; i<len; i++) {\r\n            if (array[i]==_item) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function addUnique(address[] storage array, address _item)\r\n    internal {\r\n        require(!inArray(array, _item), ALREADY_IN_ARRAY);\r\n        array.push(_item);\r\n    }\r\n\r\n    function removeByIndex(address[] storage array, uint256 index)\r\n    internal {\r\n        uint256 len_1 = array.length - 1;\r\n        require(index<=len_1, NOT_IN_ARRAY);\r\n        for (uint256 i = index; i < len_1; i++) {\r\n            array[i] = array[i + 1];\r\n        }\r\n        array.pop();\r\n    }\r\n\r\n    function removeFirst(address[] storage array, address _item)\r\n    internal {\r\n        require(inArray(array, _item), NOT_IN_ARRAY);\r\n        uint last = array.length-1;\r\n        for (uint i=0; i<=last; i++) {\r\n            if (array[i]==_item) {\r\n                removeByIndex(array, i);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    function addArrayUnique(address[] storage array, address[] memory _items)\r\n    internal {\r\n        uint len = _items.length;\r\n        for (uint i=0; i<len; i++) {\r\n            addUnique(array, _items[i]);\r\n        }\r\n    }\r\n\r\n    function removeArrayFirst(address[] storage array, address[] memory _items)\r\n    internal {\r\n        uint len = _items.length;\r\n        for (uint i=0; i<len; i++) {\r\n            removeFirst(array, _items[i]);\r\n        }\r\n    }\r\n\r\n    function inArray(uint256[] storage array, uint256 _item)\r\n    internal view returns (bool) {\r\n        uint len = array.length;\r\n        for (uint i=0; i<len; i++) {\r\n            if (array[i]==_item) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function addUnique(uint256[] storage array, uint256 _item)\r\n    internal {\r\n        require(!inArray(array, _item), ALREADY_IN_ARRAY);\r\n        array.push(_item);\r\n    }\r\n\r\n\r\n    function removeByIndex(uint256[] storage array, uint256 index)\r\n    internal {\r\n        uint256 len_1 = array.length - 1;\r\n        require(index<=len_1, NOT_IN_ARRAY);\r\n        for (uint256 i = index; i < len_1; i++) {\r\n            array[i] = array[i + 1];\r\n        }\r\n        array.pop();\r\n    }\r\n\r\n    function removeFirst(uint256[] storage array, uint256 _item)\r\n    internal {\r\n        require(inArray(array, _item), NOT_IN_ARRAY);\r\n        uint last = array.length-1;\r\n        for (uint i=0; i<=last; i++) {\r\n            if (array[i]==_item) {\r\n                removeByIndex(array, i);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    function addArrayUnique(uint256[] storage array, uint256[] memory _items)\r\n    internal {\r\n        uint len = _items.length;\r\n        for (uint i=0; i<len; i++) {\r\n            addUnique(array, _items[i]);\r\n        }\r\n    }\r\n\r\n    function removeArrayFirst(uint256[] storage array, uint256[] memory _items)\r\n    internal {\r\n        uint len = _items.length;\r\n        for (uint i=0; i<len; i++) {\r\n            removeFirst(array, _items[i]);\r\n        }\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/ContractRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/proxy/Initializable.sol\";\r\n\r\nimport \"./Governable.sol\";\r\nimport \"./ArrayLib.sol\";\r\n\r\ncontract ContractRegistry is Governable, Initializable {\r\n    using Address for address;\r\n    using ArrayLib for address[];\r\n\r\n    uint public constant POOLS_FOLDER = 1;\r\n    uint public constant VAULTS_FOLDER = 2;\r\n\r\n    mapping (uint => address[]) public addresses;\r\n\r\n    event AddressesAdded(address[] addresses);\r\n    event AddressesRemoved(address[] addresses);\r\n    event PoolsAdded(address[] addresses);\r\n    event PoolsRemoved(address[] addresses);\r\n    event VaultsAdded(address[] addresses);\r\n    event VaultsRemoved(address[] addresses);\r\n\r\n    address[] private singleAddress;\r\n\r\n    constructor(address[] memory _pools, address[] memory _vaults)\r\n    public Governable(msg.sender) {\r\n        singleAddress.push(address(0));\r\n    }\r\n\r\n    function initialize(address[] memory _pools, address[] memory _vaults)\r\n    public onlyGovernance initializer {\r\n        Governable.setGovernance(msg.sender);\r\n        singleAddress.push(address(0));\r\n\r\n        initPoolsAndVaults(_pools, _vaults);\r\n    }\r\n\r\n    function initPoolsAndVaults(address[] memory _pools, address[] memory _vaults)\r\n    public onlyGovernance {\r\n        address[] storage pools  = addresses[POOLS_FOLDER];\r\n        address[] storage vaults = addresses[VAULTS_FOLDER];\r\n\r\n        require(pools.length ==0 && vaults.length ==0);\r\n\r\n        uint _poolsLen = _pools.length;\r\n        uint _vaultsLen = _vaults.length;\r\n\r\n        for (uint i=0; i< _poolsLen; i++) {\r\n            pools.push(_pools[i]);\r\n        }\r\n        emit PoolsAdded(_pools);\r\n\r\n        for (uint i=0; i< _vaultsLen; i++) {\r\n            vaults.push(_vaults[i]);\r\n        }\r\n        emit VaultsAdded(_vaults);\r\n    }\r\n\r\n    function list(uint folder) public view returns (address[] memory) {\r\n        return addresses[folder];\r\n    }\r\n\r\n    function add(uint folder, address _address) public onlyGovernance {\r\n        addresses[folder].addUnique(_address);\r\n\r\n        singleAddress[0] = _address;\r\n        emit AddressesAdded(singleAddress);\r\n    }\r\n\r\n    function remove(uint folder, address _address) public onlyGovernance {\r\n        addresses[folder].removeFirst(_address);\r\n\r\n        singleAddress[0] = _address;\r\n        emit AddressesRemoved(singleAddress);\r\n    }\r\n\r\n    function addArray(uint folder, address[] memory _addresses) public onlyGovernance {\r\n        addresses[folder].addArrayUnique(_addresses);\r\n        emit AddressesAdded(_addresses);\r\n    }\r\n\r\n    function removeArray(uint folder, address[] memory _addresses) public onlyGovernance {\r\n        addresses[folder].removeArrayFirst(_addresses);\r\n        emit AddressesRemoved(_addresses);\r\n    }\r\n\r\n    // Pools\r\n\r\n    function listPools() public view returns (address[] memory) {\r\n        return addresses[POOLS_FOLDER];\r\n    }\r\n\r\n    function addPool(address _address) public onlyGovernance {\r\n        addresses[POOLS_FOLDER].addUnique(_address);\r\n\r\n        singleAddress[0] = _address;\r\n        emit PoolsAdded(singleAddress);\r\n    }\r\n\r\n    function removePool(address _address) public onlyGovernance {\r\n        addresses[POOLS_FOLDER].removeFirst(_address);\r\n\r\n        singleAddress[0] = _address;\r\n        emit PoolsRemoved(singleAddress);\r\n    }\r\n\r\n    function addPoolsArray(address[] memory _addresses) public onlyGovernance {\r\n        addresses[POOLS_FOLDER].addArrayUnique(_addresses);\r\n        emit PoolsAdded(_addresses);\r\n    }\r\n\r\n    function removePoolsArray(address[] memory _addresses) public onlyGovernance {\r\n        addresses[POOLS_FOLDER].removeArrayFirst(_addresses);\r\n        emit PoolsRemoved(_addresses);\r\n    }\r\n\r\n\r\n    // Vaults\r\n\r\n    function listVaults() public view returns (address[] memory) {\r\n        return addresses[VAULTS_FOLDER];\r\n    }\r\n\r\n    function addVault(address _address) public onlyGovernance {\r\n        addresses[VAULTS_FOLDER].addUnique(_address);\r\n\r\n        singleAddress[0] = _address;\r\n        emit VaultsAdded(singleAddress);\r\n    }\r\n\r\n    function removeVault(address _address) public onlyGovernance {\r\n        addresses[VAULTS_FOLDER].removeFirst(_address);\r\n\r\n        singleAddress[0] = _address;\r\n        emit VaultsRemoved(singleAddress);\r\n    }\r\n\r\n    function addVaultsArray(address[] memory _addresses) public onlyGovernance {\r\n        addresses[VAULTS_FOLDER].addArrayUnique(_addresses);\r\n        emit VaultsAdded(_addresses);\r\n    }\r\n\r\n    function removeVaultsArray(address[] memory _addresses) public onlyGovernance {\r\n        addresses[VAULTS_FOLDER].removeArrayFirst(_addresses);\r\n        emit VaultsRemoved(_addresses);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\nimport \"../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !Address.isContract(address(this));\n    }\n}\n"
    },
    "contracts/Governable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.16;\r\n\r\ncontract Governable {\r\n\r\n  address public governance;\r\n\r\n  constructor(address _governance) public {\r\n    setGovernance(_governance);\r\n  }\r\n\r\n  modifier onlyGovernance() {\r\n    // pass check while governance might not initialized (i.e. in proxy)\r\n    require((governance==address(0)) || (msg.sender==governance), \"Not governance\");\r\n    _;\r\n  }\r\n\r\n  function setGovernance(address _governance) public onlyGovernance {\r\n    require(_governance != address(0), \"new governance shouldn't be empty\");\r\n    governance = _governance;\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/OracleRopsten_old.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"./interface/uniswap/IUniswapV2Factory.sol\";\r\nimport \"./interface/uniswap/IUniswapV2Pair.sol\";\r\nimport \"./Governable.sol\";\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract OracleRopsten_old is Governable {\r\n\r\n  using SafeERC20 for IERC20;\r\n  using Address for address;\r\n  using SafeMath for uint256;\r\n\r\n  //Addresses for factories and registries for different DEX platforms. Functions will be added to allow to alter these when needed.\r\n  address public uniswapFactoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n  address public sushiswapFactoryAddress = 0xaDe0ad525430cfe17218B679483c46B6c1d63fe2;\r\n  uint256 public PRECISION_DECIMALS = 18;\r\n\r\n  IUniswapV2Factory uniswapFactory = IUniswapV2Factory(uniswapFactoryAddress);\r\n  IUniswapV2Factory sushiswapFactory = IUniswapV2Factory(sushiswapFactoryAddress);\r\n\r\n  //Key tokens are used to find liquidity for any given token on Uni, Sushi and Curve.\r\n  address[] public keyTokens = [\r\n  0xc778417E063141139Fce010982780140Aa0cD5Ab, //WETH\r\n  0xaD6D458402F60fD3Bd25163575031ACDce07538D, //DAI\r\n  0xc3778758D19A654fA6d0bb3593Cf26916fB3d114, //WBTC\r\n  0xDBC941fEc34e8965EbC4A25452ae7519d6BDfc4e  //USDC\r\n  ];\r\n  //Pricing tokens are Key tokens with good liquidity with the defined output token on Uniswap.\r\n  address[] public pricingTokens = [\r\n  0xc778417E063141139Fce010982780140Aa0cD5Ab, //WETH\r\n  0xaD6D458402F60fD3Bd25163575031ACDce07538D //DAI\r\n  ];\r\n  //The defined output token is the unit in which prices of input tokens are given.\r\n  address public definedOutputToken = 0xaD6D458402F60fD3Bd25163575031ACDce07538D; //USDC\r\n\r\n  modifier validKeyToken(address keyToken){\r\n      require(checkKeyToken(keyToken), \"Not a Key Token\");\r\n      _;\r\n  }\r\n  modifier validPricingToken(address pricingToken){\r\n      require(checkPricingToken(pricingToken), \"Not a Pricing Token\");\r\n      _;\r\n  }\r\n\r\n  event FactoryChanged(address newFactory, address oldFactory);\r\n  event KeyTokenAdded(address newKeyToken);\r\n  event PricingTokenAdded(address newPricingToken);\r\n  event KeyTokenRemoved(address keyToken);\r\n  event PricingTokenRemoved(address pricingToken);\r\n  event DefinedOutuptChanged(address newOutputToken, address oldOutputToken);\r\n\r\n  constructor()\r\n  Governable(msg.sender) public {}\r\n\r\n  function changeUniFactory(address newFactory) external onlyGovernance {\r\n    address oldFactory = uniswapFactoryAddress;\r\n    uniswapFactoryAddress = newFactory;\r\n    uniswapFactory = IUniswapV2Factory(uniswapFactoryAddress);\r\n    emit FactoryChanged(newFactory, oldFactory);\r\n  }\r\n  function changeSushiFactory(address newFactory) external onlyGovernance {\r\n    address oldFactory = sushiswapFactoryAddress;\r\n    sushiswapFactoryAddress = newFactory;\r\n    sushiswapFactory = IUniswapV2Factory(sushiswapFactoryAddress);\r\n    emit FactoryChanged(newFactory, oldFactory);\r\n  }\r\n\r\n  function addKeyToken(address newToken) external onlyGovernance {\r\n    require((checkKeyToken(newToken)==false), \"Already a key token\");\r\n    keyTokens.push(newToken);\r\n    emit KeyTokenAdded(newToken);\r\n  }\r\n  function addPricingToken(address newToken) public onlyGovernance validKeyToken(newToken) {\r\n    require((checkPricingToken(newToken)==false), \"Already a pricing token\");\r\n    pricingTokens.push(newToken);\r\n    emit PricingTokenAdded(newToken);\r\n  }\r\n\r\n  function removeKeyToken(address keyToken) external onlyGovernance validKeyToken(keyToken) {\r\n    uint256 i;\r\n    for ( i=0;i<keyTokens.length;i++) {\r\n      if (keyToken == keyTokens[i]){\r\n        break;\r\n      }\r\n    }\r\n    while (i<keyTokens.length-1) {\r\n      keyTokens[i] = keyTokens[i+1];\r\n      i++;\r\n    }\r\n    keyTokens.pop();\r\n\r\n    emit KeyTokenRemoved(keyToken);\r\n\r\n    if (checkPricingToken(keyToken)) {\r\n      removePricingToken(keyToken);\r\n    }\r\n  }\r\n  function removePricingToken(address pricingToken) public onlyGovernance validPricingToken(pricingToken) {\r\n    uint256 i;\r\n    for (i=0;i<pricingTokens.length;i++) {\r\n      if (pricingToken == pricingTokens[i]){\r\n        break;\r\n      }\r\n    }\r\n    while (i<pricingTokens.length-1) {\r\n      pricingTokens[i] = pricingTokens[i+1];\r\n      i++;\r\n    }\r\n    pricingTokens.pop();\r\n    emit PricingTokenRemoved(pricingToken);\r\n  }\r\n  function changeDefinedOutput(address newOutputToken) external onlyGovernance validKeyToken(newOutputToken) {\r\n    address oldOutputToken = definedOutputToken;\r\n    definedOutputToken = newOutputToken;\r\n    emit DefinedOutuptChanged(newOutputToken, oldOutputToken);\r\n  }\r\n\r\n  //Main function of the contract. Gives the price of a given token in the defined output token.\r\n  //The contract allows for input tokens to be LP tokens from Uniswap, Sushiswap, Curve and 1Inch.\r\n  //In case of LP token, the underlying tokens will be found and valued to get the price.\r\n  function getPrice(address token) external view returns (uint256) {\r\n    if (token == definedOutputToken) {\r\n      return (10**PRECISION_DECIMALS);\r\n    }\r\n    bool uniSushiLP;\r\n    uniSushiLP = isLPCheck(token);\r\n    if (uniSushiLP) {\r\n      address[2] memory tokens;\r\n      uint256[2] memory amounts;\r\n      (tokens, amounts) = getUniUnderlying(token);\r\n      uint256 priceToken;\r\n      uint256 tokenValue;\r\n      uint256 price = 0;\r\n      uint256 i;\r\n      for (i=0;i<2;i++) {\r\n        priceToken = computePrice(tokens[i]);\r\n        if (priceToken == 0) {\r\n          price = 0;\r\n          return price;\r\n        }\r\n        tokenValue = priceToken*amounts[i]/10**PRECISION_DECIMALS;\r\n        price = price + tokenValue;\r\n      }\r\n      return price;\r\n    } else {\r\n      uint256 price = computePrice(token);\r\n      return price;\r\n    }\r\n  }\r\n\r\n  function isLPCheck(address token) public view returns(bool) {\r\n    bool isUniSushi = isUniCheck(token) || isSushiCheck(token);\r\n    return (isUniSushi);\r\n  }\r\n\r\n  //Checks if address is Uni LP. This is done in two steps, because the second step seems to cause errors for some tokens.\r\n  //Only the first step is not deemed accurate enough, as any token could be caalled UNI-V2.\r\n  function isUniCheck(address token) public view returns (bool) {\r\n    IUniswapV2Pair pair = IUniswapV2Pair(token);\r\n    string memory uniSymbol = \"UNI-V2\";\r\n    try pair.symbol() returns (string memory symbol) {\r\n      if (keccak256(abi.encodePacked(symbol)) != keccak256(abi.encodePacked(uniSymbol))) {\r\n        return false;\r\n      }\r\n    } catch {\r\n      return false;\r\n    }\r\n    try pair.factory{gas: 3000}() returns (address factory) {\r\n      if (factory == uniswapFactoryAddress){\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  //Checks if address is Sushi LP.\r\n  function isSushiCheck(address token) public view returns (bool) {\r\n    IUniswapV2Pair pair = IUniswapV2Pair(token);\r\n    string memory sushiSymbol = \"SLP\";\r\n    try pair.symbol() returns (string memory symbol) {\r\n      if (keccak256(abi.encodePacked(symbol)) != keccak256(abi.encodePacked(sushiSymbol))) {\r\n        return false;\r\n      }\r\n    } catch {\r\n      return false;\r\n    }\r\n    try pair.factory{gas:3000}() returns (address factory) {\r\n      if (factory == sushiswapFactoryAddress){\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  //Get underlying tokens and amounts for Uni/Sushi LPs\r\n  function getUniUnderlying(address token) public view returns (address[2] memory, uint256[2] memory) {\r\n    IUniswapV2Pair pair = IUniswapV2Pair(token);\r\n    address[2] memory tokens;\r\n    uint256[2] memory amounts;\r\n    tokens[0] = pair.token0();\r\n    tokens[1] = pair.token1();\r\n    uint256 token0Decimals = ERC20(tokens[0]).decimals();\r\n    uint256 token1Decimals = ERC20(tokens[1]).decimals();\r\n    uint256 supplyDecimals = ERC20(token).decimals();\r\n    (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\r\n    uint256 totalSupply = pair.totalSupply();\r\n    if (reserve0 == 0 || reserve1 == 0 || totalSupply == 0) {\r\n      amounts[0] = 0;\r\n      amounts[1] = 0;\r\n      return (tokens, amounts);\r\n    }\r\n    amounts[0] = reserve0*10**(supplyDecimals-token0Decimals+PRECISION_DECIMALS)/totalSupply;\r\n    amounts[1] = reserve1*10**(supplyDecimals-token1Decimals+PRECISION_DECIMALS)/totalSupply;\r\n    return (tokens, amounts);\r\n  }\r\n\r\n  //General function to compute the price of a token vs the defined output token.\r\n  function computePrice(address token) public view returns (uint256) {\r\n    uint256 price;\r\n    if (token == definedOutputToken) {\r\n      price = 10**PRECISION_DECIMALS;\r\n    } else if (token == address(0)) {\r\n      price = 0;\r\n    } else {\r\n      (address keyToken, , bool uni, bool sushi) = getLargestPool(token,keyTokens);\r\n      if (keyToken == address(0)) {\r\n        price = 0;\r\n      } else if (uni) {\r\n        uint256 priceVsKeyToken = getPriceVsTokenUni(token,keyToken);\r\n        uint256 keyTokenPrice = getKeyTokenPrice(keyToken);\r\n        price = priceVsKeyToken*keyTokenPrice/10**PRECISION_DECIMALS;\r\n      } else if (sushi) {\r\n        uint256 priceVsKeyToken = getPriceVsTokenSushi(token,keyToken);\r\n        uint256 keyTokenPrice = getKeyTokenPrice(keyToken);\r\n        price = priceVsKeyToken*keyTokenPrice/10**PRECISION_DECIMALS;\r\n      }\r\n    }\r\n    return (price);\r\n  }\r\n\r\n  //Checks the results of the different largest pool functions and returns the largest.\r\n  function getLargestPool(address token, address[] memory tokenList) public view returns (address, address, bool, bool) {\r\n    (address uniKeyToken, uint256 uniLiquidity) = getUniLargestPool(token, tokenList);\r\n    (address sushiKeyToken, uint256 sushiLiquidity) = getSushiLargestPool(token, tokenList);\r\n    if (uniLiquidity > sushiLiquidity) {\r\n      return (uniKeyToken, address(0), true, false);\r\n    } else {\r\n      return (sushiKeyToken, address(0), false, true);\r\n    }\r\n  }\r\n\r\n  //Gives the Uniswap pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\r\n  function getUniLargestPool(address token, address[] memory tokenList) public view returns (address, uint256) {\r\n    uint256 largestPoolSize = 0;\r\n    address largestPoolAddress;\r\n    address largestKeyToken;\r\n    uint112 poolSize;\r\n    uint256 i;\r\n    uint256 decimals = ERC20(token).decimals();\r\n    for (i=0;i<tokenList.length;i++) {\r\n      address pairAddress = uniswapFactory.getPair(token,tokenList[i]);\r\n      if (pairAddress==address(0)) {\r\n        continue;\r\n      }\r\n      IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n      address token0 = pair.token0();\r\n      if (token == token0) {\r\n        (poolSize,,) = pair.getReserves();\r\n      } else {\r\n        (,poolSize,) = pair.getReserves();\r\n      }\r\n      if (poolSize > largestPoolSize) {\r\n        largestPoolSize = poolSize;\r\n        largestKeyToken = tokenList[i];\r\n        largestPoolAddress = pairAddress;\r\n      }\r\n    }\r\n    if (largestPoolSize < 10**decimals) {\r\n      return (address(0), 0);\r\n    }\r\n    return (largestKeyToken, largestPoolSize);\r\n  }\r\n\r\n  //Gives the Sushiswap pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\r\n  function getSushiLargestPool(address token, address[] memory tokenList) public view returns (address, uint256) {\r\n    uint256 largestPoolSize = 0;\r\n    address largestPoolAddress;\r\n    address largestKeyToken;\r\n    uint112 poolSize;\r\n    uint256 i;\r\n    uint256 decimals = ERC20(token).decimals();\r\n    for (i=0;i<tokenList.length;i++) {\r\n      address pairAddress = sushiswapFactory.getPair(token,tokenList[i]);\r\n      if (pairAddress==address(0)) {\r\n        continue;\r\n      }\r\n      IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n      address token0 = pair.token0();\r\n      if (token == token0) {\r\n        (poolSize,,) = pair.getReserves();\r\n      } else {\r\n        (,poolSize,) = pair.getReserves();\r\n      }\r\n      if (poolSize > largestPoolSize) {\r\n        largestPoolSize = poolSize;\r\n        largestKeyToken = tokenList[i];\r\n        largestPoolAddress = pairAddress;\r\n      }\r\n    }\r\n    if (largestPoolSize < 10**decimals) {\r\n      return (address(0), 0);\r\n    }\r\n    return (largestKeyToken, largestPoolSize);\r\n  }\r\n\r\n  //Generic function giving the price of a given token vs another given token on Uniswap.\r\n  function getPriceVsTokenUni(address token0, address token1) public view returns (uint256) {\r\n    address pairAddress = uniswapFactory.getPair(token0,token1);\r\n    IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n    (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\r\n    uint256 token0Decimals = ERC20(token0).decimals();\r\n    uint256 token1Decimals = ERC20(token1).decimals();\r\n    uint256 price;\r\n    if (token0 == pair.token0()) {\r\n      price = (reserve1*10**(token0Decimals-token1Decimals+PRECISION_DECIMALS))/reserve0;\r\n    } else {\r\n      price = (reserve0*10**(token0Decimals-token1Decimals+PRECISION_DECIMALS))/reserve1;\r\n    }\r\n    return price;\r\n  }\r\n\r\n  //Generic function giving the price of a given token vs another given token on Sushiswap.\r\n  function getPriceVsTokenSushi(address token0, address token1) public view returns (uint256) {\r\n    address pairAddress = sushiswapFactory.getPair(token0,token1);\r\n    IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n    (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\r\n    uint256 token0Decimals = ERC20(token0).decimals();\r\n    uint256 token1Decimals = ERC20(token1).decimals();\r\n    uint256 price;\r\n    if (token0 == pair.token0()) {\r\n      price = (reserve1*10**(token0Decimals-token1Decimals+PRECISION_DECIMALS))/reserve0;\r\n    } else {\r\n      price = (reserve0*10**(token0Decimals-token1Decimals+PRECISION_DECIMALS))/reserve1;\r\n    }\r\n    return price;\r\n  }\r\n\r\n  //Gives the price of a given keyToken.\r\n  function getKeyTokenPrice(address token) public view returns (uint256) {\r\n    bool isPricingToken = checkPricingToken(token);\r\n    uint256 price;\r\n    uint256 priceVsPricingToken;\r\n    if (token == definedOutputToken) {\r\n      price = 10**PRECISION_DECIMALS;\r\n    } else if (isPricingToken) {\r\n      price = getPriceVsTokenUni(token,definedOutputToken);\r\n    } else {\r\n      uint256 pricingTokenPrice;\r\n      (address pricingToken, , bool uni, bool sushi) = getLargestPool(token,pricingTokens);\r\n      if (uni) {\r\n        priceVsPricingToken = getPriceVsTokenUni(token,pricingToken);\r\n      } else if (sushi) {\r\n        priceVsPricingToken = getPriceVsTokenSushi(token,pricingToken);\r\n      }\r\n      if (pricingToken == definedOutputToken) {\r\n        pricingTokenPrice = 10**PRECISION_DECIMALS;\r\n      } else {\r\n        pricingTokenPrice = getPriceVsTokenUni(pricingToken,definedOutputToken);\r\n      }\r\n      price = priceVsPricingToken*pricingTokenPrice/10**PRECISION_DECIMALS;\r\n    }\r\n    return price;\r\n  }\r\n\r\n  //Checks if a given token is in the pricingTokens list.\r\n  function checkPricingToken(address token) public view returns (bool) {\r\n    uint256 i;\r\n    for (i=0;i<pricingTokens.length;i++) {\r\n      if (token == pricingTokens[i]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  //Checks if a given token is in the keyTokens list.\r\n  function checkKeyToken(address token) public view returns (bool) {\r\n    uint256 i;\r\n    for (i=0;i<keyTokens.length;i++) {\r\n      if (token == keyTokens[i]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function getUniLiquidity(address token0, address token1) public view returns (uint256, uint256) {\r\n    address pairAddress = uniswapFactory.getPair(token0, token1);\r\n    IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n    (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\r\n    uint256 token0Decimals = ERC20(token0).decimals();\r\n    uint256 token1Decimals = ERC20(token1).decimals();\r\n    uint256 amount0;\r\n    uint256 amount1;\r\n    if (token0 == pair.token0()) {\r\n      amount0 = reserve0*10**(PRECISION_DECIMALS-token0Decimals);\r\n      amount1 = reserve1*10**(PRECISION_DECIMALS-token1Decimals);\r\n    } else {\r\n      amount0 = reserve1*10**(PRECISION_DECIMALS-token0Decimals);\r\n      amount1 = reserve0*10**(PRECISION_DECIMALS-token1Decimals);\r\n    }\r\n    return (amount0, amount1);\r\n  }\r\n}\r\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interface/uniswap/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n  function allPairs(uint) external view returns (address pair);\r\n  function allPairsLength() external view returns (uint);\r\n\r\n  function feeTo() external view returns (address);\r\n  function feeToSetter() external view returns (address);\r\n\r\n  function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}"
    },
    "contracts/interface/uniswap/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-05-05\r\n*/\r\n\r\n// File: contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/OracleMatic_old.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"./interface/uniswap/IUniswapV2Factory.sol\";\r\nimport \"./interface/uniswap/IUniswapV2Pair.sol\";\r\nimport \"./interface/mooniswap/IMooniFactory.sol\";\r\nimport \"./interface/mooniswap/IMooniswap.sol\";\r\nimport \"./Governable.sol\";\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract OracleMatic_old is Governable {\r\n\r\n  using SafeERC20 for IERC20;\r\n  using Address for address;\r\n  using SafeMath for uint256;\r\n\r\n  //Addresses for factories and registries for different DEX platforms. Functions will be added to allow to alter these when needed.\r\n  address public quickswapFactoryAddress = 0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32;  //QUICK swap address\r\n  address public sushiswapFactoryAddress = 0xc35DADB65012eC5796536bD9864eD8773aBc74C4;\r\n\r\n  uint256 public PRECISION_DECIMALS = 18;\r\n\r\n  IUniswapV2Factory quickswapFactory = IUniswapV2Factory(quickswapFactoryAddress);\r\n  IUniswapV2Factory sushiswapFactory = IUniswapV2Factory(sushiswapFactoryAddress);\r\n\r\n  //Key tokens are used to find liquidity for any given token on Quick, Sushi\r\n  address[] public keyTokens = [\r\n    0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270, //WMATIC\r\n    0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174, //USDC\r\n    0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619, //WETH\r\n    0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063, //DAI\r\n    0xc2132D05D31c914a87C6611C10748AEb04B58e8F, //USDT\r\n    0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6  //WBTC\r\n  ];\r\n  //Pricing tokens are Key tokens with good liquidity with the defined output token on Quickswap.\r\n  address[] public pricingTokens = [\r\n    0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270, //WMATIC\r\n    0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174, //USDC\r\n    0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619, //WETH\r\n    0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063, //DAI\r\n    0xc2132D05D31c914a87C6611C10748AEb04B58e8F, //USDT\r\n    0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6  //WBTC\r\n  ];\r\n  //The defined output token is the unit in which prices of input tokens are given.\r\n  address public definedOutputToken = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174; //USDC\r\n\r\n  modifier validKeyToken(address keyToken){\r\n      require(checkKeyToken(keyToken), \"Not a Key Token\");\r\n      _;\r\n  }\r\n  modifier validPricingToken(address pricingToken){\r\n      require(checkPricingToken(pricingToken), \"Not a Pricing Token\");\r\n      _;\r\n  }\r\n\r\n  event FactoryChanged(address newFactory, address oldFactory);\r\n  event RegistryChanged(address newRegistry, address oldRegistry);\r\n  event KeyTokenAdded(address newKeyToken);\r\n  event PricingTokenAdded(address newPricingToken);\r\n  event KeyTokenRemoved(address keyToken);\r\n  event PricingTokenRemoved(address pricingToken);\r\n  event DefinedOutputChanged(address newOutputToken, address oldOutputToken);\r\n  event CurveExceptionAdded(address newException, uint256 exceptionList);\r\n  event CurveExceptionRemoved(address oldException, uint256 exceptionList);\r\n\r\n  constructor()\r\n  Governable(msg.sender) public {}\r\n\r\n  function changeQuickFactory(address newFactory) external onlyGovernance {\r\n    address oldFactory = quickswapFactoryAddress;\r\n    quickswapFactoryAddress = newFactory;\r\n    quickswapFactory = IUniswapV2Factory(quickswapFactoryAddress);\r\n    emit FactoryChanged(newFactory, oldFactory);\r\n  }\r\n  function changeSushiFactory(address newFactory) external onlyGovernance {\r\n    address oldFactory = sushiswapFactoryAddress;\r\n    sushiswapFactoryAddress = newFactory;\r\n    sushiswapFactory = IUniswapV2Factory(sushiswapFactoryAddress);\r\n    emit FactoryChanged(newFactory, oldFactory);\r\n  }\r\n\r\n  function addKeyToken(address newToken) external onlyGovernance {\r\n    require((checkKeyToken(newToken)==false), \"Already a key token\");\r\n    keyTokens.push(newToken);\r\n    emit KeyTokenAdded(newToken);\r\n  }\r\n\r\n  function addPricingToken(address newToken) public onlyGovernance validKeyToken(newToken) {\r\n    require((checkPricingToken(newToken)==false), \"Already a pricing token\");\r\n    pricingTokens.push(newToken);\r\n    emit PricingTokenAdded(newToken);\r\n  }\r\n\r\n  function removeKeyToken(address keyToken) external onlyGovernance validKeyToken(keyToken) {\r\n    uint256 i;\r\n    for ( i=0;i<keyTokens.length;i++) {\r\n      if (keyToken == keyTokens[i]){\r\n        break;\r\n      }\r\n    }\r\n    while (i<keyTokens.length-1) {\r\n      keyTokens[i] = keyTokens[i+1];\r\n      i++;\r\n    }\r\n    keyTokens.pop();\r\n    emit KeyTokenRemoved(keyToken);\r\n\r\n    if (checkPricingToken(keyToken)) {\r\n      removePricingToken(keyToken);\r\n    }\r\n  }\r\n\r\n  function removePricingToken(address pricingToken) public onlyGovernance validPricingToken(pricingToken) {\r\n    uint256 i;\r\n    for (i=0;i<pricingTokens.length;i++) {\r\n      if (pricingToken == pricingTokens[i]){\r\n        break;\r\n      }\r\n    }\r\n    while (i<pricingTokens.length-1) {\r\n      pricingTokens[i] = pricingTokens[i+1];\r\n      i++;\r\n    }\r\n    pricingTokens.pop();\r\n    emit PricingTokenRemoved(pricingToken);\r\n  }\r\n  function changeDefinedOutput(address newOutputToken) external onlyGovernance validKeyToken(newOutputToken) {\r\n    address oldOutputToken = definedOutputToken;\r\n    definedOutputToken = newOutputToken;\r\n    emit DefinedOutputChanged(newOutputToken, oldOutputToken);\r\n  }\r\n\r\n  //Main function of the contract. Gives the price of a given token in the defined output token.\r\n  //The contract allows for input tokens to be LP tokens from Quickswap, Sushiswap\r\n  //In case of LP token, the underlying tokens will be found and valued to get the price.\r\n  function getPrice(address token) external view returns (uint256) {\r\n    if (token == definedOutputToken) {\r\n      return (10**PRECISION_DECIMALS);\r\n    }\r\n    bool quickSushiLP = isQuickSushiCheck(token);\r\n    uint256 priceToken;\r\n    uint256 tokenValue;\r\n    uint256 price;\r\n    uint256 i;\r\n    if (quickSushiLP) {\r\n      address[2] memory tokens;\r\n      uint256[2] memory amounts;\r\n      (tokens, amounts) = getUniUnderlying(token);\r\n      for (i=0;i<2;i++) {\r\n        priceToken = computePrice(tokens[i]);\r\n        if (priceToken == 0) {\r\n          price = 0;\r\n          return price;\r\n        }\r\n        tokenValue = priceToken*amounts[i]/10**PRECISION_DECIMALS;\r\n        price = price + tokenValue;\r\n      }\r\n      return price;\r\n    } else {\r\n      return computePrice(token);\r\n    }\r\n  }\r\n\r\n  //Checks if address is Quick or Sushi LP.\r\n  function isQuickSushiCheck(address token) internal view returns (bool) {\r\n    IUniswapV2Pair pair = IUniswapV2Pair(token);\r\n    return checkFactory(pair, quickswapFactoryAddress) || checkFactory(pair, sushiswapFactoryAddress);\r\n  }\r\n\r\n  function isEqualString(string memory arg1, string memory arg2) internal pure returns (bool) {\r\n    bool check = (keccak256(abi.encodePacked(arg1)) == keccak256(abi.encodePacked(arg2)))? true:false;\r\n    return check;\r\n  }\r\n\r\n  function checkFactory(IUniswapV2Pair pair, address compareFactory) internal view returns (bool) {\r\n    bool check;\r\n    try pair.factory{gas: 3000}() returns (address factory) {\r\n      check = (factory == compareFactory)? true:false;\r\n    } catch {\r\n      check = false;\r\n    }\r\n    return check;\r\n  }\r\n\r\n  //Get underlying tokens and amounts for Quick/Sushi LPs\r\n  function getUniUnderlying(address token) public view returns (address[2] memory, uint256[2] memory) {\r\n    IUniswapV2Pair pair = IUniswapV2Pair(token);\r\n    address[2] memory tokens;\r\n    uint256[2] memory amounts;\r\n    tokens[0] = pair.token0();\r\n    tokens[1] = pair.token1();\r\n    uint256 token0Decimals = ERC20(tokens[0]).decimals();\r\n    uint256 token1Decimals = ERC20(tokens[1]).decimals();\r\n    uint256 supplyDecimals = ERC20(token).decimals();\r\n    (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\r\n    uint256 totalSupply = pair.totalSupply();\r\n    if (reserve0 == 0 || reserve1 == 0 || totalSupply == 0) {\r\n      amounts[0] = 0;\r\n      amounts[1] = 0;\r\n      return (tokens, amounts);\r\n    }\r\n    amounts[0] = reserve0*10**(supplyDecimals-token0Decimals+PRECISION_DECIMALS)/totalSupply;\r\n    amounts[1] = reserve1*10**(supplyDecimals-token1Decimals+PRECISION_DECIMALS)/totalSupply;\r\n    return (tokens, amounts);\r\n  }\r\n\r\n  //General function to compute the price of a token vs the defined output token.\r\n  function computePrice(address token) public view returns (uint256) {\r\n    uint256 price;\r\n    if (token == definedOutputToken) {\r\n      price = 10**PRECISION_DECIMALS;\r\n    } else if (token == address(0)) {\r\n      price = 0;\r\n    } else {\r\n      (address keyToken, bool quick) = getLargestPool(token,keyTokens);\r\n      uint256 priceVsKeyToken;\r\n      uint256 keyTokenPrice;\r\n      if (keyToken == address(0)) {\r\n        price = 0;\r\n      } else if (quick) {\r\n        priceVsKeyToken = getPriceVsToken(token,keyToken);\r\n        keyTokenPrice = getKeyTokenPrice(keyToken);\r\n        price = priceVsKeyToken*keyTokenPrice/10**PRECISION_DECIMALS;\r\n      } else {\r\n        priceVsKeyToken = getPriceVsTokenSushi(token,keyToken);\r\n        keyTokenPrice = getKeyTokenPrice(keyToken);\r\n        price = priceVsKeyToken*keyTokenPrice/10**PRECISION_DECIMALS;\r\n      }\r\n    }\r\n    return (price);\r\n  }\r\n\r\n  //Gives the Quickswap pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\r\n  function getLargestPool(address token, address[] memory tokenList) internal view returns (address, bool) {\r\n    uint256 largestPoolSize = 0;\r\n    address largestKeyToken;\r\n    uint256 poolSize;\r\n    uint256 i;\r\n    uint256 poolSizeQuick;\r\n    uint256 poolSizeSushi;\r\n    bool largestPoolIsQuick;\r\n    for (i=0;i<tokenList.length;i++) {\r\n      address pairAddressQuick = quickswapFactory.getPair(token,tokenList[i]);\r\n      address pairAddressSushi = sushiswapFactory.getPair(token,tokenList[i]);\r\n      if (pairAddressQuick!=address(0)) {\r\n        poolSizeQuick = getPoolSize(pairAddressQuick, token);\r\n      }\r\n      if (pairAddressSushi!=address(0)) {\r\n        poolSizeSushi = getPoolSize(pairAddressSushi, token);\r\n      }\r\n      bool quickDex = (poolSizeQuick > poolSizeSushi);\r\n      poolSize = (quickDex)? poolSizeQuick:poolSizeSushi;\r\n      if (poolSize > largestPoolSize) {\r\n        largestPoolSize = poolSize;\r\n        largestKeyToken = tokenList[i];\r\n        largestPoolIsQuick = quickDex;\r\n      }\r\n    }\r\n    return (largestKeyToken, largestPoolIsQuick);\r\n  }\r\n\r\n  function getPoolSize(address pairAddress, address token) internal view returns(uint256) {\r\n    IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n    address token0 = pair.token0();\r\n    (uint112 poolSize0, uint112 poolSize1,) = pair.getReserves();\r\n    uint256 poolSize = (token==token0)? poolSize0:poolSize1;\r\n    return poolSize;\r\n  }\r\n\r\n//Generic function giving the price of a given token vs another given token on Quickswap.\r\nfunction getPriceVsToken(address token0, address token1) internal view returns (uint256) {\r\n  address pairAddress = quickswapFactory.getPair(token0,token1);\r\n  IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n  (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\r\n  uint256 token0Decimals = ERC20(token0).decimals();\r\n  uint256 token1Decimals = ERC20(token1).decimals();\r\n  uint256 price;\r\n  if (token0 == pair.token0()) {\r\n    price = (reserve1*10**(token0Decimals-token1Decimals+PRECISION_DECIMALS))/reserve0;\r\n  } else {\r\n    price = (reserve0*10**(token0Decimals-token1Decimals+PRECISION_DECIMALS))/reserve1;\r\n  }\r\n  return price;\r\n}\r\n\r\n  //Generic function giving the price of a given token vs another given token on Sushiswap.\r\n  function getPriceVsTokenSushi(address token0, address token1) internal view returns (uint256) {\r\n    address pairAddress = sushiswapFactory.getPair(token0,token1);\r\n    IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n    (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\r\n    uint256 token0Decimals = ERC20(token0).decimals();\r\n    uint256 token1Decimals = ERC20(token1).decimals();\r\n    uint256 price;\r\n    if (token0 == pair.token0()) {\r\n      price = (reserve1*10**(token0Decimals-token1Decimals+PRECISION_DECIMALS))/reserve0;\r\n    } else {\r\n      price = (reserve0*10**(token0Decimals-token1Decimals+PRECISION_DECIMALS))/reserve1;\r\n    }\r\n    return price;\r\n  }\r\n\r\n  //Gives the price of a given keyToken.\r\n  function getKeyTokenPrice(address token) internal view returns (uint256) {\r\n    bool isPricingToken = checkPricingToken(token);\r\n    uint256 price;\r\n    uint256 priceVsPricingToken;\r\n    if (token == definedOutputToken) {\r\n      price = 10**PRECISION_DECIMALS;\r\n    } else if (isPricingToken) {\r\n//      price = getPriceVsTokenQuick(token,definedOutputToken);\r\n      price = getPriceVsTokenSushi(token,definedOutputToken);\r\n    } else {\r\n      uint256 pricingTokenPrice;\r\n      (address pricingToken, bool quick) = getLargestPool(token,pricingTokens);\r\n      if (quick) {\r\n        priceVsPricingToken = getPriceVsToken(token,pricingToken);\r\n      } else {\r\n        priceVsPricingToken = getPriceVsTokenSushi(token,pricingToken);\r\n      }\r\n\r\n      pricingTokenPrice = (pricingToken == definedOutputToken)? 10**PRECISION_DECIMALS:getPriceVsTokenSushi(pricingToken,definedOutputToken);\r\n      price = priceVsPricingToken*pricingTokenPrice/10**PRECISION_DECIMALS;\r\n    }\r\n    return price;\r\n  }\r\n\r\n  //Checks if a given token is in the pricingTokens list.\r\n  function checkPricingToken(address token) public view returns (bool) {\r\n    uint256 i;\r\n    for (i=0;i<pricingTokens.length;i++) {\r\n      if (token == pricingTokens[i]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  //Checks if a given token is in the keyTokens list.\r\n  function checkKeyToken(address token) public view returns (bool) {\r\n    uint256 i;\r\n    for (i=0;i<keyTokens.length;i++) {\r\n      if (token == keyTokens[i]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}\r\n"
    },
    "contracts/interface/mooniswap/IMooniFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\ninterface IMooniFactory {\r\n  function isPool(address token) external view returns(bool);\r\n  function getAllPools() external view returns(address[] memory);\r\n  function pools(address tokenA, address tokenB) external view returns(address);\r\n}\r\n"
    },
    "contracts/interface/mooniswap/IMooniswap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\ninterface IMooniswap {\r\n  function getBalanceForRemoval(address token) external view returns(uint256);\r\n  function token0() external view returns(address);\r\n  function token1() external view returns(address);\r\n  function totalSupply() external view returns(uint256);\r\n}\r\n"
    },
    "contracts/OracleMainnet_old.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"./interface/uniswap/IUniswapV2Factory.sol\";\r\nimport \"./interface/uniswap/IUniswapV2Pair.sol\";\r\nimport \"./interface/curve/ICurvePool.sol\";\r\nimport \"./interface/curve/ICurveRegistry.sol\";\r\nimport \"./interface/mooniswap/IMooniFactory.sol\";\r\nimport \"./interface/mooniswap/IMooniswap.sol\";\r\nimport \"./Governable.sol\";\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract OracleMainnet_old is Governable {\r\n\r\n  using SafeERC20 for IERC20;\r\n  using Address for address;\r\n  using SafeMath for uint256;\r\n\r\n  //Addresses for factories and registries for different DEX platforms. Functions will be added to allow to alter these when needed.\r\n  address public uniswapFactoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n  address public sushiswapFactoryAddress = 0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac;\r\n  address public curveRegistryAddress = 0x7D86446dDb609eD0F5f8684AcF30380a356b2B4c;\r\n  address public oneInchFactoryAddress = 0xbAF9A5d4b0052359326A6CDAb54BABAa3a3A9643;\r\n  uint256 public PRECISION_DECIMALS = 18;\r\n\r\n  IUniswapV2Factory uniswapFactory = IUniswapV2Factory(uniswapFactoryAddress);\r\n  IUniswapV2Factory sushiswapFactory = IUniswapV2Factory(sushiswapFactoryAddress);\r\n  ICurveRegistry curveRegistry = ICurveRegistry(curveRegistryAddress);\r\n  IMooniFactory oneInchFactory = IMooniFactory(oneInchFactoryAddress);\r\n\r\n  //Key tokens are used to find liquidity for any given token on Uni, Sushi and Curve.\r\n  address[] public keyTokens = [\r\n  0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, //USDC\r\n  0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, //WETH\r\n  0x6B175474E89094C44Da98b954EedeAC495271d0F, //DAI\r\n  0xdAC17F958D2ee523a2206206994597C13D831ec7, //USDT\r\n  0xa47c8bf37f92aBed4A126BDA807A7b7498661acD, //UST\r\n  0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599, //WBTC\r\n  0xdB25f211AB05b1c97D595516F45794528a807ad8, //EURS\r\n  0x514910771AF9Ca656af840dff83E8264EcF986CA  //LINK\r\n  ];\r\n  //Pricing tokens are Key tokens with good liquidity with the defined output token on Uniswap.\r\n  address[] public pricingTokens = [\r\n  0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, //USDC\r\n  0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, //WETH\r\n  0x6B175474E89094C44Da98b954EedeAC495271d0F, //DAI\r\n  0xdAC17F958D2ee523a2206206994597C13D831ec7, //USDT\r\n  0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599, //WBTC\r\n  0xdB25f211AB05b1c97D595516F45794528a807ad8  //EURS\r\n  ];\r\n  //The defined output token is the unit in which prices of input tokens are given.\r\n  address public definedOutputToken = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48; //USDC\r\n\r\n  //Below are addresses of LP tokens for which it is known that the get_underlying functions of Curve Registry do not work because of errors in the Curve contract.\r\n  //The exceptions are split. In the first exception the get_underlying_coins is called with get_balances.\r\n  //In the second exception get_coins and get_balances are called.\r\n  address[] public curveExceptionList0 = [\r\n  0xFd2a8fA60Abd58Efe3EeE34dd494cD491dC14900,\r\n  0x02d341CcB60fAaf662bC0554d13778015d1b285C\r\n  ];\r\n  address[] public curveExceptionList1 = [\r\n  0x49849C98ae39Fff122806C06791Fa73784FB3675,\r\n  0x075b1bb99792c9E1041bA13afEf80C91a1e70fB3,\r\n  0xaA17A236F2bAdc98DDc0Cf999AbB47D47Fc0A6Cf\r\n  ];\r\n\r\n  modifier validKeyToken(address keyToken){\r\n      require(checkKeyToken(keyToken), \"Not a Key Token\");\r\n      _;\r\n  }\r\n  modifier validPricingToken(address pricingToken){\r\n      require(checkPricingToken(pricingToken), \"Not a Pricing Token\");\r\n      _;\r\n  }\r\n  modifier validException(address exception){\r\n      (bool check0, bool check1) = checkCurveException(exception);\r\n      require(check0 || check1, \"Not an exception\");\r\n      _;\r\n  }\r\n\r\n  event FactoryChanged(address newFactory, address oldFactory);\r\n  event RegistryChanged(address newRegistry, address oldRegistry);\r\n  event KeyTokenAdded(address newKeyToken);\r\n  event PricingTokenAdded(address newPricingToken);\r\n  event KeyTokenRemoved(address keyToken);\r\n  event PricingTokenRemoved(address pricingToken);\r\n  event DefinedOutuptChanged(address newOutputToken, address oldOutputToken);\r\n  event CurveExceptionAdded(address newException, uint256 exceptionList);\r\n  event CurveExceptionRemoved(address oldException, uint256 exceptionList);\r\n\r\n  constructor()\r\n  Governable(msg.sender) public {}\r\n\r\n  function changeUniFactory(address newFactory) external onlyGovernance {\r\n    address oldFactory = uniswapFactoryAddress;\r\n    uniswapFactoryAddress = newFactory;\r\n    uniswapFactory = IUniswapV2Factory(uniswapFactoryAddress);\r\n    emit FactoryChanged(newFactory, oldFactory);\r\n  }\r\n  function changeSushiFactory(address newFactory) external onlyGovernance {\r\n    address oldFactory = sushiswapFactoryAddress;\r\n    sushiswapFactoryAddress = newFactory;\r\n    sushiswapFactory = IUniswapV2Factory(sushiswapFactoryAddress);\r\n    emit FactoryChanged(newFactory, oldFactory);\r\n  }\r\n  function changeCurveRegistry(address newRegistry) external onlyGovernance {\r\n    address oldRegistry = curveRegistryAddress;\r\n    curveRegistryAddress = newRegistry;\r\n    curveRegistry = ICurveRegistry(curveRegistryAddress);\r\n    emit RegistryChanged(newRegistry, oldRegistry);\r\n  }\r\n  function changeOneInchFactory(address newFactory) external onlyGovernance {\r\n    address oldFactory = oneInchFactoryAddress;\r\n    oneInchFactoryAddress = newFactory;\r\n    oneInchFactory = IMooniFactory(oneInchFactoryAddress);\r\n    emit FactoryChanged(newFactory, oldFactory);\r\n  }\r\n\r\n  function addKeyToken(address newToken) external onlyGovernance {\r\n    require((checkKeyToken(newToken)==false), \"Already a key token\");\r\n    keyTokens.push(newToken);\r\n    emit KeyTokenAdded(newToken);\r\n  }\r\n  function addPricingToken(address newToken) public onlyGovernance validKeyToken(newToken) {\r\n    require((checkPricingToken(newToken)==false), \"Already a pricing token\");\r\n    pricingTokens.push(newToken);\r\n    emit PricingTokenAdded(newToken);\r\n  }\r\n\r\n  function removeKeyToken(address keyToken) external onlyGovernance validKeyToken(keyToken) {\r\n    uint256 i;\r\n    for ( i=0;i<keyTokens.length;i++) {\r\n      if (keyToken == keyTokens[i]){\r\n        break;\r\n      }\r\n    }\r\n    while (i<keyTokens.length-1) {\r\n      keyTokens[i] = keyTokens[i+1];\r\n      i++;\r\n    }\r\n    keyTokens.pop();\r\n    emit KeyTokenRemoved(keyToken);\r\n\r\n    if (checkPricingToken(keyToken)) {\r\n      removePricingToken(keyToken);\r\n    }\r\n  }\r\n  function removePricingToken(address pricingToken) public onlyGovernance validPricingToken(pricingToken) {\r\n    uint256 i;\r\n    for (i=0;i<pricingTokens.length;i++) {\r\n      if (pricingToken == pricingTokens[i]){\r\n        break;\r\n      }\r\n    }\r\n    while (i<pricingTokens.length-1) {\r\n      pricingTokens[i] = pricingTokens[i+1];\r\n      i++;\r\n    }\r\n    pricingTokens.pop();\r\n    emit PricingTokenRemoved(pricingToken);\r\n  }\r\n  function changeDefinedOutput(address newOutputToken) external onlyGovernance validKeyToken(newOutputToken) {\r\n    address oldOutputToken = definedOutputToken;\r\n    definedOutputToken = newOutputToken;\r\n    emit DefinedOutuptChanged(newOutputToken, oldOutputToken);\r\n  }\r\n\r\n  function addCurveException(address newException, uint256 exceptionList) external onlyGovernance {\r\n    (bool check0, bool check1) = checkCurveException(newException);\r\n    require(check0==false && check1 == false, \"Already an exception\");\r\n    require(exceptionList <= 1, 'Only accepts 0 or 1');\r\n    if (exceptionList == 0) {\r\n      curveExceptionList0.push(newException);\r\n    } else {\r\n      curveExceptionList1.push(newException);\r\n    }\r\n    emit CurveExceptionAdded(newException, exceptionList);\r\n  }\r\n  function removeCurveException(address exception) external onlyGovernance validException(exception) {\r\n    (bool check0,) = checkCurveException(exception);\r\n    uint256 i;\r\n    uint256 j;\r\n    uint256 list;\r\n    if (check0) {\r\n      list = 0;\r\n      for (i=0;i<curveExceptionList0.length;i++) {\r\n        if (exception == curveExceptionList0[i]){\r\n          break;\r\n        }\r\n      }\r\n      while (i<curveExceptionList0.length-1) {\r\n        curveExceptionList0[i] = curveExceptionList0[i+1];\r\n        i++;\r\n      }\r\n      curveExceptionList0.pop();\r\n    } else {\r\n      list = 1;\r\n      for (j=0;j<curveExceptionList1.length;j++) {\r\n        if (exception == curveExceptionList1[j]){\r\n          break;\r\n        }\r\n      }\r\n      while (j<curveExceptionList1.length-1) {\r\n        curveExceptionList1[j] = curveExceptionList1[j+1];\r\n        j++;\r\n      }\r\n      curveExceptionList1.pop();\r\n    }\r\n    emit CurveExceptionRemoved(exception, list);\r\n  }\r\n\r\n  //Main function of the contract. Gives the price of a given token in the defined output token.\r\n  //The contract allows for input tokens to be LP tokens from Uniswap, Sushiswap, Curve and 1Inch.\r\n  //In case of LP token, the underlying tokens will be found and valued to get the price.\r\n  function getPrice(address token) external view returns (uint256) {\r\n    if (token == definedOutputToken) {\r\n      return (10**PRECISION_DECIMALS);\r\n    }\r\n    bool uniSushiLP;\r\n    bool curveLP;\r\n    bool oneInchLP;\r\n    (uniSushiLP, curveLP, oneInchLP) = isLPCheck(token);\r\n    uint256 priceToken;\r\n    uint256 tokenValue;\r\n    uint256 price;\r\n    uint256 i;\r\n    if (uniSushiLP || oneInchLP) {\r\n      address[2] memory tokens;\r\n      uint256[2] memory amounts;\r\n      (tokens, amounts) = (uniSushiLP)? getUniUnderlying(token):getOneInchUnderlying(token);\r\n      for (i=0;i<2;i++) {\r\n        priceToken = computePrice(tokens[i]);\r\n        if (priceToken == 0) {\r\n          price = 0;\r\n          return price;\r\n        }\r\n        tokenValue = priceToken*amounts[i]/10**PRECISION_DECIMALS;\r\n        price = price + tokenValue;\r\n      }\r\n      return price;\r\n    } else if (curveLP) {\r\n      address[8] memory tokens;\r\n      uint256[8] memory amounts;\r\n      (tokens, amounts) = getCurveUnderlying(token);\r\n      for (i=0;i<tokens.length;i++) {\r\n        if (tokens[i] == address(0)) {\r\n          break;\r\n        }\r\n        priceToken = computePrice(tokens[i]);\r\n        if (priceToken == 0) {\r\n          price = 0;\r\n          return price;\r\n        }\r\n        tokenValue = priceToken*amounts[i]/10**PRECISION_DECIMALS;\r\n        price = price + tokenValue;\r\n      }\r\n      return price;\r\n    } else {\r\n      return computePrice(token);\r\n    }\r\n  }\r\n\r\n  function isLPCheck(address token) public view returns(bool, bool, bool) {\r\n    bool isOneInch = isOneInchCheck(token);\r\n    bool isUniSushi = isUniSushiCheck(token);\r\n    bool isCurve = isCurveCheck(token);\r\n    return (isUniSushi, isCurve, isOneInch);\r\n  }\r\n\r\n  //Checks if address is 1Inch LP\r\n  function isOneInchCheck(address token) internal view returns (bool) {\r\n    bool oneInchLP = oneInchFactory.isPool(token);\r\n    return oneInchLP;\r\n  }\r\n\r\n  //Checks if address is Uni or Sushi LP. This is done in two steps, because the second step seems to cause errors for some tokens.\r\n  //Only the first step is not deemed accurate enough, as any token could be called UNI-V2.\r\n  function isUniSushiCheck(address token) internal view returns (bool) {\r\n    IUniswapV2Pair pair = IUniswapV2Pair(token);\r\n    string memory uniSymbol = \"UNI-V2\";\r\n    string memory sushiSymbol = \"SLP\";\r\n    string memory symbol = pair.symbol();\r\n    if (isEqualString(symbol, uniSymbol)) {\r\n      return checkFactory(pair, uniswapFactoryAddress);\r\n    } else if (isEqualString(symbol, sushiSymbol)) {\r\n      return checkFactory(pair, sushiswapFactoryAddress);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function isEqualString(string memory arg1, string memory arg2) internal pure returns (bool) {\r\n    bool check = (keccak256(abi.encodePacked(arg1)) == keccak256(abi.encodePacked(arg2)))? true:false;\r\n    return check;\r\n  }\r\n\r\n  function checkFactory(IUniswapV2Pair pair, address compareFactory) internal view returns (bool) {\r\n    try pair.factory{gas: 3000}() returns (address factory) {\r\n      bool check = (factory == compareFactory)? true:false;\r\n      return check;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  //Checks if address is Curve LP\r\n  function isCurveCheck(address token) internal view returns (bool) {\r\n    address pool = curveRegistry.get_pool_from_lp_token(token);\r\n    bool check = (pool != address(0))? true:false;\r\n    return check;\r\n  }\r\n\r\n  //Get underlying tokens and amounts for Uni/Sushi LPs\r\n  function getUniUnderlying(address token) public view returns (address[2] memory, uint256[2] memory) {\r\n    IUniswapV2Pair pair = IUniswapV2Pair(token);\r\n    address[2] memory tokens;\r\n    uint256[2] memory amounts;\r\n    tokens[0] = pair.token0();\r\n    tokens[1] = pair.token1();\r\n    uint256 token0Decimals = ERC20(tokens[0]).decimals();\r\n    uint256 token1Decimals = ERC20(tokens[1]).decimals();\r\n    uint256 supplyDecimals = ERC20(token).decimals();\r\n    (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\r\n    uint256 totalSupply = pair.totalSupply();\r\n    if (reserve0 == 0 || reserve1 == 0 || totalSupply == 0) {\r\n      amounts[0] = 0;\r\n      amounts[1] = 0;\r\n      return (tokens, amounts);\r\n    }\r\n    amounts[0] = reserve0*10**(supplyDecimals-token0Decimals+PRECISION_DECIMALS)/totalSupply;\r\n    amounts[1] = reserve1*10**(supplyDecimals-token1Decimals+PRECISION_DECIMALS)/totalSupply;\r\n    return (tokens, amounts);\r\n  }\r\n\r\n  //Get underlying tokens and amounts for 1Inch LPs\r\n  function getOneInchUnderlying(address token) public view returns (address[2] memory, uint256[2] memory) {\r\n    IMooniswap pair = IMooniswap(token);\r\n    address[2] memory tokens;\r\n    uint256[2] memory amounts;\r\n    tokens[0] = pair.token0();\r\n    tokens[1] = pair.token1();\r\n    uint256 token0Decimals = (tokens[0]==address(0))? 18:ERC20(tokens[0]).decimals();\r\n    uint256 token1Decimals = ERC20(tokens[1]).decimals();\r\n    uint256 supplyDecimals = ERC20(token).decimals();\r\n    uint256 reserve0 = pair.getBalanceForRemoval(tokens[0]);\r\n    uint256 reserve1 = pair.getBalanceForRemoval(tokens[1]);\r\n    uint256 totalSupply = pair.totalSupply();\r\n    if (reserve0 == 0 || reserve1 == 0 || totalSupply == 0) {\r\n      amounts[0] = 0;\r\n      amounts[1] = 0;\r\n      return (tokens, amounts);\r\n    }\r\n    amounts[0] = reserve0*10**(supplyDecimals-token0Decimals+PRECISION_DECIMALS)/totalSupply;\r\n    amounts[1] = reserve1*10**(supplyDecimals-token1Decimals+PRECISION_DECIMALS)/totalSupply;\r\n\r\n    //1INCH uses ETH, instead of WETH in pools. For further calculations we continue with WETH instead.\r\n    //ETH will always be the first in the pair, so no need to check tokens[1]\r\n    if (tokens[0] == address(0)) {\r\n      tokens[0] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    }\r\n    return (tokens, amounts);\r\n  }\r\n\r\n  //Get underlying tokens and amounts for Curve LPs. Curve gives responses in arrays with length 8. There is no need to change their size.\r\n  function getCurveUnderlying(address token) public view returns (address[8] memory, uint256[8] memory) {\r\n    address pool = curveRegistry.get_pool_from_lp_token(token);\r\n    (bool exception0, bool exception1) = checkCurveException(token);\r\n    address[8] memory tokens;\r\n    uint256[8] memory reserves;\r\n    if (exception0) {\r\n      tokens = curveRegistry.get_underlying_coins(pool);\r\n      reserves = curveRegistry.get_balances(pool);\r\n    } else if (exception1) {\r\n      tokens = curveRegistry.get_coins(pool);\r\n      reserves = curveRegistry.get_balances(pool);\r\n    } else {\r\n      tokens = curveRegistry.get_underlying_coins(pool);\r\n      reserves = curveRegistry.get_underlying_balances(pool);\r\n    }\r\n\r\n    //Some pools work with ETH instead of WETH. For further calculations and functionality this is changed to WETH address.\r\n    uint256[8] memory decimals;\r\n    uint256 i;\r\n    uint256 totalSupply = IERC20(token).totalSupply();\r\n    uint256 supplyDecimals = ERC20(token).decimals();\r\n    uint256[8] memory amounts;\r\n    for (i=0;i<tokens.length;i++) {\r\n      if (tokens[i] == address(0)){\r\n        break;\r\n      } else if (tokens[i]==0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE){\r\n        decimals[i] = 18;\r\n        tokens[i] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n      } else {\r\n        decimals[i] = ERC20(tokens[i]).decimals();\r\n      }\r\n\r\n      amounts[i] = reserves[i]*10**(supplyDecimals-decimals[i]+PRECISION_DECIMALS)/totalSupply;\r\n      //Curve has errors in their registry, where amounts are stored with the wrong number of decimals\r\n      //This steps accounts for this. In general there will never be more than 1 of any underlying token\r\n      //per curve LP token. If it is more, the decimals are corrected.\r\n      if (amounts[i] > 10**PRECISION_DECIMALS) {\r\n        amounts[i] = amounts[i]*10**(decimals[i]-18);\r\n      }\r\n    }\r\n    return (tokens, amounts);\r\n  }\r\n\r\n  //Check address for the Curve exception lists.\r\n  function checkCurveException(address token) internal view returns (bool, bool) {\r\n    uint256 i;\r\n    for (i=0;i<curveExceptionList0.length;i++) {\r\n      if (token == curveExceptionList0[i]) {\r\n        return (true, false);\r\n      }\r\n    }\r\n    for (i=0;i<curveExceptionList1.length;i++) {\r\n      if (token == curveExceptionList1[i]) {\r\n        return (false, true);\r\n      }\r\n    }\r\n    return (false, false);\r\n  }\r\n\r\n  //General function to compute the price of a token vs the defined output token.\r\n  function computePrice(address token) public view returns (uint256) {\r\n    uint256 price;\r\n    if (token == definedOutputToken) {\r\n      price = 10**PRECISION_DECIMALS;\r\n    } else if (token == address(0)) {\r\n      price = 0;\r\n    } else {\r\n      (address keyToken, address pool, bool uni, bool sushi) = getLargestPool(token,keyTokens);\r\n      uint256 priceVsKeyToken;\r\n      uint256 keyTokenPrice;\r\n      if (keyToken == address(0)) {\r\n        price = 0;\r\n      } else if (uni) {\r\n        priceVsKeyToken = getPriceVsTokenUni(token,keyToken);\r\n        keyTokenPrice = getKeyTokenPrice(keyToken);\r\n        price = priceVsKeyToken*keyTokenPrice/10**PRECISION_DECIMALS;\r\n      } else if (sushi) {\r\n        priceVsKeyToken = getPriceVsTokenSushi(token,keyToken);\r\n        keyTokenPrice = getKeyTokenPrice(keyToken);\r\n        price = priceVsKeyToken*keyTokenPrice/10**PRECISION_DECIMALS;\r\n      } else {\r\n        priceVsKeyToken = getPriceVsTokenCurve(token,keyToken,pool);\r\n        keyTokenPrice = getKeyTokenPrice(keyToken);\r\n        price = priceVsKeyToken*keyTokenPrice/10**PRECISION_DECIMALS;\r\n      }\r\n    }\r\n    return (price);\r\n  }\r\n\r\n  //Checks the results of the different largest pool functions and returns the largest.\r\n  function getLargestPool(address token, address[] memory tokenList) public view returns (address, address, bool, bool) {\r\n    (address uniSushiKeyToken, uint256 uniSushiLiquidity, bool isUni) = getUniSushiLargestPool(token, tokenList);\r\n    (address curveKeyToken, address curvePool, uint256 curveLiquidity) = getCurveLargestPool(token, tokenList);\r\n    if (uniSushiLiquidity > curveLiquidity) {\r\n      bool isSushi = (isUni)? false:true;\r\n      return (uniSushiKeyToken, address(0), isUni, isSushi);\r\n    } else {\r\n      return (curveKeyToken, curvePool, false, false);\r\n    }\r\n  }\r\n\r\n  //Gives the Uniswap pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\r\n  function getUniSushiLargestPool(address token, address[] memory tokenList) internal view returns (address, uint256, bool) {\r\n    uint256 largestPoolSize = 0;\r\n    address largestKeyToken;\r\n    uint256 poolSize;\r\n    uint256 i;\r\n    uint256 poolSizeUni;\r\n    uint256 poolSizeSushi;\r\n    bool largestPoolisUni;\r\n    for (i=0;i<tokenList.length;i++) {\r\n      address pairAddressUni = uniswapFactory.getPair(token,tokenList[i]);\r\n      address pairAddressSushi = sushiswapFactory.getPair(token,tokenList[i]);\r\n      if (pairAddressUni!=address(0)) {\r\n        poolSizeUni = getUniPoolSize(pairAddressUni, token);\r\n      }\r\n      if (pairAddressSushi!=address(0)) {\r\n        poolSizeSushi = getUniPoolSize(pairAddressSushi, token);\r\n      }\r\n      bool uniDex = (poolSizeUni > poolSizeSushi);\r\n      poolSize = (uniDex)? poolSizeUni:poolSizeSushi;\r\n      if (poolSize > largestPoolSize) {\r\n        largestPoolSize = poolSize;\r\n        largestKeyToken = tokenList[i];\r\n        largestPoolisUni = uniDex;\r\n      }\r\n    }\r\n    return (largestKeyToken, largestPoolSize, largestPoolisUni);\r\n  }\r\n\r\n  function getUniPoolSize(address pairAddress, address token) internal view returns(uint256) {\r\n    IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n    address token0 = pair.token0();\r\n    (uint112 poolSize0, uint112 poolSize1,) = pair.getReserves();\r\n    uint256 poolSize = (token==token0)? poolSize0:poolSize1;\r\n    return poolSize;\r\n  }\r\n\r\n  //Gives the Curve pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\r\n  //Curve can have multiple pools for a given pair. Research showed that the largest pool is always given as first instance, so only the first needs to be called.\r\n  //In Curve USD based tokens are often pooled with 3Pool. In this case liquidity is the same with USDC, DAI and USDT. When liquidity is found with USDC\r\n  //the loop is stopped, as no larger liquidity will be found with any other asset and this reduces calls.\r\n  function getCurveLargestPool(address token, address[] memory tokenList) internal view returns (address, address, uint256) {\r\n    uint256 largestPoolSize = 0;\r\n    address largestPoolAddress;\r\n    address largestKeyToken;\r\n    uint256 poolSize;\r\n    uint256 i;\r\n    for (i=0;i<tokenList.length;i++) {\r\n      address poolAddress = curveRegistry.find_pool_for_coins(token, tokenList[i],0);\r\n      if (poolAddress == address(0)) {\r\n        continue;\r\n      }\r\n      address lpToken = curveRegistry.get_lp_token(poolAddress);\r\n      (bool exception0,) = checkCurveException(lpToken);\r\n      if (exception0) {\r\n        continue;\r\n      }\r\n      poolSize = getCurveBalance(token, tokenList[i], poolAddress);\r\n      if (poolSize > largestPoolSize) {\r\n        largestPoolSize = poolSize;\r\n        largestKeyToken = tokenList[i];\r\n        largestPoolAddress = poolAddress;\r\n        if (largestKeyToken == definedOutputToken) {\r\n          return (largestKeyToken, largestPoolAddress, largestPoolSize);\r\n        }\r\n      }\r\n    }\r\n    return (largestKeyToken, largestPoolAddress, largestPoolSize);\r\n  }\r\n\r\n  //Gives the balance of a given token in a given pool.\r\n  function getCurveBalance(address tokenFrom, address tokenTo, address pool) internal view returns (uint256) {\r\n    uint256 balance;\r\n    (int128 indexFrom,,bool underlying) = curveRegistry.get_coin_indices(pool, tokenFrom, tokenTo);\r\n    uint256[8] memory balances;\r\n    if (underlying) {\r\n      balances = curveRegistry.get_underlying_balances(pool);\r\n      uint256 decimals = ERC20(tokenFrom).decimals();\r\n      balance = balances[uint256(indexFrom)];\r\n      if (balance > 10**(decimals+10)) {\r\n        balance = balance*10**(decimals-18);\r\n      }\r\n    } else {\r\n      balances = curveRegistry.get_balances(pool);\r\n      balance = balances[uint256(indexFrom)];\r\n    }\r\n    return balance;\r\n  }\r\n\r\n  //Generic function giving the price of a given token vs another given token on Uniswap.\r\n  function getPriceVsTokenUni(address token0, address token1) internal view returns (uint256) {\r\n    address pairAddress = uniswapFactory.getPair(token0,token1);\r\n    IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n    (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\r\n    uint256 token0Decimals = ERC20(token0).decimals();\r\n    uint256 token1Decimals = ERC20(token1).decimals();\r\n    uint256 price;\r\n    if (token0 == pair.token0()) {\r\n      price = (reserve1*10**(token0Decimals-token1Decimals+PRECISION_DECIMALS))/reserve0;\r\n    } else {\r\n      price = (reserve0*10**(token0Decimals-token1Decimals+PRECISION_DECIMALS))/reserve1;\r\n    }\r\n    return price;\r\n  }\r\n\r\n  //Generic function giving the price of a given token vs another given token on Sushiswap.\r\n  function getPriceVsTokenSushi(address token0, address token1) internal view returns (uint256) {\r\n    address pairAddress = sushiswapFactory.getPair(token0,token1);\r\n    IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n    (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\r\n    uint256 token0Decimals = ERC20(token0).decimals();\r\n    uint256 token1Decimals = ERC20(token1).decimals();\r\n    uint256 price;\r\n    if (token0 == pair.token0()) {\r\n      price = (reserve1*10**(token0Decimals-token1Decimals+PRECISION_DECIMALS))/reserve0;\r\n    } else {\r\n      price = (reserve0*10**(token0Decimals-token1Decimals+PRECISION_DECIMALS))/reserve1;\r\n    }\r\n    return price;\r\n  }\r\n\r\n  //Generic function giving the price of a given token vs another given token on Curve.\r\n  function getPriceVsTokenCurve(address token0, address token1, address poolAddress) internal view returns (uint256) {\r\n    ICurvePool pool = ICurvePool(poolAddress);\r\n    (int128 indexFrom, int128 indexTo, bool underlying) = curveRegistry.get_coin_indices(poolAddress, token0, token1);\r\n    uint256 decimals0 = ERC20(token0).decimals();\r\n    uint256 decimals1 = ERC20(token1).decimals();\r\n    //Accuracy is impacted when one of the tokens has low decimals.\r\n    //This addition does not impact the outcome of computation, other than increased accuracy.\r\n    if (decimals0 < 4 || decimals1 < 4) {\r\n      decimals0 = decimals0 + 4;\r\n      decimals1 = decimals1 + 4;\r\n    }\r\n    uint256 amount1;\r\n    uint256 price;\r\n    if (underlying) {\r\n      amount1 = pool.get_dy_underlying(indexFrom, indexTo, 10**decimals0);\r\n      price = amount1*10**(PRECISION_DECIMALS-decimals1);\r\n    } else {\r\n      amount1 = pool.get_dy(indexFrom, indexTo, 10**decimals0);\r\n      price = amount1*10**(PRECISION_DECIMALS-decimals1);\r\n    }\r\n    return price;\r\n  }\r\n\r\n  //Gives the price of a given keyToken.\r\n  function getKeyTokenPrice(address token) internal view returns (uint256) {\r\n    bool isPricingToken = checkPricingToken(token);\r\n    uint256 price;\r\n    uint256 priceVsPricingToken;\r\n    if (token == definedOutputToken) {\r\n      price = 10**PRECISION_DECIMALS;\r\n    } else if (isPricingToken) {\r\n      price = getPriceVsTokenUni(token,definedOutputToken);\r\n    } else {\r\n      uint256 pricingTokenPrice;\r\n      (address pricingToken, address pricingPool, bool uni, bool sushi) = getLargestPool(token,pricingTokens);\r\n      if (uni) {\r\n        priceVsPricingToken = getPriceVsTokenUni(token,pricingToken);\r\n      } else if (sushi) {\r\n        priceVsPricingToken = getPriceVsTokenSushi(token,pricingToken);\r\n      } else {\r\n        priceVsPricingToken = getPriceVsTokenCurve(token,pricingToken,pricingPool);\r\n      }\r\n      pricingTokenPrice = (pricingToken == definedOutputToken)? 10**PRECISION_DECIMALS:getPriceVsTokenUni(pricingToken,definedOutputToken);\r\n      price = priceVsPricingToken*pricingTokenPrice/10**PRECISION_DECIMALS;\r\n    }\r\n    return price;\r\n  }\r\n\r\n  //Checks if a given token is in the pricingTokens list.\r\n  function checkPricingToken(address token) public view returns (bool) {\r\n    uint256 i;\r\n    for (i=0;i<pricingTokens.length;i++) {\r\n      if (token == pricingTokens[i]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  //Checks if a given token is in the keyTokens list.\r\n  function checkKeyToken(address token) public view returns (bool) {\r\n    uint256 i;\r\n    for (i=0;i<keyTokens.length;i++) {\r\n      if (token == keyTokens[i]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}\r\n"
    },
    "contracts/interface/curve/ICurvePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\ninterface ICurvePool {\r\n  function get_dy (int128 i, int128 j, uint256 dx) external view returns (uint256);\r\n  function get_dy_underlying (int128 i, int128 j, uint256 dx) external view returns (uint256);\r\n\r\n}\r\n"
    },
    "contracts/interface/curve/ICurveRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\ninterface ICurveRegistry {\r\n  function get_coins(address _pool) external view returns (address[8] memory);\r\n  function get_underlying_coins(address _pool) external view returns (address[8] memory);\r\n  function get_balances(address _pool) external view returns (uint256[8] memory);\r\n  function get_underlying_balances(address _pool) external view returns (uint256[8] memory);\r\n  function get_pool_from_lp_token(address _lp_token) external view returns (address);\r\n  function get_lp_token(address _pool) external view returns (address);\r\n  function pool_count() external view returns (uint256);\r\n  function pool_list(uint256) external view returns (address);\r\n  function get_decimals(address _pool) external view returns (uint256[8] memory);\r\n  function get_underlying_decimals(address _pool) external view returns (uint256[8] memory);\r\n  function get_coin_indices(address _pool, address _from, address _to) external view returns (int128, int128, bool);\r\n  function find_pool_for_coins(address _from, address _to, uint256 i) external view returns (address);\r\n}\r\n"
    },
    "contracts/OracleBSC_old.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\nimport \"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\";\r\nimport \"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/SafeBEP20.sol\";\r\n//import \"@pancakeswap/pancake-swap-lib/contracts/utils/Address.sol\";\r\nimport \"@pancakeswap/pancake-swap-lib/contracts/math/SafeMath.sol\";\r\nimport \"./interface/pancakeswap/IPancakeFactory.sol\";\r\nimport \"./interface/pancakeswap/IPancakePair.sol\";\r\nimport \"./interface/mooniswap/IMooniFactory.sol\";\r\nimport \"./interface/mooniswap/IMooniswap.sol\";\r\nimport \"./Governable.sol\";\r\nimport \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract OracleBSC_old is Governable {\r\n\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    EnumerableSet.AddressSet private stableTokens;\r\n    using SafeBEP20 for IBEP20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    //Addresses for factories and registries for different DEX platforms. Functions will be added to allow to alter these when needed.\r\n    address public pancakeFactoryAddress = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;\r\n    address public oneInchFactoryAddress = 0xD41B24bbA51fAc0E4827b6F94C0D6DDeB183cD64;\r\n    uint256 public PRECISION_DECIMALS = 18;\r\n\r\n    IPancakeFactory pancakeFactory = IPancakeFactory(pancakeFactoryAddress);\r\n    IMooniFactory oneInchFactory = IMooniFactory(oneInchFactoryAddress);\r\n\r\n    // registry for stable token -> sc address -> calldata to retrive price\r\n\r\n    mapping(address => registry) tokenToPrice;\r\n\r\n    struct registry {\r\n        address _address;\r\n        bytes _calldata;\r\n    }\r\n\r\n    mapping(address => address) replacementTokens;\r\n\r\n\r\n    //Key tokens are used to find liquidity for any given token on Pancakeswap and 1INCH.\r\n    address[] public keyTokens = [\r\n    0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d, //USDC\r\n    0x2170Ed0880ac9A755fd29B2688956BD959F933F8, //ETH\r\n    0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3, //DAI\r\n    0x55d398326f99059fF775485246999027B3197955, //USDT\r\n    0x23396cF899Ca06c4472205fC903bDB4de249D6fC, //UST\r\n    0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c, //BTCB\r\n    0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56, //BUSD\r\n    0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c, //WBNB\r\n    0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7, //VAI\r\n    0x111111111117dC0aa78b770fA6A738034120C302 //1INCH\r\n    ];\r\n    //Pricing tokens are Key tokens with good liquidity with the defined output token on Pancakeswap.\r\n    address[] public pricingTokens = [\r\n    0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c, //WBNB\r\n    0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56, //BUSD\r\n    0x23396cF899Ca06c4472205fC903bDB4de249D6fC, //UST\r\n    0x55d398326f99059fF775485246999027B3197955, //USDT\r\n    0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d, //USDC\r\n    0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7, //VAI\r\n    0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3  //DAI\r\n    ];\r\n    //The defined output token is the unit in which prices of input tokens are given.\r\n    address public definedOutputToken = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; //BUSD\r\n\r\n    modifier validKeyToken(address keyToken){\r\n        require(checkKeyToken(keyToken), \"Not a Key Token\");\r\n        _;\r\n    }\r\n    modifier validPricingToken(address pricingToken){\r\n        require(checkPricingToken(pricingToken), \"Not a Pricing Token\");\r\n        _;\r\n    }\r\n\r\n    event FactoryChanged(address newFactory, address oldFactory);\r\n    event KeyTokenAdded(address newKeyToken);\r\n    event PricingTokenAdded(address newPricingToken);\r\n    event KeyTokenRemoved(address keyToken);\r\n    event PricingTokenRemoved(address pricingToken);\r\n    event DefinedOutuptChanged(address newOutputToken, address oldOutputToken);\r\n\r\n    constructor()\r\n    Governable(msg.sender) public {}\r\n\r\n    function changePancakeFactory(address newFactory) external onlyGovernance {\r\n        address oldFactory = pancakeFactoryAddress;\r\n        pancakeFactoryAddress = newFactory;\r\n        pancakeFactory = IPancakeFactory(pancakeFactoryAddress);\r\n        emit FactoryChanged(newFactory, oldFactory);\r\n    }\r\n\r\n    function changeOneInchFactory(address newFactory) external onlyGovernance {\r\n        address oldFactory = oneInchFactoryAddress;\r\n        oneInchFactoryAddress = newFactory;\r\n        oneInchFactory = IMooniFactory(oneInchFactoryAddress);\r\n        emit FactoryChanged(newFactory, oldFactory);\r\n    }\r\n\r\n    function addKeyToken(address newToken) external onlyGovernance {\r\n        require((checkKeyToken(newToken) == false), \"Already a key token\");\r\n        keyTokens.push(newToken);\r\n        emit KeyTokenAdded(newToken);\r\n    }\r\n\r\n    function addPricingToken(address newToken) public onlyGovernance validKeyToken(newToken) {\r\n        require((checkPricingToken(newToken) == false), \"Already a pricing token\");\r\n        pricingTokens.push(newToken);\r\n        emit PricingTokenAdded(newToken);\r\n    }\r\n\r\n    function removeKeyToken(address keyToken) external onlyGovernance validKeyToken(keyToken) {\r\n        uint256 i;\r\n        for (i = 0; i < keyTokens.length; i++) {\r\n            if (keyToken == keyTokens[i]) {\r\n                break;\r\n            }\r\n        }\r\n        while (i < keyTokens.length - 1) {\r\n            keyTokens[i] = keyTokens[i + 1];\r\n            i++;\r\n        }\r\n        keyTokens.pop();\r\n        emit KeyTokenRemoved(keyToken);\r\n\r\n        if (checkPricingToken(keyToken)) {\r\n            removePricingToken(keyToken);\r\n        }\r\n    }\r\n\r\n    function removePricingToken(address pricingToken) public onlyGovernance validPricingToken(pricingToken) {\r\n        uint256 i;\r\n        for (i = 0; i < pricingTokens.length; i++) {\r\n            if (pricingToken == pricingTokens[i]) {\r\n                break;\r\n            }\r\n        }\r\n        while (i < pricingTokens.length - 1) {\r\n            pricingTokens[i] = pricingTokens[i + 1];\r\n            i++;\r\n        }\r\n        pricingTokens.pop();\r\n        emit PricingTokenRemoved(pricingToken);\r\n    }\r\n\r\n    function changeDefinedOutput(address newOutputToken) external onlyGovernance validKeyToken(newOutputToken) {\r\n        address oldOutputToken = definedOutputToken;\r\n        definedOutputToken = newOutputToken;\r\n        emit DefinedOutuptChanged(newOutputToken, oldOutputToken);\r\n    }\r\n\r\n    function modifyReplacementTokens(address _inputToken, address _replacementToken)\r\n    external onlyGovernance\r\n    {\r\n        replacementTokens[_inputToken] = _replacementToken;\r\n    }\r\n\r\n\r\n    //Main function of the contract. Gives the price of a given token in the defined output token.\r\n    //The contract allows for input tokens to be LP tokens from Pancakeswap and 1Inch.\r\n    //In case of LP token, the underlying tokens will be found and valued to get the price.\r\n    function getPrice(address token) external view returns (uint256) {\r\n        if (token == definedOutputToken) {\r\n            return (10 ** PRECISION_DECIMALS);\r\n        }\r\n\r\n        // if the token exists in the mapping, we'll swapp it for the replacement\r\n        // example btcb/renbtc pool -> btcb\r\n        if (replacementTokens[token] != address(0)) {\r\n            token = replacementTokens[token];\r\n        }\r\n\r\n        // jump out if it's a stable\r\n        if (isStableToken(token)) {\r\n            return getStablesPrice(token);\r\n        }\r\n\r\n        bool pancakeLP;\r\n        bool oneInchLP;\r\n        (pancakeLP, oneInchLP) = isLPCheck(token);\r\n        uint256 priceToken;\r\n        uint256 tokenValue;\r\n        uint256 price;\r\n        uint256 i;\r\n        if (pancakeLP || oneInchLP) {\r\n            address[2] memory tokens;\r\n            uint256[2] memory amounts;\r\n            (tokens, amounts) = (pancakeLP) ? getPancakeUnderlying(token) : getOneInchUnderlying(token);\r\n            for (i = 0; i < 2; i++) {\r\n                priceToken = computePrice(tokens[i]);\r\n                if (priceToken == 0) {\r\n                    price = 0;\r\n                    return price;\r\n                }\r\n                tokenValue = priceToken * amounts[i] / 10 ** PRECISION_DECIMALS;\r\n                price = price + tokenValue;\r\n            }\r\n            return price;\r\n        } else {\r\n            return computePrice(token);\r\n        }\r\n    }\r\n\r\n    function isLPCheck(address token) public view returns (bool, bool) {\r\n        bool isOneInch = isOneInchCheck(token);\r\n        bool isPancake = isPancakeCheck(token);\r\n        return (isPancake, isOneInch);\r\n    }\r\n\r\n    //Checks if address is 1Inch LP\r\n    function isOneInchCheck(address token) internal view returns (bool) {\r\n        bool oneInchLP = oneInchFactory.isPool(token);\r\n        return oneInchLP;\r\n    }\r\n\r\n    //Checks if address is Pancake LP. This is done in two steps, because the second step seems to cause errors for some tokens.\r\n    //Only the first step is not deemed accurate enough, as any token could be called Cake-LP.\r\n    function isPancakeCheck(address token) internal view returns (bool) {\r\n        IPancakePair pair = IPancakePair(token);\r\n        IBEP20 pairToken = IBEP20(token);\r\n        string memory pancakeSymbol = \"Cake-LP\";\r\n        string memory symbol = pairToken.symbol();\r\n        if (isEqualString(symbol, pancakeSymbol)) {\r\n            return checkFactory(pair, pancakeFactoryAddress);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function isEqualString(string memory arg1, string memory arg2) internal pure returns (bool) {\r\n        bool check = (keccak256(abi.encodePacked(arg1)) == keccak256(abi.encodePacked(arg2))) ? true : false;\r\n        return check;\r\n    }\r\n\r\n    function checkFactory(IPancakePair pair, address compareFactory) internal view returns (bool) {\r\n        try pair.factory{gas : 3000}() returns (address factory) {\r\n            bool check = (factory == compareFactory) ? true : false;\r\n            return check;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    //Get underlying tokens and amounts for Pancake LPs\r\n    function getPancakeUnderlying(address token) public view returns (address[2] memory, uint256[2] memory) {\r\n        IPancakePair pair = IPancakePair(token);\r\n        IBEP20 pairToken = IBEP20(token);\r\n        address[2] memory tokens;\r\n        uint256[2] memory amounts;\r\n        tokens[0] = pair.token0();\r\n        tokens[1] = pair.token1();\r\n        uint256 token0Decimals = IBEP20(tokens[0]).decimals();\r\n        uint256 token1Decimals = IBEP20(tokens[1]).decimals();\r\n        uint256 supplyDecimals = IBEP20(token).decimals();\r\n        (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\r\n        uint256 totalSupply = pairToken.totalSupply();\r\n        if (reserve0 == 0 || reserve1 == 0 || totalSupply == 0) {\r\n            amounts[0] = 0;\r\n            amounts[1] = 0;\r\n            return (tokens, amounts);\r\n        }\r\n        amounts[0] = reserve0 * 10 ** (supplyDecimals - token0Decimals + PRECISION_DECIMALS) / totalSupply;\r\n        amounts[1] = reserve1 * 10 ** (supplyDecimals - token1Decimals + PRECISION_DECIMALS) / totalSupply;\r\n        return (tokens, amounts);\r\n    }\r\n\r\n    //Get underlying tokens and amounts for 1Inch LPs\r\n    function getOneInchUnderlying(address token) public view returns (address[2] memory, uint256[2] memory) {\r\n        IMooniswap pair = IMooniswap(token);\r\n        address[2] memory tokens;\r\n        uint256[2] memory amounts;\r\n        tokens[0] = pair.token0();\r\n        tokens[1] = pair.token1();\r\n        uint256 token0Decimals = (tokens[0] == address(0)) ? 18 : IBEP20(tokens[0]).decimals();\r\n        uint256 token1Decimals = IBEP20(tokens[1]).decimals();\r\n        uint256 supplyDecimals = IBEP20(token).decimals();\r\n        uint256 reserve0 = pair.getBalanceForRemoval(tokens[0]);\r\n        uint256 reserve1 = pair.getBalanceForRemoval(tokens[1]);\r\n        uint256 totalSupply = pair.totalSupply();\r\n        if (reserve0 == 0 || reserve1 == 0 || totalSupply == 0) {\r\n            amounts[0] = 0;\r\n            amounts[1] = 0;\r\n            return (tokens, amounts);\r\n        }\r\n        amounts[0] = reserve0 * 10 ** (supplyDecimals - token0Decimals + PRECISION_DECIMALS) / totalSupply;\r\n        amounts[1] = reserve1 * 10 ** (supplyDecimals - token1Decimals + PRECISION_DECIMALS) / totalSupply;\r\n\r\n        //1INCH uses BNB, instead of WBNB in pools. For further calculations we continue with WBNB instead.\r\n        //BNB will always be the first in the pair, so no need to check tokens[1]\r\n        if (tokens[0] == address(0)) {\r\n            tokens[0] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        }\r\n        return (tokens, amounts);\r\n    }\r\n\r\n    //General function to compute the price of a token vs the defined output token.\r\n    function computePrice(address token) public view returns (uint256) {\r\n        uint256 price;\r\n        if (token == definedOutputToken) {\r\n            price = 10 ** PRECISION_DECIMALS;\r\n        } else if (token == address(0)) {\r\n            price = 0;\r\n        } else {\r\n            (address keyToken, bool pancake) = getLargestPool(token, keyTokens);\r\n            uint256 priceVsKeyToken;\r\n            uint256 keyTokenPrice;\r\n            if (keyToken == address(0)) {\r\n                price = 0;\r\n            } else if (pancake) {\r\n                priceVsKeyToken = getPriceVsTokenPancake(token, keyToken);\r\n                keyTokenPrice = getKeyTokenPrice(keyToken);\r\n                price = priceVsKeyToken * keyTokenPrice / 10 ** PRECISION_DECIMALS;\r\n            } else {\r\n                priceVsKeyToken = getPriceVsToken1Inch(token, keyToken);\r\n                keyTokenPrice = getKeyTokenPrice(keyToken);\r\n                price = priceVsKeyToken * keyTokenPrice / 10 ** PRECISION_DECIMALS;\r\n            }\r\n        }\r\n        return (price);\r\n    }\r\n\r\n    //Checks the results of the different largest pool functions and returns the largest.\r\n    function getLargestPool(address token, address[] memory tokenList) public view returns (address, bool) {\r\n        (address pancakeKeyToken, uint256 pancakeLiquidity) = getPancakeLargestPool(token, tokenList);\r\n        (address oneInchKeyToken, uint256 oneInchLiquidity) = get1InchLargestPool(token, tokenList);\r\n        if (pancakeLiquidity > oneInchLiquidity) {\r\n            return (pancakeKeyToken, true);\r\n        } else {\r\n            return (oneInchKeyToken, false);\r\n        }\r\n    }\r\n\r\n    //Gives the Pancakeswap pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\r\n    function getPancakeLargestPool(address token, address[] memory tokenList) internal view returns (address, uint256) {\r\n        uint256 largestPoolSize = 0;\r\n        address largestKeyToken;\r\n        uint256 poolSize;\r\n        uint256 i;\r\n        for (i = 0; i < tokenList.length; i++) {\r\n            address pairAddress = pancakeFactory.getPair(token, tokenList[i]);\r\n            if (pairAddress != address(0)) {\r\n                poolSize = getPancakePoolSize(pairAddress, token);\r\n            } else {\r\n                poolSize = 0;\r\n            }\r\n            if (poolSize > largestPoolSize) {\r\n                largestPoolSize = poolSize;\r\n                largestKeyToken = tokenList[i];\r\n            }\r\n        }\r\n        return (largestKeyToken, largestPoolSize);\r\n    }\r\n\r\n    function getPancakePoolSize(address pairAddress, address token) internal view returns (uint256) {\r\n        IPancakePair pair = IPancakePair(pairAddress);\r\n        address token0 = pair.token0();\r\n        (uint112 poolSize0, uint112 poolSize1,) = pair.getReserves();\r\n        uint256 poolSize = (token == token0) ? poolSize0 : poolSize1;\r\n        return poolSize;\r\n    }\r\n\r\n    //Gives the 1INCH pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\r\n    function get1InchLargestPool(address token, address[] memory tokenList) internal view returns (address, uint256) {\r\n        uint256 largestPoolSize = 0;\r\n        address largestKeyToken;\r\n        uint256 poolSize;\r\n        uint256 i;\r\n        for (i = 0; i < tokenList.length; i++) {\r\n            address pairAddress = oneInchFactory.pools(token, tokenList[i]);\r\n            if (pairAddress != address(0)) {\r\n                poolSize = get1InchPoolSize(pairAddress, token);\r\n            } else {\r\n                poolSize = 0;\r\n            }\r\n            if (poolSize > largestPoolSize) {\r\n                largestPoolSize = poolSize;\r\n                largestKeyToken = tokenList[i];\r\n            }\r\n        }\r\n        return (largestKeyToken, largestPoolSize);\r\n    }\r\n\r\n    function get1InchPoolSize(address pairAddress, address token) internal view returns (uint256) {\r\n        IMooniswap pair = IMooniswap(pairAddress);\r\n        address token0 = pair.token0();\r\n        address token1 = pair.token1();\r\n        uint256 poolSize0;\r\n        uint256 poolSize1;\r\n\r\n        try pair.getBalanceForRemoval(token0) returns (uint256 poolSize) {\r\n            poolSize0 = poolSize;\r\n        } catch {\r\n            poolSize0 = 0;\r\n        }\r\n\r\n        try pair.getBalanceForRemoval(token1) returns (uint256 poolSize) {\r\n            poolSize1 = poolSize;\r\n        } catch {\r\n            poolSize1 = 0;\r\n        }\r\n\r\n        if (token0 == address(0)) {\r\n            token0 = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        }\r\n        uint256 poolSize = (token == token0) ? poolSize0 : poolSize1;\r\n        return poolSize;\r\n    }\r\n\r\n    //Generic function giving the price of a given token vs another given token on Pancakeswap.\r\n    function getPriceVsTokenPancake(address token0, address token1) internal view returns (uint256) {\r\n        address pairAddress = pancakeFactory.getPair(token0, token1);\r\n        IPancakePair pair = IPancakePair(pairAddress);\r\n        (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\r\n        uint256 token0Decimals = IBEP20(token0).decimals();\r\n        uint256 token1Decimals = IBEP20(token1).decimals();\r\n        uint256 price;\r\n        if (token0 == pair.token0()) {\r\n            price = (reserve1 * 10 ** (token0Decimals - token1Decimals + PRECISION_DECIMALS)) / reserve0;\r\n        } else {\r\n            price = (reserve0 * 10 ** (token0Decimals - token1Decimals + PRECISION_DECIMALS)) / reserve1;\r\n        }\r\n        return price;\r\n    }\r\n\r\n    //Generic function giving the price of a given token vs another given token on 1INCH.\r\n    function getPriceVsToken1Inch(address token0, address token1) internal view returns (uint256) {\r\n        address pairAddress = oneInchFactory.pools(token0, token1);\r\n        IMooniswap pair = IMooniswap(pairAddress);\r\n        uint256 reserve0 = pair.getBalanceForRemoval(token0);\r\n        uint256 reserve1 = pair.getBalanceForRemoval(token1);\r\n        uint256 token0Decimals = IBEP20(token0).decimals();\r\n        uint256 token1Decimals = IBEP20(token1).decimals();\r\n        uint256 price = (reserve1 * 10 ** (token0Decimals - token1Decimals + PRECISION_DECIMALS)) / reserve0;\r\n        return price;\r\n    }\r\n\r\n    //Gives the price of a given keyToken.\r\n    function getKeyTokenPrice(address token) internal view returns (uint256) {\r\n        bool isPricingToken = checkPricingToken(token);\r\n        uint256 price;\r\n        uint256 priceVsPricingToken;\r\n        if (token == definedOutputToken) {\r\n            price = 10 ** PRECISION_DECIMALS;\r\n        } else if (isPricingToken) {\r\n            price = getPriceVsTokenPancake(token, definedOutputToken);\r\n        } else {\r\n            uint256 pricingTokenPrice;\r\n            (address pricingToken, bool pancake) = getLargestPool(token, pricingTokens);\r\n            if (pancake) {\r\n                priceVsPricingToken = getPriceVsTokenPancake(token, pricingToken);\r\n            } else {\r\n                priceVsPricingToken = getPriceVsToken1Inch(token, pricingToken);\r\n            }\r\n            pricingTokenPrice = (pricingToken == definedOutputToken) ? 10 ** PRECISION_DECIMALS : getPriceVsTokenPancake(pricingToken, definedOutputToken);\r\n            price = priceVsPricingToken * pricingTokenPrice / 10 ** PRECISION_DECIMALS;\r\n        }\r\n        return price;\r\n    }\r\n\r\n    //Checks if a given token is in the pricingTokens list.\r\n    function checkPricingToken(address token) public view returns (bool) {\r\n        uint256 i;\r\n        for (i = 0; i < pricingTokens.length; i++) {\r\n            if (token == pricingTokens[i]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //Checks if a given token is in the keyTokens list.\r\n    function checkKeyToken(address token) public view returns (bool) {\r\n        uint256 i;\r\n        for (i = 0; i < keyTokens.length; i++) {\r\n            if (token == keyTokens[i]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // @param _token token to be queried\r\n    // @param _address sc address in registry\r\n    // @param _calldata abi encoded function signature with parameters to be called\r\n    function modifyRegistry(address _token, address _address, bytes calldata _calldata)\r\n    external onlyGovernance\r\n    returns (bool)\r\n    {\r\n        registry memory r;\r\n        r._address = _address;\r\n        r._calldata = _calldata;\r\n        tokenToPrice[_token] = r;\r\n        return true;\r\n    }\r\n\r\n    //@param _token token to be added to stable token set\r\n    function addStableToken(address _token)\r\n    external onlyGovernance\r\n    returns (bool)\r\n    {\r\n        stableTokens.add(_token);\r\n        return true;\r\n    }\r\n\r\n    //@param _token token to be removed from stable token set\r\n    function removeStableToken(address _token)\r\n    external onlyGovernance\r\n    returns (bool)\r\n    {\r\n        stableTokens.remove(_token);\r\n        return true;\r\n    }\r\n\r\n    //@param _token to check if is stable token\r\n    function isStableToken(address _token)\r\n    internal view\r\n    returns (bool)\r\n    {\r\n        return stableTokens.contains(_token);\r\n    }\r\n\r\n    //@dev queries the struct registry that has previously been loaded with smart contract address,\r\n    // calldata that retrieves the price for that particular token, this can be changed via modifyRegistry\r\n    //@param _token token to return price for\r\n    function getStablesPrice(address _token)\r\n    internal view\r\n    returns (uint256)\r\n    {\r\n        registry memory r = tokenToPrice[_token];\r\n        (bool success, bytes memory returnData) = r._address.staticcall(r._calldata);\r\n        require(success, \"couldn't call for price data\"); // this is very unlikely to not succeed\r\n        return abi.decode(returnData, (uint256));\r\n\r\n    }\r\n\r\n\r\n}\r\n"
    },
    "@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.4.0;\n\ninterface IBEP20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external view returns (address);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address _owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@pancakeswap/pancake-swap-lib/contracts/token/BEP20/SafeBEP20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport './IBEP20.sol';\nimport '../../math/SafeMath.sol';\nimport '../../utils/Address.sol';\n\n/**\n * @title SafeBEP20\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeBEP20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IBEP20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IBEP20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IBEP20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            'SafeBEP20: approve from non-zero to non-zero allowance'\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\n            value,\n            'SafeBEP20: decreased allowance below zero'\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed');\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed');\n        }\n    }\n}\n"
    },
    "@pancakeswap/pancake-swap-lib/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, 'SafeMath: addition overflow');\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, 'SafeMath: subtraction overflow');\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, 'SafeMath: multiplication overflow');\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, 'SafeMath: division by zero');\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, 'SafeMath: modulo by zero');\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "contracts/interface/pancakeswap/IPancakeFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n"
    },
    "contracts/interface/pancakeswap/IPancakePair.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@pancakeswap/pancake-swap-lib/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, 'Address: insufficient balance');\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}('');\n        require(success, 'Address: unable to send value, recipient may have reverted');\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, 'Address: low-level call failed');\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        require(isContract(target), 'Address: call to non-contract');\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/PancakeSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\nimport \"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\";\r\nimport \"./interface/pancakeswap/IPancakeFactory.sol\";\r\nimport \"./interface/pancakeswap/IPancakePair.sol\";\r\nimport \"./SwapBase.sol\";\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract PancakeSwap is SwapBase {\r\n\r\n  IPancakeFactory pancakeFactory;\r\n\r\n  constructor(address _factoryAddress) SwapBase(_factoryAddress) public {\r\n\r\n  }\r\n\r\n  function initializeFactory() internal virtual override {\r\n    pancakeFactory = IPancakeFactory(factoryAddress);\r\n  }\r\n\r\n  function checkFactory(IPancakePair pair, address compareFactory) internal view returns (bool) {\r\n    bool check;\r\n    try pair.factory{gas: 3000}() returns (address factory) {\r\n      check = (factory == compareFactory);\r\n    } catch {\r\n      check = false;\r\n    }\r\n    return check;\r\n  }\r\n\r\n  /// @dev Check what token is pool of this Swap\r\n  function isPool(address token) public virtual override view returns(bool){\r\n    IPancakePair pair = IPancakePair(token);\r\n    return checkFactory(pair, factoryAddress);\r\n  }\r\n\r\n  /// @dev Get underlying tokens and amounts\r\n  function getUnderlying(address token) public virtual override view returns (address[] memory, uint256[] memory){\r\n    IPancakePair pair = IPancakePair(token);\r\n    IBEP20 pairToken = IBEP20(token);\r\n    address[] memory tokens  = new address[](2);\r\n    uint256[] memory amounts = new uint256[](2);\r\n    tokens[0] = pair.token0();\r\n    tokens[1] = pair.token1();\r\n    uint256 token0Decimals = IBEP20(tokens[0]).decimals();\r\n    uint256 token1Decimals = IBEP20(tokens[1]).decimals();\r\n    uint256 supplyDecimals = IBEP20(token).decimals();\r\n    (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\r\n    uint256 totalSupply = pairToken.totalSupply();\r\n    if (reserve0 == 0 || reserve1 == 0 || totalSupply == 0) {\r\n      amounts[0] = 0;\r\n      amounts[1] = 0;\r\n      return (tokens, amounts);\r\n    }\r\n    amounts[0] = reserve0 * 10 ** (supplyDecimals - token0Decimals + PRECISION_DECIMALS) / totalSupply;\r\n    amounts[1] = reserve1 * 10 ** (supplyDecimals - token1Decimals + PRECISION_DECIMALS) / totalSupply;\r\n    return (tokens, amounts);\r\n  }\r\n\r\n  /// @dev Returns pool size\r\n  function getPoolSize(address pairAddress, address token) internal view returns(uint256){\r\n    IPancakePair pair = IPancakePair(pairAddress);\r\n    address token0 = pair.token0();\r\n    (uint112 poolSize0, uint112 poolSize1,) = pair.getReserves();\r\n    uint256 poolSize = (token == token0) ? poolSize0 : poolSize1;\r\n    return poolSize;\r\n  }\r\n\r\n  /// @dev Gives a pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\r\n  function getLargestPool(address token, address[] memory tokenList) public virtual override view returns (address, address, uint256){\r\n    uint256 largestPoolSize = 0;\r\n    address largestKeyToken;\r\n    address largestPool;\r\n    uint256 poolSize;\r\n    uint256 i;\r\n    for (i=0;i<tokenList.length;i++) {\r\n      address poolAddress = pancakeFactory.getPair(token,tokenList[i]);\r\n      poolSize = poolAddress !=address(0) ? getPoolSize(poolAddress, token) : 0;\r\n      if (poolSize > largestPoolSize) {\r\n        largestKeyToken = tokenList[i];\r\n        largestPool = poolAddress;\r\n        largestPoolSize = poolSize;\r\n      }\r\n    }\r\n    return (largestKeyToken, largestPool, largestPoolSize);\r\n  }\r\n\r\n  /// @dev Generic function giving the price of a given token vs another given token\r\n  function getPriceVsToken(address token0, address token1, address /*poolAddress*/) public virtual override view returns (uint256){\r\n    address pairAddress = pancakeFactory.getPair(token0, token1);\r\n    IPancakePair pair = IPancakePair(pairAddress);\r\n    (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\r\n    uint256 token0Decimals = IBEP20(token0).decimals();\r\n    uint256 token1Decimals = IBEP20(token1).decimals();\r\n    uint256 price;\r\n    if (token0 == pair.token0()) {\r\n      price = (reserve1 * 10 ** (token0Decimals - token1Decimals + PRECISION_DECIMALS)) / reserve0;\r\n    } else {\r\n      price = (reserve0 * 10 ** (token0Decimals - token1Decimals + PRECISION_DECIMALS)) / reserve1;\r\n    }\r\n    return price;\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/SwapBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\npragma solidity 0.6.12;\r\n\r\nabstract contract SwapBase {\r\n\r\n  using Address for address;\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public constant PRECISION_DECIMALS = 18;\r\n\r\n  address factoryAddress;\r\n\r\n  constructor(address _factoryAddress) public {\r\n    require(_factoryAddress!=address(0), \"Factory must be set\");\r\n    factoryAddress = _factoryAddress;\r\n    initializeFactory();\r\n  }\r\n\r\n  function initializeFactory() internal virtual;\r\n\r\n  /// @dev Check what token is pool of this Swap\r\n  function isPool(address token) public virtual view returns(bool);\r\n\r\n  /// @dev Get underlying tokens and amounts\r\n  function getUnderlying(address token) public virtual view returns (address[] memory, uint256[] memory);\r\n\r\n  /// @dev Gives a pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\r\n  function getLargestPool(address token, address[] memory tokenList) public virtual view returns (address, address, uint256);\r\n  // return (largestKeyToken, largestPoolAddress, largestPoolSize);\r\n\r\n  /// @dev Generic function giving the price of a given token vs another given token\r\n  function getPriceVsToken(address token0, address token1, address poolAddress) public virtual view returns (uint256) ;\r\n\r\n}\r\n"
    },
    "contracts/UniSwapV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// https://uniswap.org/blog/uniswap-v3/\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"./interface/uniswapV3/IUniswapV3Factory.sol\";\r\nimport \"./interface/uniswapV3/IUniswapV3Pool.sol\";\r\nimport \"./SwapBase.sol\";\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract UniSwapV3 is SwapBase {\r\n\r\n  uint256 public constant ONE = 10**PRECISION_DECIMALS;\r\n  uint256 public constant ONE2 = ONE**2;\r\n\r\n  IUniswapV3Factory uniswapFactory;\r\n\r\n  // @dev array of fee rate tiers\r\n  // The initially supported fee tiers are 0.05%, 0.30%, and 1%.\r\n  // UNI governance is able to add additional values to this set.\r\n  // denominated in hundredths of a bip\r\n  uint24[] public fees = [500, 3000, 10000];\r\n\r\n  constructor(address _factoryAddress) SwapBase(_factoryAddress) public {\r\n  }\r\n\r\n  function initializeFactory() internal virtual override {\r\n    uniswapFactory = IUniswapV3Factory(factoryAddress);\r\n  }\r\n\r\n  function checkFactory(IUniswapV3Pool pair, address compareFactory) internal view returns (bool) {\r\n    bool check;\r\n    try pair.factory{gas: 3000}() returns (address factory) {\r\n      check = (factory == compareFactory);\r\n    } catch {\r\n      check = false;\r\n    }\r\n    return check;\r\n  }\r\n\r\n  /// @dev Check what token is pool of this Swap\r\n  function isPool(address token) public virtual override view returns(bool){\r\n    IUniswapV3Pool pair = IUniswapV3Pool(token);\r\n    return checkFactory(pair, factoryAddress);\r\n  }\r\n\r\n  /// @dev Get underlying tokens and amounts. In UniV3 pool address should be passed instead token address\r\n  function getUnderlying(address token) public virtual override view returns (address[] memory, uint256[] memory){\r\n    IUniswapV3Pool pair = IUniswapV3Pool(token);\r\n    address[] memory tokens  = new address[](2);\r\n    uint256[] memory amounts = new uint256[](2);\r\n    tokens[0] = pair.token0();\r\n    tokens[1] = pair.token1();\r\n    uint256 token0Decimals = ERC20(tokens[0]).decimals();\r\n    uint256 token1Decimals = ERC20(tokens[1]).decimals();\r\n    uint256 liquidity = pair.liquidity();\r\n    if (liquidity == 0) {\r\n      amounts[0] = 0;\r\n      amounts[1] = 0;\r\n      return (tokens, amounts);\r\n    }\r\n    amounts[0] = liquidity; //TODO How we have to do with liquidity in comparison with UniSwap.sol (V2)?\r\n    amounts[1] = liquidity;\r\n    return (tokens, amounts);\r\n  }\r\n\r\n  /// @dev Returns pool size\r\n  function getPoolSize(address pairAddress) internal view returns(uint256){\r\n    IUniswapV3Pool pair = IUniswapV3Pool(pairAddress);\r\n    uint256 poolSize = pair.liquidity(); // The currently in range liquidity available to the pool\r\n    /// This value has no relationship to the total liquidity across all ticks\r\n    return poolSize;\r\n  }\r\n\r\n  /// @dev Gives a pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\r\n  function getLargestPool(address token, address[] memory tokenList) public virtual override view returns (address, address, uint256){\r\n    uint256 largestPoolSize = 0;\r\n    address largestKeyToken;\r\n    address largestPool;\r\n    uint256 poolSize;\r\n    for (uint256 i=0;i<tokenList.length;i++) {\r\n      for (uint256 f=0;f<fees.length;f++) { // iterate fees pools from lowest to highest\r\n        address poolAddress = uniswapFactory.getPool(token,tokenList[i], fees[f]);\r\n        poolSize = poolAddress !=address(0) ? getPoolSize(poolAddress) : 0;\r\n        if (poolSize > largestPoolSize) {\r\n          largestKeyToken = tokenList[i];\r\n          largestPool = poolAddress;\r\n          largestPoolSize = poolSize;\r\n        }\r\n      }\r\n    }\r\n    return (largestKeyToken, largestPool, largestPoolSize);\r\n  }\r\n\r\n  function sqrt(uint y) internal pure returns (uint z) {\r\n    if (y > 3) {\r\n      z = y;\r\n      uint x = y / 2 + 1;\r\n      while (x < z) {\r\n        z = x;\r\n        x = (y / x + x) / 2;\r\n      }\r\n    } else if (y != 0) {\r\n      z = 1;\r\n    } else z = 0;\r\n  }\r\n\r\n  /// @dev Generic function giving the price of a given token vs another given token\r\n  function getPriceVsToken(address token1, address token0, address _poolAddress) // to have same result as uniV2, token0 and token1 was swapped here\r\n  public virtual override view returns (uint256)\r\n  {\r\n    address poolAddress;\r\n    if (_poolAddress!=address(0))\r\n      poolAddress = _poolAddress;\r\n    else {\r\n      for (uint256 f=0;f<fees.length;f++) { // iterate fees pools from lowest to highest\r\n        poolAddress = uniswapFactory.getPool(token0, token1, fees[f]);\r\n        if (poolAddress !=address(0)) break;\r\n      }\r\n    }\r\n\r\n    if (poolAddress ==address(0)) return 0;\r\n\r\n    IUniswapV3Pool pair = IUniswapV3Pool(poolAddress);\r\n    uint256 token0Decimals = ERC20(token0).decimals();\r\n    uint256 token1Decimals = ERC20(token1).decimals();\r\n\r\n    (uint160 sqrtPriceX96,,,,,,) = pair.slot0();\r\n\r\n    bool reverse = token0 == pair.token0();\r\n\r\n    uint decimals = reverse ?\r\n      PRECISION_DECIMALS + token0Decimals - token1Decimals :\r\n      PRECISION_DECIMALS + token1Decimals - token0Decimals;\r\n    uint multiplier = (10**decimals);\r\n\r\n    uint256 sqrtPrice = uint(sqrtPriceX96).mul(sqrt(multiplier)) >> 96;\r\n    uint256 price = sqrtPrice.mul(sqrtPrice);\r\n\r\n    if (reverse) price = ONE2.div(price);\r\n\r\n    return price;\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/interface/uniswapV3/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title The interface for the Uniswap V3 Factory\r\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\r\ninterface IUniswapV3Factory {\r\n    /// @notice Emitted when the owner of the factory is changed\r\n    /// @param oldOwner The owner before the owner was changed\r\n    /// @param newOwner The owner after the owner was changed\r\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\r\n\r\n    /// @notice Emitted when a pool is created\r\n    /// @param token0 The first token of the pool by address sort order\r\n    /// @param token1 The second token of the pool by address sort order\r\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\r\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\r\n    /// @param pool The address of the created pool\r\n    event PoolCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        uint24 indexed fee,\r\n        int24 tickSpacing,\r\n        address pool\r\n    );\r\n\r\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\r\n    /// @param fee The enabled fee, denominated in hundredths of a bip\r\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\r\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\r\n\r\n    /// @notice Returns the current owner of the factory\r\n    /// @dev Can be changed by the current owner via setOwner\r\n    /// @return The address of the factory owner\r\n    function owner() external view returns (address);\r\n\r\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\r\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\r\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\r\n    /// @return The tick spacing\r\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\r\n\r\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\r\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\r\n    /// @param tokenA The contract address of either token0 or token1\r\n    /// @param tokenB The contract address of the other token\r\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\r\n    /// @return pool The pool address\r\n    function getPool(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) external view returns (address pool);\r\n\r\n    /// @notice Creates a pool for the given two tokens and fee\r\n    /// @param tokenA One of the two tokens in the desired pool\r\n    /// @param tokenB The other of the two tokens in the desired pool\r\n    /// @param fee The desired fee for the pool\r\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\r\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\r\n    /// are invalid.\r\n    /// @return pool The address of the newly created pool\r\n    function createPool(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) external returns (address pool);\r\n\r\n    /// @notice Updates the owner of the factory\r\n    /// @dev Must be called by the current owner\r\n    /// @param _owner The new owner of the factory\r\n    function setOwner(address _owner) external;\r\n\r\n    /// @notice Enables a fee amount with the given tickSpacing\r\n    /// @dev Fee amounts may never be removed once enabled\r\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\r\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\r\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\r\n}\r\n"
    },
    "contracts/interface/uniswapV3/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\nimport './pool/IUniswapV3PoolImmutables.sol';\r\nimport './pool/IUniswapV3PoolState.sol';\r\nimport './pool/IUniswapV3PoolDerivedState.sol';\r\nimport './pool/IUniswapV3PoolActions.sol';\r\nimport './pool/IUniswapV3PoolOwnerActions.sol';\r\nimport './pool/IUniswapV3PoolEvents.sol';\r\n\r\n/// @title The interface for a Uniswap V3 Pool\r\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\r\n/// to the ERC20 specification\r\n/// @dev The pool interface is broken up into many smaller pieces\r\ninterface IUniswapV3Pool is\r\n    IUniswapV3PoolImmutables,\r\n    IUniswapV3PoolState,\r\n    IUniswapV3PoolDerivedState,\r\n    IUniswapV3PoolActions,\r\n    IUniswapV3PoolOwnerActions,\r\n    IUniswapV3PoolEvents\r\n{\r\n\r\n}\r\n"
    },
    "contracts/interface/uniswapV3/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Pool state that never changes\r\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\r\ninterface IUniswapV3PoolImmutables {\r\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\r\n    /// @return The contract address\r\n    function factory() external view returns (address);\r\n\r\n    /// @notice The first of the two tokens of the pool, sorted by address\r\n    /// @return The token contract address\r\n    function token0() external view returns (address);\r\n\r\n    /// @notice The second of the two tokens of the pool, sorted by address\r\n    /// @return The token contract address\r\n    function token1() external view returns (address);\r\n\r\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\r\n    /// @return The fee\r\n    function fee() external view returns (uint24);\r\n\r\n    /// @notice The pool tick spacing\r\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\r\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\r\n    /// This value is an int24 to avoid casting even though it is always positive.\r\n    /// @return The tick spacing\r\n    function tickSpacing() external view returns (int24);\r\n\r\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\r\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\r\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\r\n    /// @return The max amount of liquidity per tick\r\n    function maxLiquidityPerTick() external view returns (uint128);\r\n}\r\n"
    },
    "contracts/interface/uniswapV3/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Pool state that can change\r\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\r\n/// per transaction\r\ninterface IUniswapV3PoolState {\r\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\r\n    /// when accessed externally.\r\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\r\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\r\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\r\n    /// boundary.\r\n    /// observationIndex The index of the last oracle observation that was written,\r\n    /// observationCardinality The current maximum number of observations stored in the pool,\r\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\r\n    /// feeProtocol The protocol fee for both tokens of the pool.\r\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\r\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\r\n    /// unlocked Whether the pool is currently locked to reentrancy\r\n    function slot0()\r\n        external\r\n        view\r\n        returns (\r\n            uint160 sqrtPriceX96,\r\n            int24 tick,\r\n            uint16 observationIndex,\r\n            uint16 observationCardinality,\r\n            uint16 observationCardinalityNext,\r\n            uint8 feeProtocol,\r\n            bool unlocked\r\n        );\r\n\r\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\r\n    /// @dev This value can overflow the uint256\r\n    function feeGrowthGlobal0X128() external view returns (uint256);\r\n\r\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\r\n    /// @dev This value can overflow the uint256\r\n    function feeGrowthGlobal1X128() external view returns (uint256);\r\n\r\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\r\n    /// @dev Protocol fees will never exceed uint128 max in either token\r\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\r\n\r\n    /// @notice The currently in range liquidity available to the pool\r\n    /// @dev This value has no relationship to the total liquidity across all ticks\r\n    function liquidity() external view returns (uint128);\r\n\r\n    /// @notice Look up information about a specific tick in the pool\r\n    /// @param tick The tick to look up\r\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\r\n    /// tick upper,\r\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\r\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\r\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\r\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\r\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\r\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\r\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\r\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\r\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\r\n    /// a specific position.\r\n    function ticks(int24 tick)\r\n        external\r\n        view\r\n        returns (\r\n            uint128 liquidityGross,\r\n            int128 liquidityNet,\r\n            uint256 feeGrowthOutside0X128,\r\n            uint256 feeGrowthOutside1X128,\r\n            int56 tickCumulativeOutside,\r\n            uint160 secondsPerLiquidityOutsideX128,\r\n            uint32 secondsOutside,\r\n            bool initialized\r\n        );\r\n\r\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\r\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\r\n\r\n    /// @notice Returns the information about a position by the position's key\r\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\r\n    /// @return _liquidity The amount of liquidity in the position,\r\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\r\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\r\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\r\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\r\n    function positions(bytes32 key)\r\n        external\r\n        view\r\n        returns (\r\n            uint128 _liquidity,\r\n            uint256 feeGrowthInside0LastX128,\r\n            uint256 feeGrowthInside1LastX128,\r\n            uint128 tokensOwed0,\r\n            uint128 tokensOwed1\r\n        );\r\n\r\n    /// @notice Returns data about a specific observation index\r\n    /// @param index The element of the observations array to fetch\r\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\r\n    /// ago, rather than at a specific index in the array.\r\n    /// @return blockTimestamp The timestamp of the observation,\r\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\r\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\r\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\r\n    function observations(uint256 index)\r\n        external\r\n        view\r\n        returns (\r\n            uint32 blockTimestamp,\r\n            int56 tickCumulative,\r\n            uint160 secondsPerLiquidityCumulativeX128,\r\n            bool initialized\r\n        );\r\n}\r\n"
    },
    "contracts/interface/uniswapV3/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Pool state that is not stored\r\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\r\n/// blockchain. The functions here may have variable gas costs.\r\ninterface IUniswapV3PoolDerivedState {\r\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\r\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\r\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\r\n    /// you must call it with secondsAgos = [3600, 0].\r\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\r\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\r\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\r\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\r\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\r\n    /// timestamp\r\n    function observe(uint32[] calldata secondsAgos)\r\n        external\r\n        view\r\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\r\n\r\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\r\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\r\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\r\n    /// snapshot is taken and the second snapshot is taken.\r\n    /// @param tickLower The lower tick of the range\r\n    /// @param tickUpper The upper tick of the range\r\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\r\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\r\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\r\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\r\n        external\r\n        view\r\n        returns (\r\n            int56 tickCumulativeInside,\r\n            uint160 secondsPerLiquidityInsideX128,\r\n            uint32 secondsInside\r\n        );\r\n}\r\n"
    },
    "contracts/interface/uniswapV3/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Permissionless pool actions\r\n/// @notice Contains pool methods that can be called by anyone\r\ninterface IUniswapV3PoolActions {\r\n    /// @notice Sets the initial price for the pool\r\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\r\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\r\n    function initialize(uint160 sqrtPriceX96) external;\r\n\r\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\r\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\r\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\r\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\r\n    /// @param recipient The address for which the liquidity will be created\r\n    /// @param tickLower The lower tick of the position in which to add liquidity\r\n    /// @param tickUpper The upper tick of the position in which to add liquidity\r\n    /// @param amount The amount of liquidity to mint\r\n    /// @param data Any data that should be passed through to the callback\r\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\r\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\r\n    function mint(\r\n        address recipient,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 amount,\r\n        bytes calldata data\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    /// @notice Collects tokens owed to a position\r\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\r\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\r\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\r\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\r\n    /// @param recipient The address which should receive the fees collected\r\n    /// @param tickLower The lower tick of the position for which to collect fees\r\n    /// @param tickUpper The upper tick of the position for which to collect fees\r\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\r\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\r\n    /// @return amount0 The amount of fees collected in token0\r\n    /// @return amount1 The amount of fees collected in token1\r\n    function collect(\r\n        address recipient,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 amount0Requested,\r\n        uint128 amount1Requested\r\n    ) external returns (uint128 amount0, uint128 amount1);\r\n\r\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\r\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\r\n    /// @dev Fees must be collected separately via a call to #collect\r\n    /// @param tickLower The lower tick of the position for which to burn liquidity\r\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\r\n    /// @param amount How much liquidity to burn\r\n    /// @return amount0 The amount of token0 sent to the recipient\r\n    /// @return amount1 The amount of token1 sent to the recipient\r\n    function burn(\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 amount\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    /// @notice Swap token0 for token1, or token1 for token0\r\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\r\n    /// @param recipient The address to receive the output of the swap\r\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\r\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\r\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\r\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\r\n    /// @param data Any data to be passed through to the callback\r\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\r\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\r\n    function swap(\r\n        address recipient,\r\n        bool zeroForOne,\r\n        int256 amountSpecified,\r\n        uint160 sqrtPriceLimitX96,\r\n        bytes calldata data\r\n    ) external returns (int256 amount0, int256 amount1);\r\n\r\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\r\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\r\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\r\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\r\n    /// @param recipient The address which will receive the token0 and token1 amounts\r\n    /// @param amount0 The amount of token0 to send\r\n    /// @param amount1 The amount of token1 to send\r\n    /// @param data Any data to be passed through to the callback\r\n    function flash(\r\n        address recipient,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\r\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\r\n    /// the input observationCardinalityNext.\r\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\r\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\r\n}\r\n"
    },
    "contracts/interface/uniswapV3/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Permissioned pool actions\r\n/// @notice Contains pool methods that may only be called by the factory owner\r\ninterface IUniswapV3PoolOwnerActions {\r\n    /// @notice Set the denominator of the protocol's % share of the fees\r\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\r\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\r\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\r\n\r\n    /// @notice Collect the protocol fee accrued to the pool\r\n    /// @param recipient The address to which collected protocol fees should be sent\r\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\r\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\r\n    /// @return amount0 The protocol fee collected in token0\r\n    /// @return amount1 The protocol fee collected in token1\r\n    function collectProtocol(\r\n        address recipient,\r\n        uint128 amount0Requested,\r\n        uint128 amount1Requested\r\n    ) external returns (uint128 amount0, uint128 amount1);\r\n}\r\n"
    },
    "contracts/interface/uniswapV3/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Events emitted by a pool\r\n/// @notice Contains all events emitted by the pool\r\ninterface IUniswapV3PoolEvents {\r\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\r\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\r\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\r\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\r\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\r\n\r\n    /// @notice Emitted when liquidity is minted for a given position\r\n    /// @param sender The address that minted the liquidity\r\n    /// @param owner The owner of the position and recipient of any minted liquidity\r\n    /// @param tickLower The lower tick of the position\r\n    /// @param tickUpper The upper tick of the position\r\n    /// @param amount The amount of liquidity minted to the position range\r\n    /// @param amount0 How much token0 was required for the minted liquidity\r\n    /// @param amount1 How much token1 was required for the minted liquidity\r\n    event Mint(\r\n        address sender,\r\n        address indexed owner,\r\n        int24 indexed tickLower,\r\n        int24 indexed tickUpper,\r\n        uint128 amount,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    );\r\n\r\n    /// @notice Emitted when fees are collected by the owner of a position\r\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\r\n    /// @param owner The owner of the position for which fees are collected\r\n    /// @param tickLower The lower tick of the position\r\n    /// @param tickUpper The upper tick of the position\r\n    /// @param amount0 The amount of token0 fees collected\r\n    /// @param amount1 The amount of token1 fees collected\r\n    event Collect(\r\n        address indexed owner,\r\n        address recipient,\r\n        int24 indexed tickLower,\r\n        int24 indexed tickUpper,\r\n        uint128 amount0,\r\n        uint128 amount1\r\n    );\r\n\r\n    /// @notice Emitted when a position's liquidity is removed\r\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\r\n    /// @param owner The owner of the position for which liquidity is removed\r\n    /// @param tickLower The lower tick of the position\r\n    /// @param tickUpper The upper tick of the position\r\n    /// @param amount The amount of liquidity to remove\r\n    /// @param amount0 The amount of token0 withdrawn\r\n    /// @param amount1 The amount of token1 withdrawn\r\n    event Burn(\r\n        address indexed owner,\r\n        int24 indexed tickLower,\r\n        int24 indexed tickUpper,\r\n        uint128 amount,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    );\r\n\r\n    /// @notice Emitted by the pool for any swaps between token0 and token1\r\n    /// @param sender The address that initiated the swap call, and that received the callback\r\n    /// @param recipient The address that received the output of the swap\r\n    /// @param amount0 The delta of the token0 balance of the pool\r\n    /// @param amount1 The delta of the token1 balance of the pool\r\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\r\n    /// @param liquidity The liquidity of the pool after the swap\r\n    /// @param tick The log base 1.0001 of price of the pool after the swap\r\n    event Swap(\r\n        address indexed sender,\r\n        address indexed recipient,\r\n        int256 amount0,\r\n        int256 amount1,\r\n        uint160 sqrtPriceX96,\r\n        uint128 liquidity,\r\n        int24 tick\r\n    );\r\n\r\n    /// @notice Emitted by the pool for any flashes of token0/token1\r\n    /// @param sender The address that initiated the swap call, and that received the callback\r\n    /// @param recipient The address that received the tokens from flash\r\n    /// @param amount0 The amount of token0 that was flashed\r\n    /// @param amount1 The amount of token1 that was flashed\r\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\r\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\r\n    event Flash(\r\n        address indexed sender,\r\n        address indexed recipient,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        uint256 paid0,\r\n        uint256 paid1\r\n    );\r\n\r\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\r\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\r\n    /// just before a mint/swap/burn.\r\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\r\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\r\n    event IncreaseObservationCardinalityNext(\r\n        uint16 observationCardinalityNextOld,\r\n        uint16 observationCardinalityNextNew\r\n    );\r\n\r\n    /// @notice Emitted when the protocol fee is changed by the pool\r\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\r\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\r\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\r\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\r\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\r\n\r\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\r\n    /// @param sender The address that collects the protocol fees\r\n    /// @param recipient The address that receives the collected protocol fees\r\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\r\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\r\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\r\n}\r\n"
    },
    "contracts/OneInchSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\";\r\nimport \"./interface/mooniswap/IMooniFactory.sol\";\r\nimport \"./interface/mooniswap/IMooniswap.sol\";\r\nimport \"./SwapBase.sol\";\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract OneInchSwap is SwapBase {\r\n\r\n  IMooniFactory oneInchFactory;\r\n\r\n  address public baseCurrency = address(0);\r\n\r\n  constructor(address _factoryAddress, address _baseCurrency) SwapBase(_factoryAddress) public {\r\n    baseCurrency = _baseCurrency;\r\n  }\r\n\r\n  function initializeFactory() internal virtual override {\r\n    oneInchFactory =  IMooniFactory(factoryAddress);\r\n  }\r\n\r\n  /// @dev Check what token is pool of this Swap\r\n  function isPool(address token) public virtual override view returns(bool){\r\n    return oneInchFactory.isPool(token);\r\n  }\r\n\r\n  /// @dev Get underlying tokens and amounts\r\n  function getUnderlying(address token) public virtual override view returns (address[] memory, uint256[] memory){\r\n    IMooniswap pair = IMooniswap(token);\r\n    address[] memory tokens  = new address[](2);\r\n    uint256[] memory amounts = new uint256[](2);\r\n    tokens[0] = pair.token0();\r\n    tokens[1] = pair.token1();\r\n    uint256 token0Decimals = (tokens[0]==address(0))? 18:ERC20(tokens[0]).decimals();\r\n    uint256 token1Decimals = ERC20(tokens[1]).decimals();\r\n    uint256 supplyDecimals = ERC20(token).decimals();\r\n    uint256 reserve0 = pair.getBalanceForRemoval(tokens[0]);\r\n    uint256 reserve1 = pair.getBalanceForRemoval(tokens[1]);\r\n    uint256 totalSupply = pair.totalSupply();\r\n    if (reserve0 == 0 || reserve1 == 0 || totalSupply == 0) {\r\n      amounts[0] = 0;\r\n      amounts[1] = 0;\r\n      return (tokens, amounts);\r\n    }\r\n    amounts[0] = reserve0*10**(supplyDecimals-token0Decimals+PRECISION_DECIMALS)/totalSupply;\r\n    amounts[1] = reserve1*10**(supplyDecimals-token1Decimals+PRECISION_DECIMALS)/totalSupply;\r\n\r\n    //MAINNET:\r\n    //1INCH uses ETH, instead of WETH in pools. For further calculations we continue with WETH instead.\r\n    //ETH will always be the first in the pair, so no need to check tokens[1]\r\n    //BSC:\r\n    //1INCH uses BNB, instead of WBNB in pools. For further calculations we continue with WBNB instead.\r\n    //BNB will always be the first in the pair, so no need to check tokens[1]\r\n    if (tokens[0] == address(0)) {\r\n      tokens[0] = baseCurrency;\r\n    }\r\n    return (tokens, amounts);\r\n  }\r\n\r\n  /// @dev Gives a pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\r\n  function getLargestPool(address token, address[] memory tokenList) public virtual override view returns (address, address, uint256) {\r\n    uint256 largestPoolSize = 0;\r\n    address largestKeyToken;\r\n    address largestPoolAddress;\r\n    address pairAddress;\r\n    uint256 poolSize;\r\n    uint256 i;\r\n    for (i = 0; i < tokenList.length; i++) {\r\n      pairAddress = oneInchFactory.pools(token, tokenList[i]);\r\n      if (pairAddress != address(0)) {\r\n        poolSize = get1InchPoolSize(pairAddress, token);\r\n      } else {\r\n        poolSize = 0;\r\n      }\r\n      if (poolSize > largestPoolSize) {\r\n        largestPoolSize = poolSize;\r\n        largestKeyToken = tokenList[i];\r\n        largestPoolAddress = pairAddress;\r\n      }\r\n    }\r\n    return (largestKeyToken, largestPoolAddress, largestPoolSize);\r\n  }\r\n\r\n  function get1InchPoolSize(address pairAddress, address token) internal view returns (uint256) {\r\n    IMooniswap pair = IMooniswap(pairAddress);\r\n    address token0 = pair.token0();\r\n    address token1 = pair.token1();\r\n    uint256 poolSize0;\r\n    uint256 poolSize1;\r\n\r\n    try pair.getBalanceForRemoval(token0) returns (uint256 poolSize) {\r\n      poolSize0 = poolSize;\r\n    } catch {\r\n      poolSize0 = 0;\r\n    }\r\n\r\n    try pair.getBalanceForRemoval(token1) returns (uint256 poolSize) {\r\n      poolSize1 = poolSize;\r\n    } catch {\r\n      poolSize1 = 0;\r\n    }\r\n\r\n    if (token0 == address(0)) {\r\n      token0 = baseCurrency;\r\n    }\r\n    uint256 poolSize = (token == token0) ? poolSize0 : poolSize1;\r\n    return poolSize;\r\n  }\r\n\r\n\r\n  /// @dev Generic function giving the price of a given token vs another given token\r\n  function getPriceVsToken(address token0, address token1, address /*poolAddress*/) public virtual override view returns (uint256) {\r\n    address pairAddress = oneInchFactory.pools(token0, token1);\r\n    IMooniswap pair = IMooniswap(pairAddress);\r\n    uint256 reserve0 = pair.getBalanceForRemoval(token0);\r\n    uint256 reserve1 = pair.getBalanceForRemoval(token1);\r\n    uint256 token0Decimals = IBEP20(token0).decimals(); // was IBEP20\r\n    uint256 token1Decimals = IBEP20(token1).decimals(); // was IBEP20\r\n    uint256 price = (reserve1 * 10 ** (token0Decimals - token1Decimals + PRECISION_DECIMALS)) / reserve0;\r\n    return price;\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/UniSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"./interface/uniswap/IUniswapV2Factory.sol\";\r\nimport \"./interface/uniswap/IUniswapV2Pair.sol\";\r\nimport \"./SwapBase.sol\";\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract UniSwap is SwapBase {\r\n\r\n  IUniswapV2Factory uniswapFactory;\r\n\r\n  constructor(address _factoryAddress) SwapBase(_factoryAddress) public {\r\n\r\n  }\r\n\r\n  function initializeFactory() internal virtual override {\r\n    uniswapFactory = IUniswapV2Factory(factoryAddress);\r\n  }\r\n\r\n  function checkFactory(IUniswapV2Pair pair, address compareFactory) internal view returns (bool) {\r\n    bool check;\r\n    try pair.factory{gas: 3000}() returns (address factory) {\r\n      check = (factory == compareFactory);\r\n    } catch {\r\n      check = false;\r\n    }\r\n    return check;\r\n  }\r\n\r\n  /// @dev Check what token is pool of this Swap\r\n  function isPool(address token) public virtual override view returns(bool){\r\n    IUniswapV2Pair pair = IUniswapV2Pair(token);\r\n    return checkFactory(pair, factoryAddress);\r\n  }\r\n\r\n  /// @dev Get underlying tokens and amounts\r\n  function getUnderlying(address token) public virtual override view returns (address[] memory, uint256[] memory){\r\n    IUniswapV2Pair pair = IUniswapV2Pair(token);\r\n    address[] memory tokens  = new address[](2);\r\n    uint256[] memory amounts = new uint256[](2);\r\n    tokens[0] = pair.token0();\r\n    tokens[1] = pair.token1();\r\n    uint256 token0Decimals = ERC20(tokens[0]).decimals();\r\n    uint256 token1Decimals = ERC20(tokens[1]).decimals();\r\n    uint256 supplyDecimals = ERC20(token).decimals();\r\n    (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\r\n    uint256 totalSupply = pair.totalSupply();\r\n    if (reserve0 == 0 || reserve1 == 0 || totalSupply == 0) {\r\n      amounts[0] = 0;\r\n      amounts[1] = 0;\r\n      return (tokens, amounts);\r\n    }\r\n    amounts[0] = reserve0*10**(supplyDecimals-token0Decimals+PRECISION_DECIMALS)/totalSupply;\r\n    amounts[1] = reserve1*10**(supplyDecimals-token1Decimals+PRECISION_DECIMALS)/totalSupply;\r\n    return (tokens, amounts);\r\n  }\r\n\r\n  /// @dev Returns pool size\r\n  function getPoolSize(address pairAddress, address token) internal view returns(uint256){\r\n    IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n    address token0 = pair.token0();\r\n    (uint112 poolSize0, uint112 poolSize1,) = pair.getReserves();\r\n    uint256 poolSize = (token==token0)? poolSize0:poolSize1;\r\n    return poolSize;\r\n  }\r\n\r\n  /// @dev Gives a pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\r\n  function getLargestPool(address token, address[] memory tokenList) public virtual override view returns (address, address, uint256){\r\n    uint256 largestPoolSize = 0;\r\n    address largestKeyToken;\r\n    address largestPool;\r\n    uint256 poolSize;\r\n    uint256 i;\r\n    for (i=0;i<tokenList.length;i++) {\r\n      address poolAddress = uniswapFactory.getPair(token,tokenList[i]);\r\n      poolSize = poolAddress !=address(0) ? getPoolSize(poolAddress, token) : 0;\r\n      if (poolSize > largestPoolSize) {\r\n        largestKeyToken = tokenList[i];\r\n        largestPool = poolAddress;\r\n        largestPoolSize = poolSize;\r\n      }\r\n    }\r\n    return (largestKeyToken, largestPool, largestPoolSize);\r\n  }\r\n\r\n  /// @dev Generic function giving the price of a given token vs another given token\r\n  function getPriceVsToken(address token0, address token1, address /*poolAddress*/) public virtual override view returns (uint256){\r\n    address pairAddress = uniswapFactory.getPair(token0,token1);\r\n    IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n    (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\r\n    uint256 token0Decimals = ERC20(token0).decimals();\r\n    uint256 token1Decimals = ERC20(token1).decimals();\r\n    uint256 price;\r\n    if (token0 == pair.token0()) {\r\n      price = (reserve1*10**(token0Decimals-token1Decimals+PRECISION_DECIMALS))/reserve0;\r\n    } else {\r\n      price = (reserve0*10**(token0Decimals-token1Decimals+PRECISION_DECIMALS))/reserve1;\r\n    }\r\n    return price;\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/WaultSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\nimport \"./UniSwap.sol\";\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract WaultSwap is UniSwap {\r\n    constructor(address _factoryAddress) UniSwap(_factoryAddress) public {\r\n    }\r\n}\r\n"
    },
    "contracts/SushiSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\nimport \"./UniSwap.sol\";\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract SushiSwap is UniSwap {\r\n    constructor(address _factoryAddress) UniSwap(_factoryAddress) public {\r\n    }\r\n}\r\n"
    },
    "contracts/QuickSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\nimport \"./UniSwap.sol\";\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract QuickSwap is UniSwap {\r\n    constructor(address _factoryAddress) UniSwap(_factoryAddress) public {\r\n    }\r\n}\r\n"
    },
    "contracts/OracleBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/proxy/Initializable.sol\";\r\n\r\nimport \"./Governable.sol\";\r\nimport \"./SwapBase.sol\";\r\n\r\nimport \"./UniSwap.sol\";\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract OracleBase is Governable, Initializable  {\r\n\r\n  using SafeERC20 for IERC20;\r\n  using Address for address;\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public constant PRECISION_DECIMALS = 18;\r\n  uint256 public constant ONE = 10**PRECISION_DECIMALS;\r\n\r\n  //The defined output token is the unit in which prices of input tokens are given.\r\n  bytes32 internal constant _DEFINED_OUTPUT_TOKEN_SLOT = bytes32(uint256(keccak256(\"eip1967.OracleBase.definedOutputToken\")) - 1);\r\n\r\n  //Key tokens are used to find liquidity for any given token on Uni, Sushi and Curve.\r\n  address[] public keyTokens;\r\n\r\n  //Pricing tokens are Key tokens with good liquidity with the defined output token on Uniswap.\r\n  address[] public pricingTokens;\r\n\r\n  mapping(address => address) replacementTokens;\r\n\r\n  //Swap platforms addresses\r\n  address[] public swaps;\r\n\r\n  modifier validKeyToken(address keyToken){\r\n      require(checkKeyToken(keyToken), \"Not a Key Token\");\r\n      _;\r\n  }\r\n  modifier validPricingToken(address pricingToken){\r\n      require(checkPricingToken(pricingToken), \"Not a Pricing Token\");\r\n      _;\r\n  }\r\n  modifier validSwap(address swap){\r\n      require(checkSwap(swap), \"Not a Swap\");\r\n      _;\r\n  }\r\n\r\n  event RegistryChanged(address newRegistry, address oldRegistry);\r\n  event KeyTokenAdded(address newKeyToken);\r\n  event PricingTokenAdded(address newPricingToken);\r\n  event SwapAdded(address newSwap);\r\n  event KeyTokenRemoved(address keyToken);\r\n  event PricingTokenRemoved(address pricingToken);\r\n  event SwapRemoved(address newSwap);\r\n  event DefinedOutputChanged(address newOutputToken, address oldOutputToken);\r\n\r\n  // This contract is deployed with proxy, but also can be deployed without proxy\r\n  // When it deployed witout proxy - then constructor only is used, so you have to add tokens later\r\n  // Adding tokens in constructor removed due gas optimisation for deploy to mainnet\r\n  // When with proxy - then initialze() called by deploy script (../deploy/01_Oracle.js)\r\n  constructor(address[] memory _keyTokens, address[] memory _pricingTokens, address _outputToken)\r\n  public Governable(msg.sender) {\r\n    Governable.setGovernance(msg.sender);\r\n  }\r\n\r\n  function initialize(address[] memory _keyTokens, address[] memory _pricingTokens, address _outputToken)\r\n  public onlyGovernance initializer {\r\n    Governable.setGovernance(msg.sender);\r\n\r\n    addKeyTokens(_keyTokens);\r\n    addPricingTokens(_pricingTokens);\r\n    changeDefinedOutput(_outputToken);\r\n    // after contract deploy you have to set swaps\r\n  }\r\n\r\n  function addSwap(address newSwap) public onlyGovernance {\r\n    require(!checkSwap(newSwap), \"Already a swap\");\r\n    swaps.push(newSwap);\r\n    emit SwapAdded(newSwap);\r\n  }\r\n\r\n  function addSwaps(address[] memory newSwaps) public onlyGovernance {\r\n    for(uint i=0; i<newSwaps.length; i++) {\r\n      if (!checkSwap(newSwaps[i])) addSwap(newSwaps[i]);\r\n    }\r\n  }\r\n  function setSwaps(address[] memory newSwaps) external onlyGovernance {\r\n    delete swaps;\r\n    addSwaps(newSwaps);\r\n  }\r\n\r\n  function addKeyToken(address newToken) public onlyGovernance {\r\n    require(!checkKeyToken(newToken), \"Already a key token\");\r\n    keyTokens.push(newToken);\r\n    emit KeyTokenAdded(newToken);\r\n  }\r\n\r\n  function addKeyTokens(address[] memory newTokens) public onlyGovernance {\r\n    for(uint i=0; i<newTokens.length; i++) {\r\n      if (!checkKeyToken(newTokens[i])) addKeyToken(newTokens[i]);\r\n    }\r\n  }\r\n\r\n  function addPricingToken(address newToken) public onlyGovernance validKeyToken(newToken) {\r\n    require(!checkPricingToken(newToken), \"Already a pricing token\");\r\n    pricingTokens.push(newToken);\r\n    emit PricingTokenAdded(newToken);\r\n  }\r\n\r\n  function addPricingTokens(address[] memory newTokens) public onlyGovernance {\r\n    for(uint i=0; i<newTokens.length; i++) {\r\n      if (!checkPricingToken(newTokens[i])) addPricingToken(newTokens[i]);\r\n    }\r\n  }\r\n\r\n  function removeAddressFromArray(address adr, address[] storage array) internal {\r\n    uint i;\r\n    for (i=0; i<array.length; i++) {\r\n      if (adr == array[i]) break;\r\n    }\r\n\r\n    while (i<array.length-1) {\r\n      array[i] = array[i+1];\r\n      i++;\r\n    }\r\n    array.pop();\r\n  }\r\n\r\n  function removeKeyToken(address keyToken) external onlyGovernance validKeyToken(keyToken) {\r\n    removeAddressFromArray(keyToken, keyTokens);\r\n    emit KeyTokenRemoved(keyToken);\r\n\r\n    if (checkPricingToken(keyToken)) {\r\n      removePricingToken(keyToken);\r\n    }\r\n  }\r\n\r\n  function removePricingToken(address pricingToken) public onlyGovernance validPricingToken(pricingToken) {\r\n    removeAddressFromArray(pricingToken, pricingTokens );\r\n    emit PricingTokenRemoved(pricingToken);\r\n  }\r\n\r\n  function removeSwap(address swap) public onlyGovernance validSwap(swap) {\r\n    removeAddressFromArray(swap, swaps);\r\n    emit SwapRemoved(swap);\r\n  }\r\n\r\n  function definedOutputToken() public view returns (address value) {\r\n    bytes32 slot = _DEFINED_OUTPUT_TOKEN_SLOT;\r\n    assembly {\r\n      value := sload(slot)\r\n    }\r\n  }\r\n\r\n  function changeDefinedOutput(address newOutputToken) public onlyGovernance validKeyToken(newOutputToken) {\r\n    require(newOutputToken != address(0), \"zero address\");\r\n    address oldOutputToken = definedOutputToken();\r\n    bytes32 slot = _DEFINED_OUTPUT_TOKEN_SLOT;\r\n    assembly {\r\n      sstore(slot, newOutputToken)\r\n    }\r\n    emit DefinedOutputChanged(newOutputToken, oldOutputToken);\r\n  }\r\n\r\n  function modifyReplacementTokens(address _inputToken, address _replacementToken) external onlyGovernance {\r\n    replacementTokens[_inputToken] = _replacementToken;\r\n  }\r\n\r\n  //Main function of the contract. Gives the price of a given token in the defined output token.\r\n  //The contract allows for input tokens to be LP tokens from Uniswap, Sushiswap, Curve and 1Inch.\r\n  //In case of LP token, the underlying tokens will be found and valued to get the price.\r\n  function getPrice(address token) external view returns (uint256) {\r\n    if (token == definedOutputToken())\r\n      return (ONE);\r\n\r\n    // if the token exists in the mapping, we'll swap it for the replacement\r\n    // example btcb/renbtc pool -> btcb\r\n    if (replacementTokens[token] != address(0)) {\r\n      token = replacementTokens[token];\r\n    }\r\n\r\n    uint256 tokenPrice;\r\n    uint256 tokenValue;\r\n    uint256 price = 0;\r\n    uint256 i;\r\n    address swap = getSwapForPool(token);\r\n    if (swap!=address(0)) {\r\n      (address[] memory tokens, uint256[] memory amounts) = SwapBase(swap).getUnderlying(token);\r\n      for (i=0;i<tokens.length;i++) {\r\n        if (tokens[i] == address(0)) break;\r\n        tokenPrice = computePrice(tokens[i]);\r\n        if (tokenPrice == 0) return 0;\r\n        tokenValue = tokenPrice *amounts[i]/ONE;\r\n        price += tokenValue;\r\n      }\r\n      return price;\r\n    } else {\r\n      return computePrice(token);\r\n    }\r\n  }\r\n\r\n  function getSwapForPool(address token) public view returns(address) {\r\n    for (uint i=0; i<swaps.length; i++ ) {\r\n      if (SwapBase(swaps[i]).isPool(token)) {\r\n        return swaps[i];\r\n      }\r\n    }\r\n    return address(0);\r\n  }\r\n\r\n  //General function to compute the price of a token vs the defined output token.\r\n  function computePrice(address token) public view returns (uint256) {\r\n    uint256 price;\r\n    if (token == definedOutputToken()) {\r\n      price = ONE;\r\n    } else if (token == address(0)) {\r\n      price = 0;\r\n    } else {\r\n      (address swap, address keyToken, address pool) = getLargestPool(token,keyTokens);\r\n      uint256 priceVsKeyToken;\r\n      uint256 keyTokenPrice;\r\n      if (keyToken == address(0)) {\r\n        price = 0;\r\n      } else {\r\n        priceVsKeyToken = SwapBase(swap).getPriceVsToken(token,keyToken,pool);\r\n        keyTokenPrice = getKeyTokenPrice(keyToken);\r\n        price = priceVsKeyToken*keyTokenPrice/ONE;\r\n      }\r\n    }\r\n    return (price);\r\n  }\r\n\r\n  //Checks the results of the different largest pool functions and returns the largest.\r\n  function getLargestPool(address token) public view returns (address, address, address) {\r\n    return getLargestPool(token, keyTokens);\r\n  }\r\n\r\n  function getLargestPool(address token, address[] memory keyTokenList) public view returns (address, address, address) {\r\n    address largestKeyToken = address(0);\r\n    address largestPool = address(0);\r\n    uint largestPoolSize = 0;\r\n    SwapBase largestSwap;\r\n    for (uint i=0;i<swaps.length;i++) {\r\n      SwapBase swap = SwapBase(swaps[i]);\r\n      (address swapLargestKeyToken, address swapLargestPool, uint swapLargestPoolSize) = swap.getLargestPool(token, keyTokenList);\r\n      if (swapLargestPoolSize>largestPoolSize) {\r\n        largestSwap = swap;\r\n        largestKeyToken = swapLargestKeyToken;\r\n        largestPool = swapLargestPool;\r\n        largestPoolSize = swapLargestPoolSize;\r\n      }\r\n    }\r\n    return (address(largestSwap), largestKeyToken, largestPool);\r\n  }\r\n\r\n  //Gives the price of a given keyToken.\r\n  function getKeyTokenPrice(address token) internal view returns (uint256) {\r\n    bool isPricingToken = checkPricingToken(token);\r\n    uint256 price;\r\n    uint256 priceVsPricingToken;\r\n    if (token == definedOutputToken()) {\r\n      price = ONE;\r\n    } else if (isPricingToken) {\r\n      price = SwapBase(swaps[0]).getPriceVsToken(token, definedOutputToken(), address(0)); // first swap is used\r\n      // as at original contract was used\r\n      // mainnet: UniSwap OracleMainnet_old.sol:641\r\n      // bsc: Pancake OracleBSC_old.sol:449\r\n    } else {\r\n      uint256 pricingTokenPrice;\r\n      (address swap, address pricingToken, address pricingPool) = getLargestPool(token,pricingTokens);\r\n      priceVsPricingToken = SwapBase(swap).getPriceVsToken(token, pricingToken, pricingPool);\r\n//      pricingTokenPrice = (pricingToken == definedOutputToken())? ONE : SwapBase(swap).getPriceVsToken(pricingToken,definedOutputToken(),pricingPool);\r\n      // Like in original contract we use UniSwap - it must be first swap at the list (swaps[0])\r\n      // See OracleMainnet_old.js:634, OracleBSC_old.sol:458\r\n      //TODO improve this part?\r\n      pricingTokenPrice = (pricingToken == definedOutputToken())? ONE : SwapBase(swaps[0]).getPriceVsToken(pricingToken,definedOutputToken(),pricingPool);\r\n      price = priceVsPricingToken*pricingTokenPrice/ONE;\r\n    }\r\n    return price;\r\n  }\r\n\r\n  //Checks if a given token is in the keyTokens list.\r\n  function addressInArray(address adr, address[] storage array) internal view returns (bool) {\r\n    for (uint i=0; i<array.length; i++)\r\n      if (adr == array[i]) return true;\r\n\r\n    return false;\r\n  }\r\n\r\n  //Checks if a given token is in the pricingTokens list.\r\n  function checkPricingToken(address token) public view returns (bool) {\r\n    return addressInArray(token, pricingTokens);\r\n  }\r\n\r\n  //Checks if a given token is in the keyTokens list.\r\n  function checkKeyToken(address token) public view returns (bool) {\r\n    return addressInArray(token, keyTokens);\r\n  }\r\n\r\n  //Checks if a given token is in the swaps list.\r\n  function checkSwap(address swap) public view returns (bool) {\r\n    return addressInArray(swap, swaps);\r\n  }\r\n}\r\n"
    },
    "contracts/BookkeeperRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"./interface/IStrategy.sol\";\r\nimport \"./interface/IVault.sol\";\r\nimport \"./Governable.sol\";\r\nimport \"./interface/IRewardPool.sol\";\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract BookkeeperRegistry is Governable {\r\n\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    // Keeping track of links between all added contracts.\r\n    mapping (address => bool) public isActive;\r\n    mapping (address => uint256) public addedOnBlock;\r\n    mapping (address => string) public contractType;\r\n    mapping (address => address) public vaultStrategy;\r\n    mapping (address => address[]) public vaultStrategies;\r\n    mapping (address => address) public strategyVault;\r\n    mapping (address => address) public vaultRewardPool;\r\n    mapping (address => address) public rewardPoolVault;\r\n    mapping (address => address) public vaultUnderlying;\r\n    mapping (address => address[]) public underlyingVaults;\r\n    mapping (address => bool) public vaultMultipleStrategies;\r\n    address[] underlyingVaultsTemp;\r\n    address[] vaultStrategiesTemp;\r\n    address[] vaultList;\r\n    address[] strategyList;\r\n    address[] rewardPoolList;\r\n\r\n    modifier validVault(address _vault){\r\n        require(keccak256(abi.encodePacked(contractType[_vault])) ==\r\n        keccak256(abi.encodePacked(\"vault\")), \"vault does not exist\");\r\n        require(isActive[_vault], \"contract is not active\");\r\n        _;\r\n    }\r\n    modifier isVault(address _vault){\r\n      require(keccak256(abi.encodePacked(contractType[_vault])) ==\r\n      keccak256(abi.encodePacked(\"vault\")), \"vault does not exist\");\r\n      _;\r\n    }\r\n    modifier validStrategy(address _strategy){\r\n        require(keccak256(abi.encodePacked(contractType[_strategy])) ==\r\n        keccak256(abi.encodePacked(\"strategy\")), \"strategy does not exist\");\r\n        require(isActive[_strategy], \"contract is not active\");\r\n        _;\r\n    }\r\n    modifier validRewardPool(address _rewardPool){\r\n        require(keccak256(abi.encodePacked(contractType[_rewardPool])) ==\r\n        keccak256(abi.encodePacked(\"rewardPool\")), \"reward pool does not exist\");\r\n        require(isActive[_rewardPool], \"contract is not active\");\r\n        _;\r\n    }\r\n    modifier validUnderlying(address _underlying){\r\n        require(keccak256(abi.encodePacked(contractType[_underlying])) ==\r\n        keccak256(abi.encodePacked(\"underlying\")), \"underlying does not exist\");\r\n        require(isActive[_underlying], \"contract is not active\");\r\n        _;\r\n    }\r\n    modifier singleStrategy(address _vault){\r\n      require(!vaultMultipleStrategies[_vault], \"Method does not allow multiple strategy vault\");\r\n      _;\r\n    }\r\n    modifier multipleStrategies(address _vault){\r\n      require(vaultMultipleStrategies[_vault], \"Method only allows multiple strategy vault\");\r\n      _;\r\n    }\r\n\r\n    event VaultAdded(address vault, address strategy, address rewardPool, address underlying);\r\n    event RewardPoolChanged(address vault, address newRewardPool, address oldRewardPool);\r\n    event StrategyChanged(address vault, address newStrategy, address oldStrategy);\r\n    event VaultRemoved(address vault, address strategy, address rewardPool);\r\n    event StrategyRemoved(address strategy, address vault);\r\n    event RewardPoolRemoved(address rewardPool, address vault);\r\n\r\n    constructor()\r\n    Governable(msg.sender) public {}\r\n\r\n    //Add a vault. RewardPool can be address(0).\r\n    function addVault(address _vault, address _rewardPool, bool _multipleStrategies) external onlyGovernance {\r\n        require(_vault != address(0), \"new vault should not be empty\");\r\n        require(keccak256(abi.encodePacked(contractType[_vault])) != keccak256(abi.encodePacked(\"vault\")), \"vault already exists\");\r\n\r\n        address vault = _vault;\r\n        address strategy = IVault(_vault).strategy();\r\n        address rewardPool = _rewardPool;\r\n        address underlying = IVault(_vault).underlying();\r\n\r\n        isActive[vault] = true;\r\n        addedOnBlock[vault] = block.number;\r\n        contractType[vault] = \"vault\";\r\n        vaultUnderlying[vault] = underlying;\r\n        vaultMultipleStrategies[vault] = _multipleStrategies;\r\n\r\n        if (vaultMultipleStrategies[vault]) {\r\n          vaultStrategies[vault].push(strategy);\r\n        } else {\r\n          vaultStrategy[vault] = strategy;\r\n        }\r\n\r\n        isActive[strategy] = true;\r\n        addedOnBlock[strategy] = block.number;\r\n        contractType[strategy] = \"strategy\";\r\n        strategyVault[strategy] = vault;\r\n\r\n        if (rewardPool != address(0)){\r\n          vaultRewardPool[vault] = rewardPool;\r\n          isActive[rewardPool] = true;\r\n          addedOnBlock[rewardPool] = block.number;\r\n          contractType[rewardPool] = \"rewardPool\";\r\n          rewardPoolVault[rewardPool] = vault;\r\n        }\r\n\r\n        isActive[underlying] = true;\r\n        addedOnBlock[underlying] = block.number;\r\n        contractType[underlying] = \"underlying\";\r\n        underlyingVaults[underlying].push(vault);\r\n\r\n        vaultList.push(vault);\r\n        strategyList.push(strategy);\r\n        rewardPoolList.push(rewardPool);\r\n\r\n        emit VaultAdded(vault, strategy, rewardPool, underlying);\r\n    }\r\n\r\n    //Change Reward Pool for existing vault.\r\n    function changeRewardPool(address _rewardPool) external onlyGovernance isVault(IRewardPool(_rewardPool).lpToken()) {\r\n      require(_rewardPool != address(0), \"new reward pool should not be empty\");\r\n\r\n      address rewardPool = _rewardPool;\r\n      address vault = IRewardPool(rewardPool).lpToken();\r\n\r\n      isActive[vault] = true;\r\n      address oldRewardPool = vaultRewardPool[vault];\r\n      isActive[oldRewardPool] = false;\r\n      vaultRewardPool[vault] = rewardPool;\r\n\r\n      isActive[rewardPool] = true;\r\n      addedOnBlock[rewardPool] = block.number;\r\n      contractType[rewardPool] = \"rewardPool\";\r\n      rewardPoolVault[rewardPool] = vault;\r\n\r\n      rewardPoolList.push(rewardPool);\r\n\r\n      uint256 i;\r\n      for ( i=0;i<rewardPoolList.length;i++) {\r\n        if (oldRewardPool == rewardPoolList[i]){\r\n          break;\r\n        }\r\n      }\r\n      while (i<rewardPoolList.length-1) {\r\n        rewardPoolList[i] = rewardPoolList[i+1];\r\n        i++;\r\n      }\r\n      /* rewardPoolList.length--; */\r\n\r\n\r\n      emit RewardPoolChanged(vault, rewardPool, oldRewardPool);\r\n    }\r\n\r\n    //Change strategy for existing vault.\r\n    function changeStrategy(address _strategy) external onlyGovernance isVault(IStrategy(_strategy).vault()) {\r\n      require(_strategy != address(0), \"new strategy should not be empty\");\r\n\r\n      address strategy = _strategy;\r\n      address vault = IStrategy(strategy).vault();\r\n      strategyList.push(strategy);\r\n\r\n      isActive[vault] = true;\r\n      address oldStrategy;\r\n      if (vaultMultipleStrategies[vault]){\r\n        oldStrategy = address(0);\r\n        vaultStrategies[vault].push(strategy);\r\n      }\r\n      else{\r\n        oldStrategy = vaultStrategy[vault];\r\n        isActive[oldStrategy] = false;\r\n        vaultStrategy[vault] = strategy;\r\n\r\n        uint256 i;\r\n        for ( i=0;i<strategyList.length;i++) {\r\n          if (oldStrategy == strategyList[i]){\r\n            break;\r\n          }\r\n        }\r\n        while (i<strategyList.length-1) {\r\n          strategyList[i] = strategyList[i+1];\r\n          i++;\r\n        }\r\n        /* strategyList.length--; */\r\n      }\r\n\r\n      isActive[strategy] = true;\r\n      addedOnBlock[strategy] = block.number;\r\n      contractType[strategy] = \"strategy\";\r\n      strategyVault[strategy] = vault;\r\n\r\n      emit StrategyChanged(vault, strategy, oldStrategy);\r\n    }\r\n\r\n    function getVaultInfoSingleStrategy(address _vault) internal view validVault(_vault) singleStrategy(_vault) returns(\r\n      uint256, address[] memory, uint256[] memory, address, uint256, address) {\r\n\r\n      address vault = _vault;\r\n      uint256 vaultAdded = addedOnBlock[vault];\r\n      address[] memory strategy = new address[](1);\r\n      uint256[] memory strategyAdded = new uint256[](1);\r\n      strategy[0] = vaultStrategy[vault];\r\n      strategyAdded[0] = addedOnBlock[strategy[0]];\r\n      address rewardPool = vaultRewardPool[vault];\r\n      uint256 rewardPoolAdded = addedOnBlock[rewardPool];\r\n      address underlying = vaultUnderlying[vault];\r\n\r\n      return (vaultAdded, strategy, strategyAdded, rewardPool, rewardPoolAdded, underlying);\r\n    }\r\n\r\n    function getVaultInfoMultipleStrategies(address _vault) internal view validVault(_vault) multipleStrategies(_vault) returns(\r\n      uint256, address[] memory, uint256[] memory, address, uint256, address) {\r\n\r\n      address vault = _vault;\r\n      uint256 vaultAdded = addedOnBlock[vault];\r\n      address[] memory strategies = vaultStrategies[vault];\r\n      uint256[] memory strategiesAdded = new uint256[](strategies.length);\r\n      for (uint256 i=0;i<strategies.length;i++) {\r\n        strategiesAdded[i] = addedOnBlock[strategies[i]];\r\n      }\r\n      address rewardPool = vaultRewardPool[vault];\r\n      uint256 rewardPoolAdded = addedOnBlock[rewardPool];\r\n      address underlying = vaultUnderlying[vault];\r\n\r\n      return (vaultAdded, strategies, strategiesAdded, rewardPool, rewardPoolAdded, underlying);\r\n    }\r\n\r\n    function getVaultInfo(address _vault) external view validVault(_vault) returns(\r\n      uint256, address[] memory, uint256[] memory, address, uint256, address) {\r\n\r\n      if (vaultMultipleStrategies[_vault]) {\r\n        return getVaultInfoMultipleStrategies(_vault);\r\n      } else {\r\n        return getVaultInfoSingleStrategy(_vault);\r\n      }\r\n    }\r\n\r\n    function getStrategyInfo(address _strategy) external view validStrategy(_strategy) returns(\r\n      uint256, address, uint256, address, uint256, address) {\r\n\r\n      address strategy = _strategy;\r\n      uint256 strategyAdded = addedOnBlock[strategy];\r\n      address vault = strategyVault[strategy];\r\n      uint256 vaultAdded = addedOnBlock[vault];\r\n      address rewardPool = vaultRewardPool[vault];\r\n      uint256 rewardPoolAdded = addedOnBlock[rewardPool];\r\n      address underlying = vaultUnderlying[vault];\r\n\r\n      return (strategyAdded, vault, vaultAdded, rewardPool, rewardPoolAdded, underlying);\r\n    }\r\n\r\n    function getRewardPoolInfoSingleStrategy(address _vault) internal view validVault(_vault) singleStrategy(_vault) returns(\r\n      uint256, address, uint256, address[] memory, uint256[] memory, address) {\r\n\r\n      address vault = _vault;\r\n      uint256 vaultAdded = addedOnBlock[vault];\r\n      address[] memory strategy = new address[](1);\r\n      uint256[] memory strategyAdded = new uint256[](1);\r\n      strategy[0] = vaultStrategy[vault];\r\n      strategyAdded[0] = addedOnBlock[strategy[0]];\r\n      address rewardPool = vaultRewardPool[vault];\r\n      uint256 rewardPoolAdded = addedOnBlock[rewardPool];\r\n      address underlying = vaultUnderlying[vault];\r\n\r\n      return (rewardPoolAdded, vault, vaultAdded, strategy, strategyAdded, underlying);\r\n    }\r\n\r\n    function getRewardPoolInfoMultipleStrategies(address _vault) internal view validVault(_vault) multipleStrategies(_vault) returns(\r\n      uint256, address, uint256, address[] memory, uint256[] memory, address) {\r\n\r\n      address vault = _vault;\r\n      uint256 vaultAdded = addedOnBlock[vault];\r\n      address[] memory strategies = vaultStrategies[vault];\r\n      uint256[] memory strategiesAdded = new uint256[](strategies.length);\r\n      for (uint256 i=0;i<strategies.length;i++) {\r\n        strategiesAdded[i] = addedOnBlock[strategies[i]];\r\n      }\r\n      address rewardPool = vaultRewardPool[vault];\r\n      uint256 rewardPoolAdded = addedOnBlock[rewardPool];\r\n      address underlying = vaultUnderlying[vault];\r\n\r\n      return (rewardPoolAdded, vault, vaultAdded, strategies, strategiesAdded, underlying);\r\n    }\r\n\r\n    function getRewardPoolInfo(address _rewardPool) external view validRewardPool(_rewardPool) returns(\r\n      uint256, address, uint256, address[] memory, uint256[] memory, address) {\r\n\r\n      address rewardPool = _rewardPool;\r\n      address vault = rewardPoolVault[rewardPool];\r\n      if (vaultMultipleStrategies[vault]) {\r\n        return getRewardPoolInfoMultipleStrategies(vault);\r\n      } else {\r\n        return getRewardPoolInfoSingleStrategy(vault);\r\n      }\r\n    }\r\n\r\n    function getUnderlyingInfo(address _underlying) external view validUnderlying(_underlying) returns(\r\n      address[] memory, uint256[] memory, address[] memory, uint256[] memory) {\r\n\r\n      address underlying = _underlying;\r\n      address[] memory vaults = underlyingVaults[underlying];\r\n      uint256[] memory vaultsAdded = new uint256[](vaults.length);\r\n      address[] memory rewardPools = new address[](vaults.length);\r\n      uint256[] memory rewardPoolsAdded = new uint256[](vaults.length);\r\n\r\n\r\n      for (uint256 i = 0; i<vaults.length;i++) {\r\n        vaultsAdded[i] = addedOnBlock[vaults[i]];\r\n        rewardPools[i] = vaultRewardPool[vaults[i]];\r\n        rewardPoolsAdded[i] = addedOnBlock[rewardPools[i]];\r\n      }\r\n\r\n      return(vaults, vaultsAdded, rewardPools, rewardPoolsAdded);\r\n    }\r\n\r\n    //This will deactivate all strategies and reward pool associated to vault.\r\n    //If it is only vault for underlying this will be deactivated too.\r\n    function removeVault(address _vault) external onlyGovernance validVault(_vault) {\r\n      address vault = _vault;\r\n      address underlying = vaultUnderlying[vault];\r\n      uint256 i;\r\n\r\n\r\n      isActive[vault] = false;\r\n      if (underlyingVaults[underlying].length<=1) {\r\n        isActive[underlying] = false;\r\n      }\r\n\r\n      for ( i=0;i<underlyingVaults[underlying].length;i++) {\r\n        if (vault == underlyingVaults[underlying][i]){\r\n          break;\r\n        }\r\n      }\r\n      while (i<underlyingVaults[underlying].length-1) {\r\n        underlyingVaults[underlying][i] = underlyingVaults[underlying][i+1];\r\n        i++;\r\n      }\r\n      /* underlyingVaults[underlying].length--; */\r\n\r\n      for ( i=0;i<vaultList.length;i++) {\r\n        if (vault == vaultList[i]){\r\n          break;\r\n        }\r\n      }\r\n      while (i<vaultList.length-1) {\r\n        vaultList[i] = vaultList[i+1];\r\n        i++;\r\n      }\r\n      /* vaultList.length--; */\r\n\r\n      if (vaultMultipleStrategies[vault]){\r\n        for(i=0;i<vaultStrategies[vault].length;i++){\r\n          removeStrategy(vaultStrategies[vault][i]);\r\n        }\r\n      } else {\r\n        if(vaultStrategy[vault]!=address(0)){\r\n          removeStrategy(vaultStrategy[vault]);\r\n        }\r\n      }\r\n\r\n      address rewardPool = vaultRewardPool[vault];\r\n      if (rewardPool != address(0)) {\r\n        removeRewardPool(rewardPool);\r\n      }\r\n\r\n      emit VaultRemoved(vault,vaultStrategy[vault],rewardPool);\r\n    }\r\n\r\n    //Deactivate strategy.\r\n    function removeStrategy(address _strategy) public onlyGovernance validStrategy(_strategy) {\r\n      address strategy = _strategy;\r\n      address vault = strategyVault[strategy];\r\n      isActive[strategy] = false;\r\n      uint256 i;\r\n\r\n      if (!vaultMultipleStrategies[vault]) {\r\n        vaultStrategy[vault] = address(0);\r\n      } else {\r\n        for ( i=0;i<vaultStrategies[vault].length;i++) {\r\n          if (strategy == vaultStrategies[vault][i]){\r\n            break;\r\n          }\r\n        }\r\n        while (i<vaultStrategies[vault].length-1) {\r\n          vaultStrategies[vault][i] = vaultStrategies[vault][i+1];\r\n          i++;\r\n        }\r\n        /* vaultStrategies[vault].length--; */\r\n      }\r\n\r\n      for ( i=0;i<strategyList.length;i++) {\r\n        if (strategy == strategyList[i]){\r\n          break;\r\n        }\r\n      }\r\n      while (i<strategyList.length-1) {\r\n        strategyList[i] = strategyList[i+1];\r\n        i++;\r\n      }\r\n      /* strategyList.length--; */\r\n\r\n      emit StrategyRemoved(strategy,vault);\r\n    }\r\n\r\n    //Deactivate reward pool. This does not deactivate the vault.\r\n    function removeRewardPool(address _rewardPool) public onlyGovernance validRewardPool(_rewardPool) {\r\n      address rewardPool = _rewardPool;\r\n      address vault = rewardPoolVault[rewardPool];\r\n      vaultRewardPool[vault] = address(0);\r\n      isActive[rewardPool] = false;\r\n\r\n      uint256 i;\r\n      for ( i=0;i<rewardPoolList.length;i++) {\r\n        if (rewardPool == rewardPoolList[i]){\r\n          break;\r\n        }\r\n      }\r\n      while (i<rewardPoolList.length-1) {\r\n        rewardPoolList[i] = rewardPoolList[i+1];\r\n        i++;\r\n      }\r\n      /* rewardPoolList.length--; */\r\n\r\n      emit RewardPoolRemoved(rewardPool,vault);\r\n    }\r\n\r\n    function getAllVaults() external view returns (address[] memory) {\r\n      return (vaultList);\r\n    }\r\n\r\n    function getAllStrategies() external view returns (address[] memory) {\r\n      return (strategyList);\r\n    }\r\n\r\n    function getAllRewardPools() external view returns (address[] memory) {\r\n      return (rewardPoolList);\r\n    }\r\n\r\n    // transfers token in the controller contract to the governance\r\n    function salvage(address _token, uint256 _amount) external onlyGovernance {\r\n        IERC20(_token).safeTransfer(governance, _amount);\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/interface/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.16;\r\n\r\ninterface IStrategy {\r\n\r\n    function unsalvagableTokens(address tokens) external view returns (bool);\r\n\r\n    function governance() external view returns (address);\r\n    function controller() external view returns (address);\r\n    function underlying() external view returns (address);\r\n    function vault() external view returns (address);\r\n\r\n    function withdrawAllToVault() external;\r\n    function withdrawToVault(uint256 amount) external;\r\n\r\n    function investedUnderlyingBalance() external view returns (uint256); // itsNotMuch()\r\n\r\n    // should only be called by controller\r\n    function salvage(address recipient, address token, uint256 amount) external;\r\n\r\n    function doHardWork() external;\r\n    function depositArbCheck() external view returns(bool);\r\n}\r\n"
    },
    "contracts/interface/IVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.16;\r\n\r\ninterface IVault {\r\n\r\n    function underlyingBalanceInVault() external view returns (uint256);\r\n    function underlyingBalanceWithInvestment() external view returns (uint256);\r\n\r\n    // function store() external view returns (address);\r\n    function governance() external view returns (address);\r\n    function controller() external view returns (address);\r\n    function underlying() external view returns (address);\r\n    function strategy() external view returns (address);\r\n\r\n    function setStrategy(address _strategy) external;\r\n    function setVaultFractionToInvest(uint256 numerator, uint256 denominator) external;\r\n\r\n    function deposit(uint256 amountWei) external;\r\n    function depositFor(uint256 amountWei, address holder) external;\r\n\r\n    function withdrawAll() external;\r\n    function withdraw(uint256 numberOfShares) external;\r\n    function getPricePerFullShare() external view returns (uint256);\r\n\r\n    function underlyingBalanceWithInvestmentForHolder(address holder) view external returns (uint256);\r\n\r\n    // hard work should be callable only by the controller (by the hard worker) or by governance\r\n    function doHardWork() external;\r\n}\r\n"
    },
    "contracts/interface/IRewardPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.16;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n// Unifying the interface with the Synthetix Reward Pool\r\ninterface IRewardPool {\r\n  function rewardToken() external view returns (address);\r\n  function lpToken() external view returns (address);\r\n  function duration() external view returns (uint256);\r\n\r\n  function periodFinish() external view returns (uint256);\r\n  function rewardRate() external view returns (uint256);\r\n  function rewardPerTokenStored() external view returns (uint256);\r\n\r\n  function stake(uint256 amountWei) external;\r\n\r\n  // `balanceOf` would give the amount staked.\r\n  // As this is 1 to 1, this is also the holder's share\r\n  function balanceOf(address holder) external view returns (uint256);\r\n  // total shares & total lpTokens staked\r\n  function totalSupply() external view returns(uint256);\r\n\r\n  function withdraw(uint256 amountWei) external;\r\n  function exit() external;\r\n\r\n  // get claimed rewards\r\n  function earned(address holder) external view returns (uint256);\r\n\r\n  // claim rewards\r\n  function getReward() external;\r\n\r\n  // notify\r\n  function notifyRewardAmount(uint256 _amount) external;\r\n}\r\n"
    },
    "contracts/CurveSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"./interface/curve/ICurvePool.sol\";\r\nimport \"./interface/curve/ICurveRegistry.sol\";\r\nimport \"./SwapBase.sol\";\r\nimport \"./OracleBase.sol\";\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract CurveSwap is SwapBase {\r\n\r\n  uint256 public ONE = 10**PRECISION_DECIMALS;\r\n\r\n  OracleBase oracleBase;\r\n\r\n  ICurveRegistry public curveRegistry;\r\n\r\n  //Below are addresses of LP tokens for which it is known that the get_underlying functions of Curve Registry do not work because of errors in the Curve contract.\r\n  //The exceptions are split. In the first exception the get_underlying_coins is called with get_balances.\r\n  //In the second exception get_coins and get_balances are called.\r\n  address[] public curveExceptionList0 = [\r\n  0xFd2a8fA60Abd58Efe3EeE34dd494cD491dC14900,\r\n  0x02d341CcB60fAaf662bC0554d13778015d1b285C\r\n  ];\r\n  address[] public curveExceptionList1 = [\r\n  0x49849C98ae39Fff122806C06791Fa73784FB3675,\r\n  0x075b1bb99792c9E1041bA13afEf80C91a1e70fB3,\r\n  0xaA17A236F2bAdc98DDc0Cf999AbB47D47Fc0A6Cf\r\n  ];\r\n\r\n  address public ETH  = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n  address public baseCurrency = address(0);\r\n\r\n  modifier validException(address exception){\r\n    (bool check0, bool check1) = checkCurveException(exception);\r\n    require(check0 || check1, \"Not an exception\");\r\n    _;\r\n  }\r\n\r\n  event CurveExceptionAdded(address newException, uint256 exceptionList);\r\n  event CurveExceptionRemoved(address oldException, uint256 exceptionList);\r\n\r\n  constructor(address _factoryAddress, address _baseCurrency, address _oracleBase ) SwapBase(_factoryAddress) public {\r\n    baseCurrency = _baseCurrency;\r\n    oracleBase = OracleBase(_oracleBase);\r\n  }\r\n\r\n  function initializeFactory() internal virtual override {\r\n    curveRegistry =  ICurveRegistry(factoryAddress);\r\n  }\r\n\r\n  /// @dev Check what token is pool of this Swap\r\n  function isPool(address token) public virtual override view returns(bool){\r\n    address pool = curveRegistry.get_pool_from_lp_token(token);\r\n    bool check = (pool != address(0))? true:false;\r\n    return check;\r\n  }\r\n\r\n  /// @dev Get underlying tokens and amounts\r\n  function getUnderlying(address token) public virtual override view returns (address[] memory, uint256[] memory){\r\n    address pool = curveRegistry.get_pool_from_lp_token(token);\r\n    (bool exception0, bool exception1) = checkCurveException(token);\r\n    address[8] memory tokens;\r\n    address[] memory returnTokens = new address[](8);\r\n    uint256[8] memory reserves;\r\n    if (exception0) {\r\n      tokens = curveRegistry.get_underlying_coins(pool);\r\n      reserves = curveRegistry.get_balances(pool);\r\n    } else if (exception1) {\r\n      tokens = curveRegistry.get_coins(pool);\r\n      reserves = curveRegistry.get_balances(pool);\r\n    } else {\r\n      tokens = curveRegistry.get_underlying_coins(pool);\r\n      reserves = curveRegistry.get_underlying_balances(pool);\r\n    }\r\n\r\n    //Some pools work with ETH instead of WETH. For further calculations and functionality this is changed to WETH address.\r\n    uint256[8] memory decimals;\r\n    uint256 i;\r\n    uint256 totalSupply = IERC20(token).totalSupply();\r\n    uint256 supplyDecimals = ERC20(token).decimals();\r\n    uint256[] memory amounts = new uint256[](8);\r\n    for (i=0;i<tokens.length;i++) {\r\n      returnTokens[i] = tokens[i];\r\n      if (tokens[i] == address(0)){\r\n        break;\r\n      } else if (tokens[i]==ETH){\r\n        decimals[i] = 18;\r\n        tokens[i] = baseCurrency;\r\n        returnTokens[i] = baseCurrency;\r\n      } else {\r\n        decimals[i] = ERC20(tokens[i]).decimals();\r\n      }\r\n\r\n      amounts[i] = reserves[i]*10**(supplyDecimals-decimals[i]+PRECISION_DECIMALS)/totalSupply;\r\n      //Curve has errors in their registry, where amounts are stored with the wrong number of decimals\r\n      //This steps accounts for this. In general there will never be more than 1 of any underlying token\r\n      //per curve LP token. If it is more, the decimals are corrected.\r\n      if (amounts[i] > ONE) {\r\n        amounts[i] = amounts[i]*10**(decimals[i]-18);\r\n      }\r\n    }\r\n    return (returnTokens, amounts);\r\n  }\r\n\r\n  /// @dev Gives a pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\r\n  //Gives the Curve pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\r\n  //Curve can have multiple pools for a given pair. Research showed that the largest pool is always given as first instance, so only the first needs to be called.\r\n  //In Curve USD based tokens are often pooled with 3Pool. In this case liquidity is the same with USDC, DAI and USDT. When liquidity is found with USDC\r\n  //the loop is stopped, as no larger liquidity will be found with any other asset and this reduces calls.\r\n  function getLargestPool(address token, address[] memory tokenList) public virtual override view returns (address, address, uint256){\r\n    uint256 largestPoolSize = 0;\r\n    address largestPoolAddress;\r\n    address largestKeyToken;\r\n    uint256 poolSize;\r\n    uint256 i;\r\n    for (i=0;i<tokenList.length;i++) {\r\n      address poolAddress = curveRegistry.find_pool_for_coins(token, tokenList[i],0);\r\n      if (poolAddress == address(0)) {\r\n        continue;\r\n      }\r\n      address lpToken = curveRegistry.get_lp_token(poolAddress);\r\n      (bool exception0,) = checkCurveException(lpToken);\r\n      if (exception0) {\r\n        continue;\r\n      }\r\n      poolSize = getBalance(token, tokenList[i], poolAddress);\r\n      if (poolSize > largestPoolSize) {\r\n        largestPoolSize = poolSize;\r\n        largestKeyToken = tokenList[i];\r\n        largestPoolAddress = poolAddress;\r\n        if (largestKeyToken == oracleBase.definedOutputToken()) {\r\n            return (largestKeyToken, largestPoolAddress, largestPoolSize);\r\n        }\r\n      }\r\n    }\r\n    return (largestKeyToken, largestPoolAddress, largestPoolSize);\r\n  }\r\n\r\n  /// @dev Gives the balance of a given token in a given pool.\r\n  function getBalance(address tokenFrom, address tokenTo, address pool) internal view returns (uint256){\r\n    uint256 balance;\r\n    (int128 indexFrom,,bool underlying) = curveRegistry.get_coin_indices(pool, tokenFrom, tokenTo);\r\n    uint256[8] memory balances;\r\n    if (underlying) {\r\n      balances = curveRegistry.get_underlying_balances(pool);\r\n      uint256 decimals = ERC20(tokenFrom).decimals();\r\n      balance = balances[uint256(indexFrom)];\r\n      if (balance > 10**(decimals+10)) {\r\n        balance = balance*10**(decimals-18);\r\n      }\r\n    } else {\r\n      balances = curveRegistry.get_balances(pool);\r\n      balance = balances[uint256(indexFrom)];\r\n    }\r\n    return balance;\r\n  }\r\n\r\n  /// @dev Generic function giving the price of a given token vs another given token\r\n  function getPriceVsToken(address token0, address token1, address poolAddress) public virtual override view returns (uint256) {\r\n    ICurvePool pool = ICurvePool(poolAddress);\r\n    (int128 indexFrom, int128 indexTo, bool underlying) = curveRegistry.get_coin_indices(poolAddress, token0, token1);\r\n    uint256 decimals0 = ERC20(token0).decimals();\r\n    uint256 decimals1 = ERC20(token1).decimals();\r\n    //Accuracy is impacted when one of the tokens has low decimals.\r\n    //This addition does not impact the outcome of computation, other than increased accuracy.\r\n    if (decimals0 < 4 || decimals1 < 4) {\r\n      decimals0 = decimals0 + 4;\r\n      decimals1 = decimals1 + 4;\r\n    }\r\n    uint256 amount1;\r\n    uint256 price;\r\n    if (underlying) {\r\n      amount1 = pool.get_dy_underlying(indexFrom, indexTo, 10**decimals0);\r\n      price = amount1*10**(PRECISION_DECIMALS-decimals1);\r\n    } else {\r\n      amount1 = pool.get_dy(indexFrom, indexTo, 10**decimals0);\r\n      price = amount1*10**(PRECISION_DECIMALS-decimals1);\r\n    }\r\n    return price;\r\n  }\r\n\r\n /* function addCurveException(address newException, uint256 exceptionList) external {\r\n    (bool check0, bool check1) = checkCurveException(newException);\r\n    require(check0==false && check1 == false, \"Already an exception\");\r\n    require(exceptionList <= 1, 'Only accepts 0 or 1');\r\n    if (exceptionList == 0) {\r\n      curveExceptionList0.push(newException);\r\n    } else {\r\n      curveExceptionList1.push(newException);\r\n    }\r\n    emit CurveExceptionAdded(newException, exceptionList);\r\n  }\r\n  function removeCurveException(address exception) external onlyGovernance validException(exception) {\r\n    (bool check0,) = checkCurveException(exception);\r\n    uint256 i;\r\n    uint256 j;\r\n    uint256 list;\r\n    if (check0) {\r\n      list = 0;\r\n      for (i=0;i<curveExceptionList0.length;i++) {\r\n        if (exception == curveExceptionList0[i]){\r\n          break;\r\n        }\r\n      }\r\n      while (i<curveExceptionList0.length-1) {\r\n        curveExceptionList0[i] = curveExceptionList0[i+1];\r\n        i++;\r\n      }\r\n      curveExceptionList0.pop();\r\n    } else {\r\n      list = 1;\r\n      for (j=0;j<curveExceptionList1.length;j++) {\r\n        if (exception == curveExceptionList1[j]){\r\n          break;\r\n        }\r\n      }\r\n      while (j<curveExceptionList1.length-1) {\r\n        curveExceptionList1[j] = curveExceptionList1[j+1];\r\n        j++;\r\n      }\r\n      curveExceptionList1.pop();\r\n    }\r\n    emit CurveExceptionRemoved(exception, list);\r\n  }*/\r\n  /// @dev Check address for the Curve exception lists.\r\n  function checkCurveException(address token) internal view returns (bool, bool) {\r\n    uint256 i;\r\n    for (i=0;i<curveExceptionList0.length;i++) {\r\n      if (token == curveExceptionList0[i]) {\r\n        return (true, false);\r\n      }\r\n    }\r\n    for (i=0;i<curveExceptionList1.length;i++) {\r\n      if (token == curveExceptionList1[i]) {\r\n        return (false, true);\r\n      }\r\n    }\r\n    return (false, false);\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/ArrayLibTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport \"./ArrayLib.sol\";\r\n\r\ncontract ArrayLibTest  {\r\n\r\n    using ArrayLib for address[];\r\n    using ArrayLib for uint256[];\r\n\r\n    address[] public addresses;\r\n    uint256[] public numbers;\r\n\r\n    function listAddresses() public view returns (address[] memory) {\r\n        return addresses;\r\n    }\r\n\r\n    function addAddress(address _address) public {\r\n        addresses.addUnique(_address);\r\n    }\r\n\r\n    function removeAddress(address _address) public {\r\n        addresses.removeFirst(_address);\r\n    }\r\n\r\n    function addAddressArray(address[] memory _addresses) public {\r\n        addresses.addArrayUnique(_addresses);\r\n    }\r\n\r\n    function removeAddressArray(address[] memory _addresses) public {\r\n        addresses.removeArrayFirst(_addresses);\r\n    }\r\n\r\n    // numbers\r\n\r\n    function listNumbers() public view returns (uint[] memory) {\r\n        return numbers;\r\n    }\r\n\r\n    function addNumber(uint _number) public {\r\n        numbers.addUnique(_number);\r\n    }\r\n\r\n    function removeNumber(uint _number) public {\r\n        numbers.removeFirst(_number);\r\n    }\r\n\r\n    function addNumberArray(uint[] memory _numbers) public {\r\n        numbers.addArrayUnique(_numbers);\r\n    }\r\n\r\n    function removeNumberArray(uint[] memory _numbers) public {\r\n        numbers.removeArrayFirst(_numbers);\r\n    }\r\n\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}