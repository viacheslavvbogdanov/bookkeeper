{
  "address": "0x173e69d9627deFdaC8a3B756E0e99F612841CeBA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_vaults",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "AddressesAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "AddressesRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "PoolsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "PoolsRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "VaultsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "VaultsRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "POOLS_FOLDER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULTS_FOLDER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "folder",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "folder",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "addArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "addPoolsArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "addVaultsArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_vaults",
          "type": "address[]"
        }
      ],
      "name": "initPoolsAndVaults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_vaults",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "folder",
          "type": "uint256"
        }
      ],
      "name": "list",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listVaults",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "folder",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "folder",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "removeArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "removePoolsArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "removeVaultsArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x989edd729cd3b6a4e77e1f0a56264fada5f75e622385523987a53c3a80c1c84c",
  "receipt": {
    "to": null,
    "from": "0x1AA16eAF73c9761bC18748E3A47a0c37403fc618",
    "contractAddress": "0x173e69d9627deFdaC8a3B756E0e99F612841CeBA",
    "transactionIndex": 230,
    "gasUsed": "1919784",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xe596da0ca012c8d162aa94bdeb44305232bd11ce70cbfea4a38edc4e65156728",
    "transactionHash": "0x989edd729cd3b6a4e77e1f0a56264fada5f75e622385523987a53c3a80c1c84c",
    "logs": [],
    "blockNumber": 13202841,
    "cumulativeGasUsed": "16099749",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [],
    []
  ],
  "solcInputHash": "4c3f675c964e5d126ec08c5c1f7c7259",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_vaults\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"AddressesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"AddressesRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"PoolsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"PoolsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"VaultsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"VaultsRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POOLS_FOLDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULTS_FOLDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"folder\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"folder\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addPoolsArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addVaultsArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_vaults\",\"type\":\"address[]\"}],\"name\":\"initPoolsAndVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_vaults\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"folder\",\"type\":\"uint256\"}],\"name\":\"list\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listVaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"folder\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"folder\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removeArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removePoolsArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removeVaultsArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ContractRegistry.sol\":\"ContractRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x9abeffe138f098b16557187383ba0f9e8503602fa95cd668132986ee115237ed\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/ArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12 <0.8.0;\\r\\n\\r\\nlibrary ArrayLib {\\r\\n\\r\\n    string constant NOT_IN_ARRAY     = \\\"Not in array\\\";\\r\\n    string constant ALREADY_IN_ARRAY = \\\"Already in array\\\";\\r\\n\\r\\n    // address array\\r\\n\\r\\n    function inArray(address[] storage array, address _item)\\r\\n    internal view returns (bool) {\\r\\n        uint len = array.length;\\r\\n        for (uint i=0; i<len; i++) {\\r\\n            if (array[i]==_item) return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function addUnique(address[] storage array, address _item)\\r\\n    internal {\\r\\n        require(!inArray(array, _item), ALREADY_IN_ARRAY);\\r\\n        array.push(_item);\\r\\n    }\\r\\n\\r\\n    function removeByIndex(address[] storage array, uint256 index)\\r\\n    internal {\\r\\n        uint256 len_1 = array.length - 1;\\r\\n        require(index<=len_1, NOT_IN_ARRAY);\\r\\n        for (uint256 i = index; i < len_1; i++) {\\r\\n            array[i] = array[i + 1];\\r\\n        }\\r\\n        array.pop();\\r\\n    }\\r\\n\\r\\n    function removeFirst(address[] storage array, address _item)\\r\\n    internal {\\r\\n        require(inArray(array, _item), NOT_IN_ARRAY);\\r\\n        uint last = array.length-1;\\r\\n        for (uint i=0; i<=last; i++) {\\r\\n            if (array[i]==_item) {\\r\\n                removeByIndex(array, i);\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addArrayUnique(address[] storage array, address[] memory _items)\\r\\n    internal {\\r\\n        uint len = _items.length;\\r\\n        for (uint i=0; i<len; i++) {\\r\\n            addUnique(array, _items[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeArrayFirst(address[] storage array, address[] memory _items)\\r\\n    internal {\\r\\n        uint len = _items.length;\\r\\n        for (uint i=0; i<len; i++) {\\r\\n            removeFirst(array, _items[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function inArray(uint256[] storage array, uint256 _item)\\r\\n    internal view returns (bool) {\\r\\n        uint len = array.length;\\r\\n        for (uint i=0; i<len; i++) {\\r\\n            if (array[i]==_item) return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function addUnique(uint256[] storage array, uint256 _item)\\r\\n    internal {\\r\\n        require(!inArray(array, _item), ALREADY_IN_ARRAY);\\r\\n        array.push(_item);\\r\\n    }\\r\\n\\r\\n\\r\\n    function removeByIndex(uint256[] storage array, uint256 index)\\r\\n    internal {\\r\\n        uint256 len_1 = array.length - 1;\\r\\n        require(index<=len_1, NOT_IN_ARRAY);\\r\\n        for (uint256 i = index; i < len_1; i++) {\\r\\n            array[i] = array[i + 1];\\r\\n        }\\r\\n        array.pop();\\r\\n    }\\r\\n\\r\\n    function removeFirst(uint256[] storage array, uint256 _item)\\r\\n    internal {\\r\\n        require(inArray(array, _item), NOT_IN_ARRAY);\\r\\n        uint last = array.length-1;\\r\\n        for (uint i=0; i<=last; i++) {\\r\\n            if (array[i]==_item) {\\r\\n                removeByIndex(array, i);\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addArrayUnique(uint256[] storage array, uint256[] memory _items)\\r\\n    internal {\\r\\n        uint len = _items.length;\\r\\n        for (uint i=0; i<len; i++) {\\r\\n            addUnique(array, _items[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeArrayFirst(uint256[] storage array, uint256[] memory _items)\\r\\n    internal {\\r\\n        uint len = _items.length;\\r\\n        for (uint i=0; i<len; i++) {\\r\\n            removeFirst(array, _items[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x6ea12eec1a0888ce866bbc093085b95a3828cc550232c5a62d4a412f4cc4f0b9\",\"license\":\"MIT\"},\"contracts/ContractRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\r\\n\\r\\nimport \\\"./Governable.sol\\\";\\r\\nimport \\\"./ArrayLib.sol\\\";\\r\\n\\r\\ncontract ContractRegistry is Governable, Initializable {\\r\\n    using Address for address;\\r\\n    using ArrayLib for address[];\\r\\n\\r\\n    uint public constant POOLS_FOLDER = 1;\\r\\n    uint public constant VAULTS_FOLDER = 2;\\r\\n\\r\\n    mapping (uint => address[]) public addresses;\\r\\n\\r\\n    event AddressesAdded(address[] addresses);\\r\\n    event AddressesRemoved(address[] addresses);\\r\\n    event PoolsAdded(address[] addresses);\\r\\n    event PoolsRemoved(address[] addresses);\\r\\n    event VaultsAdded(address[] addresses);\\r\\n    event VaultsRemoved(address[] addresses);\\r\\n\\r\\n    address[] private singleAddress;\\r\\n\\r\\n    constructor(address[] memory _pools, address[] memory _vaults)\\r\\n    public Governable(msg.sender) {\\r\\n        singleAddress.push(address(0));\\r\\n    }\\r\\n\\r\\n    function initialize(address[] memory _pools, address[] memory _vaults)\\r\\n    public onlyGovernance initializer {\\r\\n        Governable.setGovernance(msg.sender);\\r\\n        singleAddress.push(address(0));\\r\\n\\r\\n        initPoolsAndVaults(_pools, _vaults);\\r\\n    }\\r\\n\\r\\n    function initPoolsAndVaults(address[] memory _pools, address[] memory _vaults)\\r\\n    public onlyGovernance {\\r\\n        address[] storage pools  = addresses[POOLS_FOLDER];\\r\\n        address[] storage vaults = addresses[VAULTS_FOLDER];\\r\\n\\r\\n        require(pools.length ==0 && vaults.length ==0);\\r\\n\\r\\n        uint _poolsLen = _pools.length;\\r\\n        uint _vaultsLen = _vaults.length;\\r\\n\\r\\n        for (uint i=0; i< _poolsLen; i++) {\\r\\n            pools.push(_pools[i]);\\r\\n        }\\r\\n        emit PoolsAdded(_pools);\\r\\n\\r\\n        for (uint i=0; i< _vaultsLen; i++) {\\r\\n            vaults.push(_vaults[i]);\\r\\n        }\\r\\n        emit VaultsAdded(_vaults);\\r\\n    }\\r\\n\\r\\n    function list(uint folder) public view returns (address[] memory) {\\r\\n        return addresses[folder];\\r\\n    }\\r\\n\\r\\n    function add(uint folder, address _address) public onlyGovernance {\\r\\n        addresses[folder].addUnique(_address);\\r\\n\\r\\n        singleAddress[0] = _address;\\r\\n        emit AddressesAdded(singleAddress);\\r\\n    }\\r\\n\\r\\n    function remove(uint folder, address _address) public onlyGovernance {\\r\\n        addresses[folder].removeFirst(_address);\\r\\n\\r\\n        singleAddress[0] = _address;\\r\\n        emit AddressesRemoved(singleAddress);\\r\\n    }\\r\\n\\r\\n    function addArray(uint folder, address[] memory _addresses) public onlyGovernance {\\r\\n        addresses[folder].addArrayUnique(_addresses);\\r\\n        emit AddressesAdded(_addresses);\\r\\n    }\\r\\n\\r\\n    function removeArray(uint folder, address[] memory _addresses) public onlyGovernance {\\r\\n        addresses[folder].removeArrayFirst(_addresses);\\r\\n        emit AddressesRemoved(_addresses);\\r\\n    }\\r\\n\\r\\n    // Pools\\r\\n\\r\\n    function listPools() public view returns (address[] memory) {\\r\\n        return addresses[POOLS_FOLDER];\\r\\n    }\\r\\n\\r\\n    function addPool(address _address) public onlyGovernance {\\r\\n        addresses[POOLS_FOLDER].addUnique(_address);\\r\\n\\r\\n        singleAddress[0] = _address;\\r\\n        emit PoolsAdded(singleAddress);\\r\\n    }\\r\\n\\r\\n    function removePool(address _address) public onlyGovernance {\\r\\n        addresses[POOLS_FOLDER].removeFirst(_address);\\r\\n\\r\\n        singleAddress[0] = _address;\\r\\n        emit PoolsRemoved(singleAddress);\\r\\n    }\\r\\n\\r\\n    function addPoolsArray(address[] memory _addresses) public onlyGovernance {\\r\\n        addresses[POOLS_FOLDER].addArrayUnique(_addresses);\\r\\n        emit PoolsAdded(_addresses);\\r\\n    }\\r\\n\\r\\n    function removePoolsArray(address[] memory _addresses) public onlyGovernance {\\r\\n        addresses[POOLS_FOLDER].removeArrayFirst(_addresses);\\r\\n        emit PoolsRemoved(_addresses);\\r\\n    }\\r\\n\\r\\n\\r\\n    // Vaults\\r\\n\\r\\n    function listVaults() public view returns (address[] memory) {\\r\\n        return addresses[VAULTS_FOLDER];\\r\\n    }\\r\\n\\r\\n    function addVault(address _address) public onlyGovernance {\\r\\n        addresses[VAULTS_FOLDER].addUnique(_address);\\r\\n\\r\\n        singleAddress[0] = _address;\\r\\n        emit VaultsAdded(singleAddress);\\r\\n    }\\r\\n\\r\\n    function removeVault(address _address) public onlyGovernance {\\r\\n        addresses[VAULTS_FOLDER].removeFirst(_address);\\r\\n\\r\\n        singleAddress[0] = _address;\\r\\n        emit VaultsRemoved(singleAddress);\\r\\n    }\\r\\n\\r\\n    function addVaultsArray(address[] memory _addresses) public onlyGovernance {\\r\\n        addresses[VAULTS_FOLDER].addArrayUnique(_addresses);\\r\\n        emit VaultsAdded(_addresses);\\r\\n    }\\r\\n\\r\\n    function removeVaultsArray(address[] memory _addresses) public onlyGovernance {\\r\\n        addresses[VAULTS_FOLDER].removeArrayFirst(_addresses);\\r\\n        emit VaultsRemoved(_addresses);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3d2221bd594b78207ac1ed5e74397356d4cadec265433b3506571ba2b7794cc4\",\"license\":\"MIT\"},\"contracts/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.16;\\r\\n\\r\\ncontract Governable {\\r\\n\\r\\n  address public governance;\\r\\n\\r\\n  constructor(address _governance) public {\\r\\n    setGovernance(_governance);\\r\\n  }\\r\\n\\r\\n  modifier onlyGovernance() {\\r\\n    // pass check while governance might not initialized (i.e. in proxy)\\r\\n    require((governance==address(0)) || (msg.sender==governance), \\\"Not governance\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function setGovernance(address _governance) public onlyGovernance {\\r\\n    require(_governance != address(0), \\\"new governance shouldn't be empty\\\");\\r\\n    governance = _governance;\\r\\n  }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xdcde2e004262672837ce7160d44cf33d6ed9cbb9245af113d041ab54fa467a21\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200236a3803806200236a833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82518660208202830111640100000000821117156200008c57600080fd5b82525081516020918201928201910280838360005b83811015620000bb578181015183820152602001620000a1565b5050505090500160405260200180516040519392919084640100000000821115620000e557600080fd5b908301906020820185811115620000fb57600080fd5b82518660208202830111640100000000821117156200011957600080fd5b82525081516020918201928201910280838360005b83811015620001485781810151838201526020016200012e565b50505050905001604052505050336200016781620001b060201b60201c565b5050600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319169055506200027f565b6000546001600160a01b03161580620001d357506000546001600160a01b031633145b62000216576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b0381166200025d5760405162461bcd60e51b8152600401808060200182810382526021815260200180620023496021913960400191505060405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6120ba806200028f6000396000f3fe608060405234801561001057600080fd5b50600436106101125760003560e01c8063256b5a02146101175780632b8bbbe81461013f5780633b7d09461461016b5780634892bdb6146101915780634f9f79b0146101ab57806350cc258e1461024c5780635aa6e675146102a45780635b3da44e146102c8578063670815a9146103eb578063687958621461040e5780637345afbe1461041657806373cf25f81461041e57806380c9419e1461054157806382638d551461055e57806388b5c6ef146105ff5780639dfa4e94146106a7578063ab033ea9146106d3578063c4c7ab84146106f9578063ceb68c23146107a1578063d914cd4b146107c7578063e1f01232146107ed578063e46cf10f1461088e575b600080fd5b61013d6004803603602081101561012d57600080fd5b50356001600160a01b031661092f565b005b61013d6004803603604081101561015557600080fd5b50803590602001356001600160a01b0316610a63565b61013d6004803603602081101561018157600080fd5b50356001600160a01b0316610b8e565b610199610cc0565b60408051918252519081900360200190f35b61013d600480360360208110156101c157600080fd5b810190602081018135600160201b8111156101db57600080fd5b8201836020820111156101ed57600080fd5b803590602001918460208302840111600160201b8311171561020e57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610cc5945050505050565b610254610db1565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610290578181015183820152602001610278565b505050509050019250505060405180910390f35b6102ac610e29565b604080516001600160a01b039092168252519081900360200190f35b61013d600480360360408110156102de57600080fd5b810190602081018135600160201b8111156102f857600080fd5b82018360208201111561030a57600080fd5b803590602001918460208302840111600160201b8311171561032b57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561037a57600080fd5b82018360208201111561038c57600080fd5b803590602001918460208302840111600160201b831117156103ad57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610e38945050505050565b6102ac6004803603604081101561040157600080fd5b508035906020013561106a565b61025461109f565b610199611115565b61013d6004803603604081101561043457600080fd5b810190602081018135600160201b81111561044e57600080fd5b82018360208201111561046057600080fd5b803590602001918460208302840111600160201b8311171561048157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156104d057600080fd5b8201836020820111156104e257600080fd5b803590602001918460208302840111600160201b8311171561050357600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061111a945050505050565b6102546004803603602081101561055757600080fd5b503561128c565b61013d6004803603602081101561057457600080fd5b810190602081018135600160201b81111561058e57600080fd5b8201836020820111156105a057600080fd5b803590602001918460208302840111600160201b831117156105c157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506112f8945050505050565b61013d6004803603604081101561061557600080fd5b81359190810190604081016020820135600160201b81111561063657600080fd5b82018360208201111561064857600080fd5b803590602001918460208302840111600160201b8311171561066957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506113c8945050505050565b61013d600480360360408110156106bd57600080fd5b50803590602001356001600160a01b03166114ab565b61013d600480360360208110156106e957600080fd5b50356001600160a01b03166115d4565b61013d6004803603604081101561070f57600080fd5b81359190810190604081016020820135600160201b81111561073057600080fd5b82018360208201111561074257600080fd5b803590602001918460208302840111600160201b8311171561076357600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061169f945050505050565b61013d600480360360208110156107b757600080fd5b50356001600160a01b0316611765565b61013d600480360360208110156107dd57600080fd5b50356001600160a01b0316611897565b61013d6004803603602081101561080357600080fd5b810190602081018135600160201b81111561081d57600080fd5b82018360208201111561082f57600080fd5b803590602001918460208302840111600160201b8311171561085057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506119c9945050505050565b61013d600480360360208110156108a457600080fd5b810190602081018135600160201b8111156108be57600080fd5b8201836020820111156108d057600080fd5b803590602001918460208302840111600160201b831117156108f157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611a99945050505050565b6000546001600160a01b0316158061095157506000546001600160a01b031633145b610993576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600260005260016020526109b560008051602061204583398151915282611b69565b8060026000815481106109c457fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600080516020611ff7833981519152600260405180806020018281038252838181548152602001915080548015610a5257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a34575b50509250505060405180910390a150565b6000546001600160a01b03161580610a8557506000546001600160a01b031633145b610ac7576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6000828152600160205260409020610adf9082611b69565b806002600081548110610aee57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600080516020611f77833981519152600260405180806020018281038252838181548152602001915080548015610b7c57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b5e575b50509250505060405180910390a15050565b6000546001600160a01b03161580610bb057506000546001600160a01b031633145b610bf2576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60016000819052602052610c14600080516020611fd783398151915282611c5b565b806002600081548110610c2357fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600080516020612065833981519152600260405180806020018281038252838181548152602001915080548015610a52576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610a345750509250505060405180910390a150565b600281565b6000546001600160a01b03161580610ce757506000546001600160a01b031633145b610d29576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60026000526001602052610d4b60008051602061204583398151915282611d38565b600080516020611ff7833981519152816040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610d9b578181015183820152602001610d83565b505050509050019250505060405180910390a150565b6002600052600160209081526000805160206120458339815191528054604080518285028101850190915281815260609390929190830182828015610e1f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e01575b5050505050905090565b6000546001600160a01b031681565b6000546001600160a01b03161580610e5a57506000546001600160a01b031633145b610e9c576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60016020526002600052600080516020611fd7833981519152805460008051602061204583398151915290158015610ed357508054155b610edc57600080fd5b8351835160005b82811015610f3d5784878281518110610ef857fe5b60209081029190910181015182546001808201855560009485529290932090920180546001600160a01b0319166001600160a01b039093169290921790915501610ee3565b50600080516020611f97833981519152866040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610f8e578181015183820152602001610f76565b505050509050019250505060405180910390a160005b81811015610ffe5783868281518110610fb957fe5b60209081029190910181015182546001808201855560009485529290932090920180546001600160a01b0319166001600160a01b039093169290921790915501610fa4565b50600080516020611ff7833981519152856040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561104f578181015183820152602001611037565b505050509050019250505060405180910390a1505050505050565b6001602052816000526040600020818154811061108357fe5b6000918252602090912001546001600160a01b03169150829050565b600160008190526020908152600080516020611fd78339815191528054604080518285028101850190915281815260609390929190830182828015610e1f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610e01575050505050905090565b600181565b6000546001600160a01b0316158061113c57506000546001600160a01b031633145b61117e576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600054600160a81b900460ff16806111995750611199611d6a565b806111ae5750600054600160a01b900460ff16155b6111e95760405162461bcd60e51b815260040180806020018281038252602e815260200180612017602e913960400191505060405180910390fd5b600054600160a81b900460ff16158015611220576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b611229336115d4565b600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b03191690556112738383610e38565b8015611287576000805460ff60a81b191690555b505050565b6000818152600160209081526040918290208054835181840281018401909452808452606093928301828280156112ec57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116112ce575b50505050509050919050565b6000546001600160a01b0316158061131a57506000546001600160a01b031633145b61135c576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600081905260205261137e600080516020611fd783398151915282611d7b565b604080516020808252835181830152835160008051602061206583398151915293859392839291830191818601910280838360008315610d9b578181015183820152602001610d83565b6000546001600160a01b031615806113ea57506000546001600160a01b031633145b61142c576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60008281526001602052604090206114449082611d38565b600080516020611f77833981519152816040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561149457818101518382015260200161147c565b505050509050019250505060405180910390a15050565b6000546001600160a01b031615806114cd57506000546001600160a01b031633145b61150f576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60008281526001602052604090206115279082611c5b565b80600260008154811061153657fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600080516020611f36833981519152600260405180806020018281038252838181548152602001915080548015610b7c576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610b5e5750509250505060405180910390a15050565b6000546001600160a01b031615806115f657506000546001600160a01b031633145b611638576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b03811661167d5760405162461bcd60e51b8152600401808060200182810382526021815260200180611f566021913960400191505060405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031615806116c157506000546001600160a01b031633145b611703576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600082815260016020526040902061171b9082611d7b565b6040805160208082528351818301528351600080516020611f368339815191529385939283929183019181860191028083836000831561149457818101518382015260200161147c565b6000546001600160a01b0316158061178757506000546001600160a01b031633145b6117c9576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600260005260016020526117eb60008051602061204583398151915282611c5b565b8060026000815481106117fa57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600080516020611fb7833981519152600260405180806020018281038252838181548152602001915080548015610a52576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610a345750509250505060405180910390a150565b6000546001600160a01b031615806118b957506000546001600160a01b031633145b6118fb576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600081905260205261191d600080516020611fd783398151915282611b69565b80600260008154811061192c57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600080516020611f97833981519152600260405180806020018281038252838181548152602001915080548015610a52576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610a345750509250505060405180910390a150565b6000546001600160a01b031615806119eb57506000546001600160a01b031633145b611a2d576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60016000819052602052611a4f600080516020611fd783398151915282611d38565b6040805160208082528351818301528351600080516020611f9783398151915293859392839291830191818601910280838360008315610d9b578181015183820152602001610d83565b6000546001600160a01b03161580611abb57506000546001600160a01b031633145b611afd576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60026000526001602052611b1f60008051602061204583398151915282611d7b565b6040805160208082528351818301528351600080516020611fb783398151915293859392839291830191818601910280838360008315610d9b578181015183820152602001610d83565b611b738282611dad565b156040518060400160405280601081526020016f416c726561647920696e20617272617960801b81525090611c265760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611beb578181015183820152602001611bd3565b50505050905090810190601f168015611c185780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5081546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b03909216919091179055565b611c658282611dad565b6040518060400160405280600c81526020016b4e6f7420696e20617272617960a01b81525090611cd65760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611beb578181015183820152602001611bd3565b5081546000190160005b818111611d3157826001600160a01b0316848281548110611cfd57fe5b6000918252602090912001546001600160a01b03161415611d2957611d228482611e0d565b5050611d34565b600101611ce0565b50505b5050565b805160005b81811015611d3157611d6284848381518110611d5557fe5b6020026020010151611b69565b600101611d3d565b6000611d7530611f2f565b15905090565b805160005b81811015611d3157611da584848381518110611d9857fe5b6020026020010151611c5b565b600101611d80565b8154600090815b81811015611e0057836001600160a01b0316858281548110611dd257fe5b6000918252602090912001546001600160a01b03161415611df857600192505050611e07565b600101611db4565b5060009150505b92915050565b815460408051808201909152600c81526b4e6f7420696e20617272617960a01b60208201526000199091019081831115611e885760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611beb578181015183820152602001611bd3565b50815b81811015611efd57838160010181548110611ea257fe5b9060005260206000200160009054906101000a90046001600160a01b0316848281548110611ecc57fe5b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055600101611e8b565b5082805480611f0857fe5b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b3b15159056fe1789ae91440b0164ae6f1050010d10dce0541d93de02edee651f288d415247e46e657720676f7665726e616e63652073686f756c646e277420626520656d707479a3aa5aa3df32e732d8928583aa51a9477a8b8749e51399fe58b100ac870a44f29af2f49f0fe48e38ec4cd4438b994734c1e8051ec41e556337eb2fd61bf58d26c5a1532522c0866c8482478455367e2e3941b0f567dd82f9bb150fbbd0455bd1cc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f10b708564a065b529277110300c9a68b4a25145421116bc1f00fa575ff4d15d8496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564d9d16d34ffb15ba3a3d852f0d403e2ce1d691fb54de27ac87cd2f993f3ec330fd99af2b0a689fe2f5737745635b352dde433a9e6cfd600142867592ca7d83a55a264697066735822122036d4ed73c3f27e2267bddd256a561a6c70cdecf81e3e1b61960dee1872651b1f64736f6c634300060c00336e657720676f7665726e616e63652073686f756c646e277420626520656d707479",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101125760003560e01c8063256b5a02146101175780632b8bbbe81461013f5780633b7d09461461016b5780634892bdb6146101915780634f9f79b0146101ab57806350cc258e1461024c5780635aa6e675146102a45780635b3da44e146102c8578063670815a9146103eb578063687958621461040e5780637345afbe1461041657806373cf25f81461041e57806380c9419e1461054157806382638d551461055e57806388b5c6ef146105ff5780639dfa4e94146106a7578063ab033ea9146106d3578063c4c7ab84146106f9578063ceb68c23146107a1578063d914cd4b146107c7578063e1f01232146107ed578063e46cf10f1461088e575b600080fd5b61013d6004803603602081101561012d57600080fd5b50356001600160a01b031661092f565b005b61013d6004803603604081101561015557600080fd5b50803590602001356001600160a01b0316610a63565b61013d6004803603602081101561018157600080fd5b50356001600160a01b0316610b8e565b610199610cc0565b60408051918252519081900360200190f35b61013d600480360360208110156101c157600080fd5b810190602081018135600160201b8111156101db57600080fd5b8201836020820111156101ed57600080fd5b803590602001918460208302840111600160201b8311171561020e57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610cc5945050505050565b610254610db1565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610290578181015183820152602001610278565b505050509050019250505060405180910390f35b6102ac610e29565b604080516001600160a01b039092168252519081900360200190f35b61013d600480360360408110156102de57600080fd5b810190602081018135600160201b8111156102f857600080fd5b82018360208201111561030a57600080fd5b803590602001918460208302840111600160201b8311171561032b57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561037a57600080fd5b82018360208201111561038c57600080fd5b803590602001918460208302840111600160201b831117156103ad57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610e38945050505050565b6102ac6004803603604081101561040157600080fd5b508035906020013561106a565b61025461109f565b610199611115565b61013d6004803603604081101561043457600080fd5b810190602081018135600160201b81111561044e57600080fd5b82018360208201111561046057600080fd5b803590602001918460208302840111600160201b8311171561048157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156104d057600080fd5b8201836020820111156104e257600080fd5b803590602001918460208302840111600160201b8311171561050357600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061111a945050505050565b6102546004803603602081101561055757600080fd5b503561128c565b61013d6004803603602081101561057457600080fd5b810190602081018135600160201b81111561058e57600080fd5b8201836020820111156105a057600080fd5b803590602001918460208302840111600160201b831117156105c157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506112f8945050505050565b61013d6004803603604081101561061557600080fd5b81359190810190604081016020820135600160201b81111561063657600080fd5b82018360208201111561064857600080fd5b803590602001918460208302840111600160201b8311171561066957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506113c8945050505050565b61013d600480360360408110156106bd57600080fd5b50803590602001356001600160a01b03166114ab565b61013d600480360360208110156106e957600080fd5b50356001600160a01b03166115d4565b61013d6004803603604081101561070f57600080fd5b81359190810190604081016020820135600160201b81111561073057600080fd5b82018360208201111561074257600080fd5b803590602001918460208302840111600160201b8311171561076357600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061169f945050505050565b61013d600480360360208110156107b757600080fd5b50356001600160a01b0316611765565b61013d600480360360208110156107dd57600080fd5b50356001600160a01b0316611897565b61013d6004803603602081101561080357600080fd5b810190602081018135600160201b81111561081d57600080fd5b82018360208201111561082f57600080fd5b803590602001918460208302840111600160201b8311171561085057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506119c9945050505050565b61013d600480360360208110156108a457600080fd5b810190602081018135600160201b8111156108be57600080fd5b8201836020820111156108d057600080fd5b803590602001918460208302840111600160201b831117156108f157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611a99945050505050565b6000546001600160a01b0316158061095157506000546001600160a01b031633145b610993576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600260005260016020526109b560008051602061204583398151915282611b69565b8060026000815481106109c457fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600080516020611ff7833981519152600260405180806020018281038252838181548152602001915080548015610a5257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a34575b50509250505060405180910390a150565b6000546001600160a01b03161580610a8557506000546001600160a01b031633145b610ac7576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6000828152600160205260409020610adf9082611b69565b806002600081548110610aee57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600080516020611f77833981519152600260405180806020018281038252838181548152602001915080548015610b7c57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b5e575b50509250505060405180910390a15050565b6000546001600160a01b03161580610bb057506000546001600160a01b031633145b610bf2576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60016000819052602052610c14600080516020611fd783398151915282611c5b565b806002600081548110610c2357fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600080516020612065833981519152600260405180806020018281038252838181548152602001915080548015610a52576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610a345750509250505060405180910390a150565b600281565b6000546001600160a01b03161580610ce757506000546001600160a01b031633145b610d29576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60026000526001602052610d4b60008051602061204583398151915282611d38565b600080516020611ff7833981519152816040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610d9b578181015183820152602001610d83565b505050509050019250505060405180910390a150565b6002600052600160209081526000805160206120458339815191528054604080518285028101850190915281815260609390929190830182828015610e1f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e01575b5050505050905090565b6000546001600160a01b031681565b6000546001600160a01b03161580610e5a57506000546001600160a01b031633145b610e9c576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60016020526002600052600080516020611fd7833981519152805460008051602061204583398151915290158015610ed357508054155b610edc57600080fd5b8351835160005b82811015610f3d5784878281518110610ef857fe5b60209081029190910181015182546001808201855560009485529290932090920180546001600160a01b0319166001600160a01b039093169290921790915501610ee3565b50600080516020611f97833981519152866040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610f8e578181015183820152602001610f76565b505050509050019250505060405180910390a160005b81811015610ffe5783868281518110610fb957fe5b60209081029190910181015182546001808201855560009485529290932090920180546001600160a01b0319166001600160a01b039093169290921790915501610fa4565b50600080516020611ff7833981519152856040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561104f578181015183820152602001611037565b505050509050019250505060405180910390a1505050505050565b6001602052816000526040600020818154811061108357fe5b6000918252602090912001546001600160a01b03169150829050565b600160008190526020908152600080516020611fd78339815191528054604080518285028101850190915281815260609390929190830182828015610e1f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610e01575050505050905090565b600181565b6000546001600160a01b0316158061113c57506000546001600160a01b031633145b61117e576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600054600160a81b900460ff16806111995750611199611d6a565b806111ae5750600054600160a01b900460ff16155b6111e95760405162461bcd60e51b815260040180806020018281038252602e815260200180612017602e913960400191505060405180910390fd5b600054600160a81b900460ff16158015611220576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b611229336115d4565b600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b03191690556112738383610e38565b8015611287576000805460ff60a81b191690555b505050565b6000818152600160209081526040918290208054835181840281018401909452808452606093928301828280156112ec57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116112ce575b50505050509050919050565b6000546001600160a01b0316158061131a57506000546001600160a01b031633145b61135c576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600081905260205261137e600080516020611fd783398151915282611d7b565b604080516020808252835181830152835160008051602061206583398151915293859392839291830191818601910280838360008315610d9b578181015183820152602001610d83565b6000546001600160a01b031615806113ea57506000546001600160a01b031633145b61142c576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60008281526001602052604090206114449082611d38565b600080516020611f77833981519152816040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561149457818101518382015260200161147c565b505050509050019250505060405180910390a15050565b6000546001600160a01b031615806114cd57506000546001600160a01b031633145b61150f576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60008281526001602052604090206115279082611c5b565b80600260008154811061153657fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600080516020611f36833981519152600260405180806020018281038252838181548152602001915080548015610b7c576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610b5e5750509250505060405180910390a15050565b6000546001600160a01b031615806115f657506000546001600160a01b031633145b611638576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b03811661167d5760405162461bcd60e51b8152600401808060200182810382526021815260200180611f566021913960400191505060405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031615806116c157506000546001600160a01b031633145b611703576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600082815260016020526040902061171b9082611d7b565b6040805160208082528351818301528351600080516020611f368339815191529385939283929183019181860191028083836000831561149457818101518382015260200161147c565b6000546001600160a01b0316158061178757506000546001600160a01b031633145b6117c9576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600260005260016020526117eb60008051602061204583398151915282611c5b565b8060026000815481106117fa57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600080516020611fb7833981519152600260405180806020018281038252838181548152602001915080548015610a52576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610a345750509250505060405180910390a150565b6000546001600160a01b031615806118b957506000546001600160a01b031633145b6118fb576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600081905260205261191d600080516020611fd783398151915282611b69565b80600260008154811061192c57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600080516020611f97833981519152600260405180806020018281038252838181548152602001915080548015610a52576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610a345750509250505060405180910390a150565b6000546001600160a01b031615806119eb57506000546001600160a01b031633145b611a2d576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60016000819052602052611a4f600080516020611fd783398151915282611d38565b6040805160208082528351818301528351600080516020611f9783398151915293859392839291830191818601910280838360008315610d9b578181015183820152602001610d83565b6000546001600160a01b03161580611abb57506000546001600160a01b031633145b611afd576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60026000526001602052611b1f60008051602061204583398151915282611d7b565b6040805160208082528351818301528351600080516020611fb783398151915293859392839291830191818601910280838360008315610d9b578181015183820152602001610d83565b611b738282611dad565b156040518060400160405280601081526020016f416c726561647920696e20617272617960801b81525090611c265760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611beb578181015183820152602001611bd3565b50505050905090810190601f168015611c185780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5081546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b03909216919091179055565b611c658282611dad565b6040518060400160405280600c81526020016b4e6f7420696e20617272617960a01b81525090611cd65760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611beb578181015183820152602001611bd3565b5081546000190160005b818111611d3157826001600160a01b0316848281548110611cfd57fe5b6000918252602090912001546001600160a01b03161415611d2957611d228482611e0d565b5050611d34565b600101611ce0565b50505b5050565b805160005b81811015611d3157611d6284848381518110611d5557fe5b6020026020010151611b69565b600101611d3d565b6000611d7530611f2f565b15905090565b805160005b81811015611d3157611da584848381518110611d9857fe5b6020026020010151611c5b565b600101611d80565b8154600090815b81811015611e0057836001600160a01b0316858281548110611dd257fe5b6000918252602090912001546001600160a01b03161415611df857600192505050611e07565b600101611db4565b5060009150505b92915050565b815460408051808201909152600c81526b4e6f7420696e20617272617960a01b60208201526000199091019081831115611e885760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611beb578181015183820152602001611bd3565b50815b81811015611efd57838160010181548110611ea257fe5b9060005260206000200160009054906101000a90046001600160a01b0316848281548110611ecc57fe5b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055600101611e8b565b5082805480611f0857fe5b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b3b15159056fe1789ae91440b0164ae6f1050010d10dce0541d93de02edee651f288d415247e46e657720676f7665726e616e63652073686f756c646e277420626520656d707479a3aa5aa3df32e732d8928583aa51a9477a8b8749e51399fe58b100ac870a44f29af2f49f0fe48e38ec4cd4438b994734c1e8051ec41e556337eb2fd61bf58d26c5a1532522c0866c8482478455367e2e3941b0f567dd82f9bb150fbbd0455bd1cc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f10b708564a065b529277110300c9a68b4a25145421116bc1f00fa575ff4d15d8496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564d9d16d34ffb15ba3a3d852f0d403e2ce1d691fb54de27ac87cd2f993f3ec330fd99af2b0a689fe2f5737745635b352dde433a9e6cfd600142867592ca7d83a55a264697066735822122036d4ed73c3f27e2267bddd256a561a6c70cdecf81e3e1b61960dee1872651b1f64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6805,
        "contract": "contracts/ContractRegistry.sol:ContractRegistry",
        "label": "governance",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 361,
        "contract": "contracts/ContractRegistry.sol:ContractRegistry",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 364,
        "contract": "contracts/ContractRegistry.sol:ContractRegistry",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5475,
        "contract": "contracts/ContractRegistry.sol:ContractRegistry",
        "label": "addresses",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 5508,
        "contract": "contracts/ContractRegistry.sol:ContractRegistry",
        "label": "singleAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}