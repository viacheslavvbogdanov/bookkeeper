{
  "address": "0x51c3177CFC28d334E07949d45FC00812e27e5bF0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_keyTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pricingTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_outputToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOutputToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOutputToken",
          "type": "address"
        }
      ],
      "name": "DefinedOutputChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newKeyToken",
          "type": "address"
        }
      ],
      "name": "KeyTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "keyToken",
          "type": "address"
        }
      ],
      "name": "KeyTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPricingToken",
          "type": "address"
        }
      ],
      "name": "PricingTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pricingToken",
          "type": "address"
        }
      ],
      "name": "PricingTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRegistry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldRegistry",
          "type": "address"
        }
      ],
      "name": "RegistryChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newSwap",
          "type": "address"
        }
      ],
      "name": "SwapAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newSwap",
          "type": "address"
        }
      ],
      "name": "SwapRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ONE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newToken",
          "type": "address"
        }
      ],
      "name": "addKeyToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "newTokens",
          "type": "address[]"
        }
      ],
      "name": "addKeyTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newToken",
          "type": "address"
        }
      ],
      "name": "addPricingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "newTokens",
          "type": "address[]"
        }
      ],
      "name": "addPricingTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSwap",
          "type": "address"
        }
      ],
      "name": "addSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "newSwaps",
          "type": "address[]"
        }
      ],
      "name": "addSwaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOutputToken",
          "type": "address"
        }
      ],
      "name": "changeDefinedOutput",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "checkKeyToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "checkPricingToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "swap",
          "type": "address"
        }
      ],
      "name": "checkSwap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "computePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "definedOutputToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "keyTokenList",
          "type": "address[]"
        }
      ],
      "name": "getLargestPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getLargestPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getSwapForPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_keyTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pricingTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_outputToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "keyTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_inputToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_replacementToken",
          "type": "address"
        }
      ],
      "name": "modifyReplacementTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pricingTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "keyToken",
          "type": "address"
        }
      ],
      "name": "removeKeyToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pricingToken",
          "type": "address"
        }
      ],
      "name": "removePricingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "swap",
          "type": "address"
        }
      ],
      "name": "removeSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "newSwaps",
          "type": "address[]"
        }
      ],
      "name": "setSwaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "swaps",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x122319fae4350ce400d67257c947c55868e6f68b7a41f1a02dce8f31a46c27a4",
  "receipt": {
    "to": null,
    "from": "0x1AA16eAF73c9761bC18748E3A47a0c37403fc618",
    "contractAddress": "0x51c3177CFC28d334E07949d45FC00812e27e5bF0",
    "transactionIndex": 100,
    "gasUsed": "2072692",
    "logsBloom": "0x
    "blockHash": "0xf4211045d7a61e7b025588ff964ea19e573b58670c74bedab5a449814aaae99f",
    "transactionHash": "0x122319fae4350ce400d67257c947c55868e6f68b7a41f1a02dce8f31a46c27a4",
    "logs": [],
    "blockNumber": 10505869,
    "cumulativeGasUsed": "15186351",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d",
      "0x2170Ed0880ac9A755fd29B2688956BD959F933F8",
      "0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3",
      "0x55d398326f99059fF775485246999027B3197955",
      "0x23396cF899Ca06c4472205fC903bDB4de249D6fC",
      "0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c",
      "0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56",
      "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
      "0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7",
      "0x111111111117dC0aa78b770fA6A738034120C302"
    ],
    [
      "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
      "0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56",
      "0x23396cF899Ca06c4472205fC903bDB4de249D6fC",
      "0x55d398326f99059fF775485246999027B3197955",
      "0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d",
      "0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7",
      "0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3"
    ],
    "0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56"
  ],
  "solcInputHash": "b1169acba278be7558e4cfb8240c572a",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_keyTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pricingTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_outputToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOutputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOutputToken\",\"type\":\"address\"}],\"name\":\"DefinedOutputChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newKeyToken\",\"type\":\"address\"}],\"name\":\"KeyTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keyToken\",\"type\":\"address\"}],\"name\":\"KeyTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPricingToken\",\"type\":\"address\"}],\"name\":\"PricingTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pricingToken\",\"type\":\"address\"}],\"name\":\"PricingTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRegistry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRegistry\",\"type\":\"address\"}],\"name\":\"RegistryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSwap\",\"type\":\"address\"}],\"name\":\"SwapAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSwap\",\"type\":\"address\"}],\"name\":\"SwapRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"addKeyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newTokens\",\"type\":\"address[]\"}],\"name\":\"addKeyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"addPricingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newTokens\",\"type\":\"address[]\"}],\"name\":\"addPricingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSwap\",\"type\":\"address\"}],\"name\":\"addSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newSwaps\",\"type\":\"address[]\"}],\"name\":\"addSwaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOutputToken\",\"type\":\"address\"}],\"name\":\"changeDefinedOutput\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkKeyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkPricingToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swap\",\"type\":\"address\"}],\"name\":\"checkSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"computePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"definedOutputToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"keyTokenList\",\"type\":\"address[]\"}],\"name\":\"getLargestPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getLargestPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getSwapForPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_keyTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pricingTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_outputToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"keyTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_replacementToken\",\"type\":\"address\"}],\"name\":\"modifyReplacementTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pricingTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keyToken\",\"type\":\"address\"}],\"name\":\"removeKeyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pricingToken\",\"type\":\"address\"}],\"name\":\"removePricingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swap\",\"type\":\"address\"}],\"name\":\"removeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newSwaps\",\"type\":\"address[]\"}],\"name\":\"setSwaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swaps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OracleBase.sol\":\"OracleBase\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x9abeffe138f098b16557187383ba0f9e8503602fa95cd668132986ee115237ed\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.16;\\r\\n\\r\\ncontract Governable {\\r\\n\\r\\n  address public governance;\\r\\n\\r\\n  constructor(address _governance) public {\\r\\n    setGovernance(_governance);\\r\\n  }\\r\\n\\r\\n  modifier onlyGovernance() {\\r\\n    // pass check while governance might not initialized (i.e. in proxy)\\r\\n    require((governance==address(0)) || (msg.sender==governance), \\\"Not governance\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function setGovernance(address _governance) public onlyGovernance {\\r\\n    require(_governance != address(0), \\\"new governance shouldn't be empty\\\");\\r\\n    governance = _governance;\\r\\n  }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xdcde2e004262672837ce7160d44cf33d6ed9cbb9245af113d041ab54fa467a21\",\"license\":\"MIT\"},\"contracts/OracleBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\r\\n\\r\\nimport \\\"./Governable.sol\\\";\\r\\nimport \\\"./SwapBase.sol\\\";\\r\\n\\r\\nimport \\\"./UniSwap.sol\\\";\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ncontract OracleBase is Governable, Initializable  {\\r\\n\\r\\n  using SafeERC20 for IERC20;\\r\\n  using Address for address;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  uint256 public constant PRECISION_DECIMALS = 18;\\r\\n  uint256 public constant ONE = 10**PRECISION_DECIMALS;\\r\\n\\r\\n  //The defined output token is the unit in which prices of input tokens are given.\\r\\n  bytes32 internal constant _DEFINED_OUTPUT_TOKEN_SLOT = bytes32(uint256(keccak256(\\\"eip1967.OracleBase.definedOutputToken\\\")) - 1);\\r\\n\\r\\n  //Key tokens are used to find liquidity for any given token on Uni, Sushi and Curve.\\r\\n  address[] public keyTokens;\\r\\n\\r\\n  //Pricing tokens are Key tokens with good liquidity with the defined output token on Uniswap.\\r\\n  address[] public pricingTokens;\\r\\n\\r\\n  mapping(address => address) replacementTokens;\\r\\n\\r\\n  //Swap platforms addresses\\r\\n  address[] public swaps;\\r\\n\\r\\n  modifier validKeyToken(address keyToken){\\r\\n      require(checkKeyToken(keyToken), \\\"Not a Key Token\\\");\\r\\n      _;\\r\\n  }\\r\\n  modifier validPricingToken(address pricingToken){\\r\\n      require(checkPricingToken(pricingToken), \\\"Not a Pricing Token\\\");\\r\\n      _;\\r\\n  }\\r\\n  modifier validSwap(address swap){\\r\\n      require(checkSwap(swap), \\\"Not a Swap\\\");\\r\\n      _;\\r\\n  }\\r\\n\\r\\n  event RegistryChanged(address newRegistry, address oldRegistry);\\r\\n  event KeyTokenAdded(address newKeyToken);\\r\\n  event PricingTokenAdded(address newPricingToken);\\r\\n  event SwapAdded(address newSwap);\\r\\n  event KeyTokenRemoved(address keyToken);\\r\\n  event PricingTokenRemoved(address pricingToken);\\r\\n  event SwapRemoved(address newSwap);\\r\\n  event DefinedOutputChanged(address newOutputToken, address oldOutputToken);\\r\\n\\r\\n  // This contract is deployed with proxy, but also can be deployed without proxy\\r\\n  // When it deployed witout proxy - then constructor only is used, so you have to add tokens later\\r\\n  // Adding tokens in constructor removed due gas optimisation for deploy to mainnet\\r\\n  // When with proxy - then initialze() called by deploy script (../deploy/01_Oracle.js)\\r\\n  constructor(address[] memory _keyTokens, address[] memory _pricingTokens, address _outputToken)\\r\\n  public Governable(msg.sender) {\\r\\n    Governable.setGovernance(msg.sender);\\r\\n  }\\r\\n\\r\\n  function initialize(address[] memory _keyTokens, address[] memory _pricingTokens, address _outputToken)\\r\\n  public onlyGovernance initializer {\\r\\n    Governable.setGovernance(msg.sender);\\r\\n\\r\\n    addKeyTokens(_keyTokens);\\r\\n    addPricingTokens(_pricingTokens);\\r\\n    changeDefinedOutput(_outputToken);\\r\\n    // after contract deploy you have to set swaps\\r\\n  }\\r\\n\\r\\n  function addSwap(address newSwap) public onlyGovernance {\\r\\n    require(!checkSwap(newSwap), \\\"Already a swap\\\");\\r\\n    swaps.push(newSwap);\\r\\n    emit SwapAdded(newSwap);\\r\\n  }\\r\\n\\r\\n  function addSwaps(address[] memory newSwaps) public onlyGovernance {\\r\\n    for(uint i=0; i<newSwaps.length; i++) {\\r\\n      if (!checkSwap(newSwaps[i])) addSwap(newSwaps[i]);\\r\\n    }\\r\\n  }\\r\\n  function setSwaps(address[] memory newSwaps) external onlyGovernance {\\r\\n    delete swaps;\\r\\n    addSwaps(newSwaps);\\r\\n  }\\r\\n\\r\\n  function addKeyToken(address newToken) public onlyGovernance {\\r\\n    require(!checkKeyToken(newToken), \\\"Already a key token\\\");\\r\\n    keyTokens.push(newToken);\\r\\n    emit KeyTokenAdded(newToken);\\r\\n  }\\r\\n\\r\\n  function addKeyTokens(address[] memory newTokens) public onlyGovernance {\\r\\n    for(uint i=0; i<newTokens.length; i++) {\\r\\n      if (!checkKeyToken(newTokens[i])) addKeyToken(newTokens[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function addPricingToken(address newToken) public onlyGovernance validKeyToken(newToken) {\\r\\n    require(!checkPricingToken(newToken), \\\"Already a pricing token\\\");\\r\\n    pricingTokens.push(newToken);\\r\\n    emit PricingTokenAdded(newToken);\\r\\n  }\\r\\n\\r\\n  function addPricingTokens(address[] memory newTokens) public onlyGovernance {\\r\\n    for(uint i=0; i<newTokens.length; i++) {\\r\\n      if (!checkPricingToken(newTokens[i])) addPricingToken(newTokens[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function removeAddressFromArray(address adr, address[] storage array) internal {\\r\\n    uint i;\\r\\n    for (i=0; i<array.length; i++) {\\r\\n      if (adr == array[i]) break;\\r\\n    }\\r\\n\\r\\n    while (i<array.length-1) {\\r\\n      array[i] = array[i+1];\\r\\n      i++;\\r\\n    }\\r\\n    array.pop();\\r\\n  }\\r\\n\\r\\n  function removeKeyToken(address keyToken) external onlyGovernance validKeyToken(keyToken) {\\r\\n    removeAddressFromArray(keyToken, keyTokens);\\r\\n    emit KeyTokenRemoved(keyToken);\\r\\n\\r\\n    if (checkPricingToken(keyToken)) {\\r\\n      removePricingToken(keyToken);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function removePricingToken(address pricingToken) public onlyGovernance validPricingToken(pricingToken) {\\r\\n    removeAddressFromArray(pricingToken, pricingTokens );\\r\\n    emit PricingTokenRemoved(pricingToken);\\r\\n  }\\r\\n\\r\\n  function removeSwap(address swap) public onlyGovernance validSwap(swap) {\\r\\n    removeAddressFromArray(swap, swaps);\\r\\n    emit SwapRemoved(swap);\\r\\n  }\\r\\n\\r\\n  function definedOutputToken() public view returns (address value) {\\r\\n    bytes32 slot = _DEFINED_OUTPUT_TOKEN_SLOT;\\r\\n    assembly {\\r\\n      value := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function changeDefinedOutput(address newOutputToken) public onlyGovernance validKeyToken(newOutputToken) {\\r\\n    require(newOutputToken != address(0), \\\"zero address\\\");\\r\\n    address oldOutputToken = definedOutputToken();\\r\\n    bytes32 slot = _DEFINED_OUTPUT_TOKEN_SLOT;\\r\\n    assembly {\\r\\n      sstore(slot, newOutputToken)\\r\\n    }\\r\\n    emit DefinedOutputChanged(newOutputToken, oldOutputToken);\\r\\n  }\\r\\n\\r\\n  function modifyReplacementTokens(address _inputToken, address _replacementToken) external onlyGovernance {\\r\\n    replacementTokens[_inputToken] = _replacementToken;\\r\\n  }\\r\\n\\r\\n  //Main function of the contract. Gives the price of a given token in the defined output token.\\r\\n  //The contract allows for input tokens to be LP tokens from Uniswap, Sushiswap, Curve and 1Inch.\\r\\n  //In case of LP token, the underlying tokens will be found and valued to get the price.\\r\\n  function getPrice(address token) external view returns (uint256) {\\r\\n    if (token == definedOutputToken())\\r\\n      return (ONE);\\r\\n\\r\\n    // if the token exists in the mapping, we'll swap it for the replacement\\r\\n    // example btcb/renbtc pool -> btcb\\r\\n    if (replacementTokens[token] != address(0)) {\\r\\n      token = replacementTokens[token];\\r\\n    }\\r\\n\\r\\n    uint256 tokenPrice;\\r\\n    uint256 tokenValue;\\r\\n    uint256 price = 0;\\r\\n    uint256 i;\\r\\n    address swap = getSwapForPool(token);\\r\\n    if (swap!=address(0)) {\\r\\n      (address[] memory tokens, uint256[] memory amounts) = SwapBase(swap).getUnderlying(token);\\r\\n      for (i=0;i<tokens.length;i++) {\\r\\n        if (tokens[i] == address(0)) break;\\r\\n        tokenPrice = computePrice(tokens[i]);\\r\\n        if (tokenPrice == 0) return 0;\\r\\n        tokenValue = tokenPrice *amounts[i]/ONE;\\r\\n        price += tokenValue;\\r\\n      }\\r\\n      return price;\\r\\n    } else {\\r\\n      return computePrice(token);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getSwapForPool(address token) public view returns(address) {\\r\\n    for (uint i=0; i<swaps.length; i++ ) {\\r\\n      if (SwapBase(swaps[i]).isPool(token)) {\\r\\n        return swaps[i];\\r\\n      }\\r\\n    }\\r\\n    return address(0);\\r\\n  }\\r\\n\\r\\n  //General function to compute the price of a token vs the defined output token.\\r\\n  function computePrice(address token) public view returns (uint256) {\\r\\n    uint256 price;\\r\\n    if (token == definedOutputToken()) {\\r\\n      price = ONE;\\r\\n    } else if (token == address(0)) {\\r\\n      price = 0;\\r\\n    } else {\\r\\n      (address swap, address keyToken, address pool) = getLargestPool(token,keyTokens);\\r\\n      uint256 priceVsKeyToken;\\r\\n      uint256 keyTokenPrice;\\r\\n      if (keyToken == address(0)) {\\r\\n        price = 0;\\r\\n      } else {\\r\\n        priceVsKeyToken = SwapBase(swap).getPriceVsToken(token,keyToken,pool);\\r\\n        keyTokenPrice = getKeyTokenPrice(keyToken);\\r\\n        price = priceVsKeyToken*keyTokenPrice/ONE;\\r\\n      }\\r\\n    }\\r\\n    return (price);\\r\\n  }\\r\\n\\r\\n  //Checks the results of the different largest pool functions and returns the largest.\\r\\n  function getLargestPool(address token) public view returns (address, address, address) {\\r\\n    return getLargestPool(token, keyTokens);\\r\\n  }\\r\\n\\r\\n  function getLargestPool(address token, address[] memory keyTokenList) public view returns (address, address, address) {\\r\\n    address largestKeyToken = address(0);\\r\\n    address largestPool = address(0);\\r\\n    uint largestPoolSize = 0;\\r\\n    SwapBase largestSwap;\\r\\n    for (uint i=0;i<swaps.length;i++) {\\r\\n      SwapBase swap = SwapBase(swaps[i]);\\r\\n      (address swapLargestKeyToken, address swapLargestPool, uint swapLargestPoolSize) = swap.getLargestPool(token, keyTokenList);\\r\\n      if (swapLargestPoolSize>largestPoolSize) {\\r\\n        largestSwap = swap;\\r\\n        largestKeyToken = swapLargestKeyToken;\\r\\n        largestPool = swapLargestPool;\\r\\n        largestPoolSize = swapLargestPoolSize;\\r\\n      }\\r\\n    }\\r\\n    return (address(largestSwap), largestKeyToken, largestPool);\\r\\n  }\\r\\n\\r\\n  //Gives the price of a given keyToken.\\r\\n  function getKeyTokenPrice(address token) internal view returns (uint256) {\\r\\n    bool isPricingToken = checkPricingToken(token);\\r\\n    uint256 price;\\r\\n    uint256 priceVsPricingToken;\\r\\n    if (token == definedOutputToken()) {\\r\\n      price = ONE;\\r\\n    } else if (isPricingToken) {\\r\\n      price = SwapBase(swaps[0]).getPriceVsToken(token, definedOutputToken(), address(0)); // first swap is used\\r\\n      // as at original contract was used\\r\\n      // mainnet: UniSwap OracleMainnet_old.sol:641\\r\\n      // bsc: Pancake OracleBSC_old.sol:449\\r\\n    } else {\\r\\n      uint256 pricingTokenPrice;\\r\\n      (address swap, address pricingToken, address pricingPool) = getLargestPool(token,pricingTokens);\\r\\n      priceVsPricingToken = SwapBase(swap).getPriceVsToken(token, pricingToken, pricingPool);\\r\\n//      pricingTokenPrice = (pricingToken == definedOutputToken())? ONE : SwapBase(swap).getPriceVsToken(pricingToken,definedOutputToken(),pricingPool);\\r\\n      // Like in original contract we use UniSwap - it must be first swap at the list (swaps[0])\\r\\n      // See OracleMainnet_old.js:634, OracleBSC_old.sol:458\\r\\n      //TODO improve this part?\\r\\n      pricingTokenPrice = (pricingToken == definedOutputToken())? ONE : SwapBase(swaps[0]).getPriceVsToken(pricingToken,definedOutputToken(),pricingPool);\\r\\n      price = priceVsPricingToken*pricingTokenPrice/ONE;\\r\\n    }\\r\\n    return price;\\r\\n  }\\r\\n\\r\\n  //Checks if a given token is in the keyTokens list.\\r\\n  function addressInArray(address adr, address[] storage array) internal view returns (bool) {\\r\\n    for (uint i=0; i<array.length; i++)\\r\\n      if (adr == array[i]) return true;\\r\\n\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  //Checks if a given token is in the pricingTokens list.\\r\\n  function checkPricingToken(address token) public view returns (bool) {\\r\\n    return addressInArray(token, pricingTokens);\\r\\n  }\\r\\n\\r\\n  //Checks if a given token is in the keyTokens list.\\r\\n  function checkKeyToken(address token) public view returns (bool) {\\r\\n    return addressInArray(token, keyTokens);\\r\\n  }\\r\\n\\r\\n  //Checks if a given token is in the swaps list.\\r\\n  function checkSwap(address swap) public view returns (bool) {\\r\\n    return addressInArray(swap, swaps);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x93638958acb6b2773527a61cbe8caf34d8eada9dca25a24b0a4001614ba1d027\",\"license\":\"MIT\"},\"contracts/SwapBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nabstract contract SwapBase {\\r\\n\\r\\n  using Address for address;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  uint256 public constant PRECISION_DECIMALS = 18;\\r\\n\\r\\n  address factoryAddress;\\r\\n\\r\\n  constructor(address _factoryAddress) public {\\r\\n    require(_factoryAddress!=address(0), \\\"Factory must be set\\\");\\r\\n    factoryAddress = _factoryAddress;\\r\\n    initializeFactory();\\r\\n  }\\r\\n\\r\\n  function initializeFactory() internal virtual;\\r\\n\\r\\n  /// @dev Check what token is pool of this Swap\\r\\n  function isPool(address token) public virtual view returns(bool);\\r\\n\\r\\n  /// @dev Get underlying tokens and amounts\\r\\n  function getUnderlying(address token) public virtual view returns (address[] memory, uint256[] memory);\\r\\n\\r\\n  /// @dev Gives a pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\\r\\n  function getLargestPool(address token, address[] memory tokenList) public virtual view returns (address, address, uint256);\\r\\n  // return (largestKeyToken, largestPoolAddress, largestPoolSize);\\r\\n\\r\\n  /// @dev Generic function giving the price of a given token vs another given token\\r\\n  function getPriceVsToken(address token0, address token1, address poolAddress) public virtual view returns (uint256) ;\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x4914153e3de514e5dc6231a9bcf256e6f30518759f580d33f18b0a3621d98e82\",\"license\":\"MIT\"},\"contracts/UniSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"./interface/uniswap/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./interface/uniswap/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./SwapBase.sol\\\";\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ncontract UniSwap is SwapBase {\\r\\n\\r\\n  IUniswapV2Factory uniswapFactory;\\r\\n\\r\\n  constructor(address _factoryAddress) SwapBase(_factoryAddress) public {\\r\\n\\r\\n  }\\r\\n\\r\\n  function initializeFactory() internal virtual override {\\r\\n    uniswapFactory = IUniswapV2Factory(factoryAddress);\\r\\n  }\\r\\n\\r\\n  function checkFactory(IUniswapV2Pair pair, address compareFactory) internal view returns (bool) {\\r\\n    bool check;\\r\\n    try pair.factory{gas: 3000}() returns (address factory) {\\r\\n      check = (factory == compareFactory);\\r\\n    } catch {\\r\\n      check = false;\\r\\n    }\\r\\n    return check;\\r\\n  }\\r\\n\\r\\n  /// @dev Check what token is pool of this Swap\\r\\n  function isPool(address token) public virtual override view returns(bool){\\r\\n    IUniswapV2Pair pair = IUniswapV2Pair(token);\\r\\n    return checkFactory(pair, factoryAddress);\\r\\n  }\\r\\n\\r\\n  /// @dev Get underlying tokens and amounts\\r\\n  function getUnderlying(address token) public virtual override view returns (address[] memory, uint256[] memory){\\r\\n    IUniswapV2Pair pair = IUniswapV2Pair(token);\\r\\n    address[] memory tokens  = new address[](2);\\r\\n    uint256[] memory amounts = new uint256[](2);\\r\\n    tokens[0] = pair.token0();\\r\\n    tokens[1] = pair.token1();\\r\\n    uint256 token0Decimals = ERC20(tokens[0]).decimals();\\r\\n    uint256 token1Decimals = ERC20(tokens[1]).decimals();\\r\\n    uint256 supplyDecimals = ERC20(token).decimals();\\r\\n    (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\\r\\n    uint256 totalSupply = pair.totalSupply();\\r\\n    if (reserve0 == 0 || reserve1 == 0 || totalSupply == 0) {\\r\\n      amounts[0] = 0;\\r\\n      amounts[1] = 0;\\r\\n      return (tokens, amounts);\\r\\n    }\\r\\n    amounts[0] = reserve0*10**(supplyDecimals-token0Decimals+PRECISION_DECIMALS)/totalSupply;\\r\\n    amounts[1] = reserve1*10**(supplyDecimals-token1Decimals+PRECISION_DECIMALS)/totalSupply;\\r\\n    return (tokens, amounts);\\r\\n  }\\r\\n\\r\\n  /// @dev Returns pool size\\r\\n  function getPoolSize(address pairAddress, address token) internal view returns(uint256){\\r\\n    IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\r\\n    address token0 = pair.token0();\\r\\n    (uint112 poolSize0, uint112 poolSize1,) = pair.getReserves();\\r\\n    uint256 poolSize = (token==token0)? poolSize0:poolSize1;\\r\\n    return poolSize;\\r\\n  }\\r\\n\\r\\n  /// @dev Gives a pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\\r\\n  function getLargestPool(address token, address[] memory tokenList) public virtual override view returns (address, address, uint256){\\r\\n    uint256 largestPoolSize = 0;\\r\\n    address largestKeyToken;\\r\\n    address largestPool;\\r\\n    uint256 poolSize;\\r\\n    uint256 i;\\r\\n    for (i=0;i<tokenList.length;i++) {\\r\\n      address poolAddress = uniswapFactory.getPair(token,tokenList[i]);\\r\\n      poolSize = poolAddress !=address(0) ? getPoolSize(poolAddress, token) : 0;\\r\\n      if (poolSize > largestPoolSize) {\\r\\n        largestKeyToken = tokenList[i];\\r\\n        largestPool = poolAddress;\\r\\n        largestPoolSize = poolSize;\\r\\n      }\\r\\n    }\\r\\n    return (largestKeyToken, largestPool, largestPoolSize);\\r\\n  }\\r\\n\\r\\n  /// @dev Generic function giving the price of a given token vs another given token\\r\\n  function getPriceVsToken(address token0, address token1, address /*poolAddress*/) public virtual override view returns (uint256){\\r\\n    address pairAddress = uniswapFactory.getPair(token0,token1);\\r\\n    IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\r\\n    (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\\r\\n    uint256 token0Decimals = ERC20(token0).decimals();\\r\\n    uint256 token1Decimals = ERC20(token1).decimals();\\r\\n    uint256 price;\\r\\n    if (token0 == pair.token0()) {\\r\\n      price = (reserve1*10**(token0Decimals-token1Decimals+PRECISION_DECIMALS))/reserve0;\\r\\n    } else {\\r\\n      price = (reserve0*10**(token0Decimals-token1Decimals+PRECISION_DECIMALS))/reserve1;\\r\\n    }\\r\\n    return price;\\r\\n  }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x7c954f3da52c5ba2e30f4d59c1fc991754da8328b71a9bd4a7c9e7375481e0e4\",\"license\":\"MIT\"},\"contracts/interface/uniswap/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n  function allPairs(uint) external view returns (address pair);\\r\\n  function allPairsLength() external view returns (uint);\\r\\n\\r\\n  function feeTo() external view returns (address);\\r\\n  function feeToSetter() external view returns (address);\\r\\n\\r\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\",\"keccak256\":\"0xc51e6f2073f3b5ac00c5b07da873df7f2636925f1999159371ef4a048bc4df90\",\"license\":\"MIT\"},\"contracts/interface/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n *Submitted for verification at Etherscan.io on 2020-05-05\\r\\n*/\\r\\n\\r\\n// File: contracts/interfaces/IUniswapV2Pair.sol\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\",\"keccak256\":\"0x7ef2a5f00e724edc49c2fe177c57d7a05b018aa244c457705edc89c5a759d6cd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200264738038062002647833981810160405260608110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82518660208202830111640100000000821117156200008c57600080fd5b82525081516020918201928201910280838360005b83811015620000bb578181015183820152602001620000a1565b5050505090500160405260200180516040519392919084640100000000821115620000e557600080fd5b908301906020820185811115620000fb57600080fd5b82518660208202830111640100000000821117156200011957600080fd5b82525081516020918201928201910280838360005b83811015620001485781810151838201526020016200012e565b505050509190910160405250602001519150339050620001688162000188565b506200017f336200018860201b620016381760201c565b50505062000257565b6000546001600160a01b03161580620001ab57506000546001600160a01b031633145b620001ee576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b038116620002355760405162461bcd60e51b8152600401808060200182810382526021815260200180620026266021913960400191505060405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6123bf80620002676000396000f3fe608060405234801561001057600080fd5b506004361061015f5760003560e01c8063156d2ab1146101645780631e5eef5b14610207578063225f879c1461023557806327ed15591461025b57806341976e09146102fc57806343ab662c1461033457806349a40e0f1461036e5780635274ac3f146103a75780635aa6e675146104d55780635e72f13a146104dd5780635eb55df8146105b957806360ebfee61461065a5780638225458d1461066257806392c36b17146106885780639b4f2278146106ae578063a52cd773146106d4578063ab033ea9146106fa578063ab6e623a14610720578063c2ee3a0814610746578063c95da6511461074e578063cabbd364146107ef578063d07a97d914610815578063d47e25db1461083b578063db5a065e14610843578063ddebf79514610869578063deed7a5b1461088f578063e3616394146108ac578063e6f61472146108d2578063f09c5829146108f8575b600080fd5b6102056004803603602081101561017a57600080fd5b810190602081018135600160201b81111561019457600080fd5b8201836020820111156101a657600080fd5b803590602001918460208302840111600160201b831117156101c757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610915945050505050565b005b6102056004803603604081101561021d57600080fd5b506001600160a01b03813581169160200135166109cd565b6102056004803603602081101561024b57600080fd5b50356001600160a01b0316610a5f565b6102056004803603602081101561027157600080fd5b810190602081018135600160201b81111561028b57600080fd5b82018360208201111561029d57600080fd5b803590602001918460208302840111600160201b831117156102be57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610b97945050505050565b6103226004803603602081101561031257600080fd5b50356001600160a01b0316610c4b565b60408051918252519081900360200190f35b61035a6004803603602081101561034a57600080fd5b50356001600160a01b0316610f4b565b604080519115158252519081900360200190f35b61038b6004803603602081101561038457600080fd5b5035610f5e565b604080516001600160a01b039092168252519081900360200190f35b610205600480360360608110156103bd57600080fd5b810190602081018135600160201b8111156103d757600080fd5b8201836020820111156103e957600080fd5b803590602001918460208302840111600160201b8311171561040a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561045957600080fd5b82018360208201111561046b57600080fd5b803590602001918460208302840111600160201b8311171561048c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160a01b03169150610f859050565b61038b6110c9565b61058e600480360360408110156104f357600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561051d57600080fd5b82018360208201111561052f57600080fd5b803590602001918460208302840111600160201b8311171561055057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506110d8945050505050565b604080516001600160a01b039485168152928416602084015292168183015290519081900360600190f35b610205600480360360208110156105cf57600080fd5b810190602081018135600160201b8111156105e957600080fd5b8201836020820111156105fb57600080fd5b803590602001918460208302840111600160201b8311171561061c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611228945050505050565b6103226112a4565b6102056004803603602081101561067857600080fd5b50356001600160a01b03166112a9565b6102056004803603602081101561069e57600080fd5b50356001600160a01b03166113a9565b610205600480360360208110156106c457600080fd5b50356001600160a01b03166114a0565b61035a600480360360208110156106ea57600080fd5b50356001600160a01b031661162b565b6102056004803603602081101561071057600080fd5b50356001600160a01b0316611638565b6102056004803603602081101561073657600080fd5b50356001600160a01b0316611703565b610322611812565b6102056004803603602081101561076457600080fd5b810190602081018135600160201b81111561077e57600080fd5b82018360208201111561079057600080fd5b803590602001918460208302840111600160201b831117156107b157600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061181e945050505050565b6102056004803603602081101561080557600080fd5b50356001600160a01b03166118d2565b6102056004803603602081101561082b57600080fd5b50356001600160a01b0316611a38565b61038b611b6b565b61038b6004803603602081101561085957600080fd5b50356001600160a01b0316611b7e565b6103226004803603602081101561087f57600080fd5b50356001600160a01b0316611c59565b61038b600480360360208110156108a557600080fd5b5035611dda565b61058e600480360360208110156108c257600080fd5b50356001600160a01b0316611de7565b61035a600480360360208110156108e857600080fd5b50356001600160a01b0316611e5b565b61038b6004803603602081101561090e57600080fd5b5035611e68565b6000546001600160a01b0316158061093757506000546001600160a01b031633145b610979576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60005b81518110156109c9576109a182828151811061099457fe5b6020026020010151610f4b565b6109c1576109c18282815181106109b457fe5b6020026020010151611a38565b60010161097c565b5050565b6000546001600160a01b031615806109ef57506000546001600160a01b031633145b610a31576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b03918216600090815260036020526040902080546001600160a01b03191691909216179055565b6000546001600160a01b03161580610a8157506000546001600160a01b031633145b610ac3576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b610acc81611e5b565b15610b14576040805162461bcd60e51b815260206004820152601360248201527220b63932b0b23c90309035b2bc903a37b5b2b760691b604482015290519081900360640190fd5b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f0a56c88bece4295107fd874c5ddacbb849aebef9d72fc42d81dd2b5caeaec1c69181900360200190a150565b6000546001600160a01b03161580610bb957506000546001600160a01b031633145b610bfb576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60005b81518110156109c957610c23828281518110610c1657fe5b602002602001015161162b565b610c4357610c43828281518110610c3657fe5b60200260200101516114a0565b600101610bfe565b6000610c55611b6b565b6001600160a01b0316826001600160a01b03161415610c7d5750670de0b6b3a7640000610f46565b6001600160a01b038281166000908152600360205260409020541615610cbc576001600160a01b03918216600090815260036020526040902054909116905b60008060008080610ccc87611b7e565b90506001600160a01b03811615610f3557606080826001600160a01b0316634e89a7118a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060006040518083038186803b158015610d2d57600080fd5b505afa158015610d41573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015610d6a57600080fd5b8101908080516040519392919084600160201b821115610d8957600080fd5b908301906020820185811115610d9e57600080fd5b82518660208202830111600160201b82111715610dba57600080fd5b82525081516020918201928201910280838360005b83811015610de7578181015183820152602001610dcf565b5050505090500160405260200180516040519392919084600160201b821115610e0f57600080fd5b908301906020820185811115610e2457600080fd5b82518660208202830111600160201b82111715610e4057600080fd5b82525081516020918201928201910280838360005b83811015610e6d578181015183820152602001610e55565b5050505090500160405250505091509150600093505b8151841015610f265760006001600160a01b0316828581518110610ea357fe5b60200260200101516001600160a01b03161415610ebf57610f26565b610edb828581518110610ece57fe5b6020026020010151611c59565b965086610ef2576000975050505050505050610f46565b6012600a0a818581518110610f0357fe5b6020026020010151880281610f1457fe5b04955093850193600190930192610e83565b84975050505050505050610f46565b610f3e87611c59565b955050505050505b919050565b6000610f58826004611e75565b92915050565b60018181548110610f6b57fe5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b03161580610fa757506000546001600160a01b031633145b610fe9576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600054600160a81b900460ff16806110045750611004611ec9565b806110195750600054600160a01b900460ff16155b6110545760405162461bcd60e51b815260040180806020018281038252602e81526020018061235c602e913960400191505060405180910390fd5b600054600160a81b900460ff1615801561108b576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b61109433611638565b61109d8461181e565b6110a683610b97565b6110af826118d2565b80156110c3576000805460ff60a81b191690555b50505050565b6000546001600160a01b031681565b6000808080808080805b600454811015611218576000600482815481106110fb57fe5b9060005260206000200160009054906101000a90046001600160a01b031690506000806000836001600160a01b0316635e72f13a8f8f6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b8381101561118f578181015183820152602001611177565b50505050905001935050505060606040518083038186803b1580156111b357600080fd5b505afa1580156111c7573d6000803e3d6000fd5b505050506040513d60608110156111dd57600080fd5b5080516020820151604090920151909450909250905086811115611208578395508298508197508096505b5050600190920191506110e29050565b5095509193509150509250925092565b6000546001600160a01b0316158061124a57506000546001600160a01b031633145b61128c576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b611298600460006122e8565b6112a181610915565b50565b601281565b6000546001600160a01b031615806112cb57506000546001600160a01b031633145b61130d576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b806113178161162b565b61135e576040805162461bcd60e51b81526020600482015260136024820152722737ba103090283934b1b4b733902a37b5b2b760691b604482015290519081900360640190fd5b611369826002611eda565b604080516001600160a01b038416815290517f267d2347865e6ed4881b044841cfb54745c81ca42c65b9c38e5f24391813642b9181900360200190a15050565b6000546001600160a01b031615806113cb57506000546001600160a01b031633145b61140d576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b8061141781610f4b565b611455576040805162461bcd60e51b815260206004820152600a60248201526904e6f74206120537761760b41b604482015290519081900360640190fd5b611460826004611eda565b604080516001600160a01b038416815290517fa3520971018d9e61bd8c1e2210977e4a2791bda1c9803a2fbefdbc8abc88a8179181900360200190a15050565b6000546001600160a01b031615806114c257506000546001600160a01b031633145b611504576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b8061150e81611e5b565b611551576040805162461bcd60e51b815260206004820152600f60248201526e2737ba10309025b2bc902a37b5b2b760891b604482015290519081900360640190fd5b61155a8261162b565b156115a6576040805162461bcd60e51b815260206004820152601760248201527620b63932b0b23c903090383934b1b4b733903a37b5b2b760491b604482015290519081900360640190fd5b600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0384166001600160a01b0319909116811790915560408051918252517fa2411adfb9f4f19415027646ef07d6436cb8911befcf9d7540902498597158b49181900360200190a15050565b6000610f58826002611e75565b6000546001600160a01b0316158061165a57506000546001600160a01b031633145b61169c576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b0381166116e15760405162461bcd60e51b815260040180806020018281038252602181526020018061231b6021913960400191505060405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316158061172557506000546001600160a01b031633145b611767576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b8061177181611e5b565b6117b4576040805162461bcd60e51b815260206004820152600f60248201526e2737ba10309025b2bc902a37b5b2b760891b604482015290519081900360640190fd5b6117bf826001611eda565b604080516001600160a01b038416815290517fb96050be102aa5c8996d5413c2c6a643eda5e34df5f00774e64542ac53d95c7c9181900360200190a16118048261162b565b156109c9576109c9826112a9565b670de0b6b3a764000081565b6000546001600160a01b0316158061184057506000546001600160a01b031633145b611882576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60005b81518110156109c9576118aa82828151811061189d57fe5b6020026020010151611e5b565b6118ca576118ca8282815181106118bd57fe5b6020026020010151610a5f565b600101611885565b6000546001600160a01b031615806118f457506000546001600160a01b031633145b611936576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b8061194081611e5b565b611983576040805162461bcd60e51b815260206004820152600f60248201526e2737ba10309025b2bc902a37b5b2b760891b604482015290519081900360640190fd5b6001600160a01b0382166119cd576040805162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b604482015290519081900360640190fd5b60006119d7611b6b565b60008051602061233c833981519152848155604080516001600160a01b03808816825284166020820152815193945091927f0d72f09a133ec2549b665f4e98744e4e4be092ded65ebf4860c7d390890c5d319281900390910190a150505050565b6000546001600160a01b03161580611a5a57506000546001600160a01b031633145b611a9c576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b611aa581610f4b565b15611ae8576040805162461bcd60e51b815260206004820152600e60248201526d0416c7265616479206120737761760941b604482015290519081900360640190fd5b600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0383166001600160a01b0319909116811790915560408051918252517ee7bfbec0f3b965b4b802432f5e5dc9f17feced2ff163856ea5364cc0a156ad9181900360200190a150565b60008051602061233c8339815191525490565b6000805b600454811015611c505760048181548110611b9957fe5b6000918252602091829020015460408051635b16ebb760e01b81526001600160a01b03878116600483015291519190921692635b16ebb79260248082019391829003018186803b158015611bec57600080fd5b505afa158015611c00573d6000803e3d6000fd5b505050506040513d6020811015611c1657600080fd5b505115611c485760048181548110611c2a57fe5b6000918252602090912001546001600160a01b03169150610f469050565b600101611b82565b50600092915050565b600080611c64611b6b565b6001600160a01b0316836001600160a01b03161415611c8c5750670de0b6b3a7640000610f58565b6001600160a01b038316611ca257506000610f58565b6000806000611d0b866001805480602002602001604051908101604052809291908181526020018280548015611d0157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ce3575b50505050506110d8565b919450925090506000806001600160a01b038416611d2c5760009550611dcf565b60408051630376492360e01b81526001600160a01b038a8116600483015286811660248301528581166044830152915191871691630376492391606480820192602092909190829003018186803b158015611d8657600080fd5b505afa158015611d9a573d6000803e3d6000fd5b505050506040513d6020811015611db057600080fd5b50519150611dbd84611fc6565b9050670de0b6b3a76400008282020495505b505050505092915050565b60028181548110610f6b57fe5b6000806000611e4e846001805480602002602001604051908101604052809291908181526020018280548015611d01576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611ce35750505050506110d8565b9250925092509193909250565b6000610f58826001611e75565b60048181548110610f6b57fe5b6000805b8254811015611ebf57828181548110611e8e57fe5b6000918252602090912001546001600160a01b0385811691161415611eb7576001915050610f58565b600101611e79565b5060009392505050565b6000611ed4306122e2565b15905090565b60005b8154811015611f1e57818181548110611ef257fe5b6000918252602090912001546001600160a01b0384811691161415611f1657611f1e565b600101611edd565b815460001901811015611f9557818160010181548110611f3a57fe5b9060005260206000200160009054906101000a90046001600160a01b0316828281548110611f6457fe5b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055600101611f1e565b81805480611f9f57fe5b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b600080611fd28361162b565b9050600080611fdf611b6b565b6001600160a01b0316856001600160a01b0316141561200857670de0b6b3a764000091506122da565b82156120d157600460008154811061201c57fe5b6000918252602090912001546001600160a01b031663037649238661203f611b6b565b60006040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b03168152602001826001600160a01b03168152602001935050505060206040518083038186803b15801561209e57600080fd5b505afa1580156120b2573d6000803e3d6000fd5b505050506040513d60208110156120c857600080fd5b505191506122da565b600080600080612139896002805480602002602001604051908101604052809291908181526020018280548015611d01576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611ce35750505050506110d8565b925092509250826001600160a01b031663037649238a84846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b03168152602001826001600160a01b03168152602001935050505060206040518083038186803b1580156121ae57600080fd5b505afa1580156121c2573d6000803e3d6000fd5b505050506040513d60208110156121d857600080fd5b505194506121e4611b6b565b6001600160a01b0316826001600160a01b0316146122bc57600460008154811061220a57fe5b6000918252602090912001546001600160a01b031663037649238361222d611b6b565b846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b03168152602001826001600160a01b03168152602001935050505060206040518083038186803b15801561228b57600080fd5b505afa15801561229f573d6000803e3d6000fd5b505050506040513d60208110156122b557600080fd5b50516122c6565b670de0b6b3a76400005b670de0b6b3a7640000908602049550505050505b509392505050565b3b151590565b50805460008255906000526020600020908101906112a191905b808211156123165760008155600101612302565b509056fe6e657720676f7665726e616e63652073686f756c646e277420626520656d7074791dbcb769c96120b1e406b332726074f3608e8f9cd2cb585eb1bd72dd4ec7d60a496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564a26469706673582212201514836fadeb6b5b5acb789408efe9dd71189505cdca1d021edcce7ee9ec083864736f6c634300060c00336e657720676f7665726e616e63652073686f756c646e277420626520656d707479",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061015f5760003560e01c8063156d2ab1146101645780631e5eef5b14610207578063225f879c1461023557806327ed15591461025b57806341976e09146102fc57806343ab662c1461033457806349a40e0f1461036e5780635274ac3f146103a75780635aa6e675146104d55780635e72f13a146104dd5780635eb55df8146105b957806360ebfee61461065a5780638225458d1461066257806392c36b17146106885780639b4f2278146106ae578063a52cd773146106d4578063ab033ea9146106fa578063ab6e623a14610720578063c2ee3a0814610746578063c95da6511461074e578063cabbd364146107ef578063d07a97d914610815578063d47e25db1461083b578063db5a065e14610843578063ddebf79514610869578063deed7a5b1461088f578063e3616394146108ac578063e6f61472146108d2578063f09c5829146108f8575b600080fd5b6102056004803603602081101561017a57600080fd5b810190602081018135600160201b81111561019457600080fd5b8201836020820111156101a657600080fd5b803590602001918460208302840111600160201b831117156101c757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610915945050505050565b005b6102056004803603604081101561021d57600080fd5b506001600160a01b03813581169160200135166109cd565b6102056004803603602081101561024b57600080fd5b50356001600160a01b0316610a5f565b6102056004803603602081101561027157600080fd5b810190602081018135600160201b81111561028b57600080fd5b82018360208201111561029d57600080fd5b803590602001918460208302840111600160201b831117156102be57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610b97945050505050565b6103226004803603602081101561031257600080fd5b50356001600160a01b0316610c4b565b60408051918252519081900360200190f35b61035a6004803603602081101561034a57600080fd5b50356001600160a01b0316610f4b565b604080519115158252519081900360200190f35b61038b6004803603602081101561038457600080fd5b5035610f5e565b604080516001600160a01b039092168252519081900360200190f35b610205600480360360608110156103bd57600080fd5b810190602081018135600160201b8111156103d757600080fd5b8201836020820111156103e957600080fd5b803590602001918460208302840111600160201b8311171561040a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561045957600080fd5b82018360208201111561046b57600080fd5b803590602001918460208302840111600160201b8311171561048c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160a01b03169150610f859050565b61038b6110c9565b61058e600480360360408110156104f357600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561051d57600080fd5b82018360208201111561052f57600080fd5b803590602001918460208302840111600160201b8311171561055057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506110d8945050505050565b604080516001600160a01b039485168152928416602084015292168183015290519081900360600190f35b610205600480360360208110156105cf57600080fd5b810190602081018135600160201b8111156105e957600080fd5b8201836020820111156105fb57600080fd5b803590602001918460208302840111600160201b8311171561061c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611228945050505050565b6103226112a4565b6102056004803603602081101561067857600080fd5b50356001600160a01b03166112a9565b6102056004803603602081101561069e57600080fd5b50356001600160a01b03166113a9565b610205600480360360208110156106c457600080fd5b50356001600160a01b03166114a0565b61035a600480360360208110156106ea57600080fd5b50356001600160a01b031661162b565b6102056004803603602081101561071057600080fd5b50356001600160a01b0316611638565b6102056004803603602081101561073657600080fd5b50356001600160a01b0316611703565b610322611812565b6102056004803603602081101561076457600080fd5b810190602081018135600160201b81111561077e57600080fd5b82018360208201111561079057600080fd5b803590602001918460208302840111600160201b831117156107b157600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061181e945050505050565b6102056004803603602081101561080557600080fd5b50356001600160a01b03166118d2565b6102056004803603602081101561082b57600080fd5b50356001600160a01b0316611a38565b61038b611b6b565b61038b6004803603602081101561085957600080fd5b50356001600160a01b0316611b7e565b6103226004803603602081101561087f57600080fd5b50356001600160a01b0316611c59565b61038b600480360360208110156108a557600080fd5b5035611dda565b61058e600480360360208110156108c257600080fd5b50356001600160a01b0316611de7565b61035a600480360360208110156108e857600080fd5b50356001600160a01b0316611e5b565b61038b6004803603602081101561090e57600080fd5b5035611e68565b6000546001600160a01b0316158061093757506000546001600160a01b031633145b610979576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60005b81518110156109c9576109a182828151811061099457fe5b6020026020010151610f4b565b6109c1576109c18282815181106109b457fe5b6020026020010151611a38565b60010161097c565b5050565b6000546001600160a01b031615806109ef57506000546001600160a01b031633145b610a31576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b03918216600090815260036020526040902080546001600160a01b03191691909216179055565b6000546001600160a01b03161580610a8157506000546001600160a01b031633145b610ac3576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b610acc81611e5b565b15610b14576040805162461bcd60e51b815260206004820152601360248201527220b63932b0b23c90309035b2bc903a37b5b2b760691b604482015290519081900360640190fd5b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f0a56c88bece4295107fd874c5ddacbb849aebef9d72fc42d81dd2b5caeaec1c69181900360200190a150565b6000546001600160a01b03161580610bb957506000546001600160a01b031633145b610bfb576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60005b81518110156109c957610c23828281518110610c1657fe5b602002602001015161162b565b610c4357610c43828281518110610c3657fe5b60200260200101516114a0565b600101610bfe565b6000610c55611b6b565b6001600160a01b0316826001600160a01b03161415610c7d5750670de0b6b3a7640000610f46565b6001600160a01b038281166000908152600360205260409020541615610cbc576001600160a01b03918216600090815260036020526040902054909116905b60008060008080610ccc87611b7e565b90506001600160a01b03811615610f3557606080826001600160a01b0316634e89a7118a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060006040518083038186803b158015610d2d57600080fd5b505afa158015610d41573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015610d6a57600080fd5b8101908080516040519392919084600160201b821115610d8957600080fd5b908301906020820185811115610d9e57600080fd5b82518660208202830111600160201b82111715610dba57600080fd5b82525081516020918201928201910280838360005b83811015610de7578181015183820152602001610dcf565b5050505090500160405260200180516040519392919084600160201b821115610e0f57600080fd5b908301906020820185811115610e2457600080fd5b82518660208202830111600160201b82111715610e4057600080fd5b82525081516020918201928201910280838360005b83811015610e6d578181015183820152602001610e55565b5050505090500160405250505091509150600093505b8151841015610f265760006001600160a01b0316828581518110610ea357fe5b60200260200101516001600160a01b03161415610ebf57610f26565b610edb828581518110610ece57fe5b6020026020010151611c59565b965086610ef2576000975050505050505050610f46565b6012600a0a818581518110610f0357fe5b6020026020010151880281610f1457fe5b04955093850193600190930192610e83565b84975050505050505050610f46565b610f3e87611c59565b955050505050505b919050565b6000610f58826004611e75565b92915050565b60018181548110610f6b57fe5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b03161580610fa757506000546001600160a01b031633145b610fe9576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600054600160a81b900460ff16806110045750611004611ec9565b806110195750600054600160a01b900460ff16155b6110545760405162461bcd60e51b815260040180806020018281038252602e81526020018061235c602e913960400191505060405180910390fd5b600054600160a81b900460ff1615801561108b576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b61109433611638565b61109d8461181e565b6110a683610b97565b6110af826118d2565b80156110c3576000805460ff60a81b191690555b50505050565b6000546001600160a01b031681565b6000808080808080805b600454811015611218576000600482815481106110fb57fe5b9060005260206000200160009054906101000a90046001600160a01b031690506000806000836001600160a01b0316635e72f13a8f8f6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b8381101561118f578181015183820152602001611177565b50505050905001935050505060606040518083038186803b1580156111b357600080fd5b505afa1580156111c7573d6000803e3d6000fd5b505050506040513d60608110156111dd57600080fd5b5080516020820151604090920151909450909250905086811115611208578395508298508197508096505b5050600190920191506110e29050565b5095509193509150509250925092565b6000546001600160a01b0316158061124a57506000546001600160a01b031633145b61128c576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b611298600460006122e8565b6112a181610915565b50565b601281565b6000546001600160a01b031615806112cb57506000546001600160a01b031633145b61130d576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b806113178161162b565b61135e576040805162461bcd60e51b81526020600482015260136024820152722737ba103090283934b1b4b733902a37b5b2b760691b604482015290519081900360640190fd5b611369826002611eda565b604080516001600160a01b038416815290517f267d2347865e6ed4881b044841cfb54745c81ca42c65b9c38e5f24391813642b9181900360200190a15050565b6000546001600160a01b031615806113cb57506000546001600160a01b031633145b61140d576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b8061141781610f4b565b611455576040805162461bcd60e51b815260206004820152600a60248201526904e6f74206120537761760b41b604482015290519081900360640190fd5b611460826004611eda565b604080516001600160a01b038416815290517fa3520971018d9e61bd8c1e2210977e4a2791bda1c9803a2fbefdbc8abc88a8179181900360200190a15050565b6000546001600160a01b031615806114c257506000546001600160a01b031633145b611504576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b8061150e81611e5b565b611551576040805162461bcd60e51b815260206004820152600f60248201526e2737ba10309025b2bc902a37b5b2b760891b604482015290519081900360640190fd5b61155a8261162b565b156115a6576040805162461bcd60e51b815260206004820152601760248201527620b63932b0b23c903090383934b1b4b733903a37b5b2b760491b604482015290519081900360640190fd5b600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0384166001600160a01b0319909116811790915560408051918252517fa2411adfb9f4f19415027646ef07d6436cb8911befcf9d7540902498597158b49181900360200190a15050565b6000610f58826002611e75565b6000546001600160a01b0316158061165a57506000546001600160a01b031633145b61169c576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b0381166116e15760405162461bcd60e51b815260040180806020018281038252602181526020018061231b6021913960400191505060405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316158061172557506000546001600160a01b031633145b611767576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b8061177181611e5b565b6117b4576040805162461bcd60e51b815260206004820152600f60248201526e2737ba10309025b2bc902a37b5b2b760891b604482015290519081900360640190fd5b6117bf826001611eda565b604080516001600160a01b038416815290517fb96050be102aa5c8996d5413c2c6a643eda5e34df5f00774e64542ac53d95c7c9181900360200190a16118048261162b565b156109c9576109c9826112a9565b670de0b6b3a764000081565b6000546001600160a01b0316158061184057506000546001600160a01b031633145b611882576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60005b81518110156109c9576118aa82828151811061189d57fe5b6020026020010151611e5b565b6118ca576118ca8282815181106118bd57fe5b6020026020010151610a5f565b600101611885565b6000546001600160a01b031615806118f457506000546001600160a01b031633145b611936576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b8061194081611e5b565b611983576040805162461bcd60e51b815260206004820152600f60248201526e2737ba10309025b2bc902a37b5b2b760891b604482015290519081900360640190fd5b6001600160a01b0382166119cd576040805162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b604482015290519081900360640190fd5b60006119d7611b6b565b60008051602061233c833981519152848155604080516001600160a01b03808816825284166020820152815193945091927f0d72f09a133ec2549b665f4e98744e4e4be092ded65ebf4860c7d390890c5d319281900390910190a150505050565b6000546001600160a01b03161580611a5a57506000546001600160a01b031633145b611a9c576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b611aa581610f4b565b15611ae8576040805162461bcd60e51b815260206004820152600e60248201526d0416c7265616479206120737761760941b604482015290519081900360640190fd5b600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0383166001600160a01b0319909116811790915560408051918252517ee7bfbec0f3b965b4b802432f5e5dc9f17feced2ff163856ea5364cc0a156ad9181900360200190a150565b60008051602061233c8339815191525490565b6000805b600454811015611c505760048181548110611b9957fe5b6000918252602091829020015460408051635b16ebb760e01b81526001600160a01b03878116600483015291519190921692635b16ebb79260248082019391829003018186803b158015611bec57600080fd5b505afa158015611c00573d6000803e3d6000fd5b505050506040513d6020811015611c1657600080fd5b505115611c485760048181548110611c2a57fe5b6000918252602090912001546001600160a01b03169150610f469050565b600101611b82565b50600092915050565b600080611c64611b6b565b6001600160a01b0316836001600160a01b03161415611c8c5750670de0b6b3a7640000610f58565b6001600160a01b038316611ca257506000610f58565b6000806000611d0b866001805480602002602001604051908101604052809291908181526020018280548015611d0157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ce3575b50505050506110d8565b919450925090506000806001600160a01b038416611d2c5760009550611dcf565b60408051630376492360e01b81526001600160a01b038a8116600483015286811660248301528581166044830152915191871691630376492391606480820192602092909190829003018186803b158015611d8657600080fd5b505afa158015611d9a573d6000803e3d6000fd5b505050506040513d6020811015611db057600080fd5b50519150611dbd84611fc6565b9050670de0b6b3a76400008282020495505b505050505092915050565b60028181548110610f6b57fe5b6000806000611e4e846001805480602002602001604051908101604052809291908181526020018280548015611d01576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611ce35750505050506110d8565b9250925092509193909250565b6000610f58826001611e75565b60048181548110610f6b57fe5b6000805b8254811015611ebf57828181548110611e8e57fe5b6000918252602090912001546001600160a01b0385811691161415611eb7576001915050610f58565b600101611e79565b5060009392505050565b6000611ed4306122e2565b15905090565b60005b8154811015611f1e57818181548110611ef257fe5b6000918252602090912001546001600160a01b0384811691161415611f1657611f1e565b600101611edd565b815460001901811015611f9557818160010181548110611f3a57fe5b9060005260206000200160009054906101000a90046001600160a01b0316828281548110611f6457fe5b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055600101611f1e565b81805480611f9f57fe5b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b600080611fd28361162b565b9050600080611fdf611b6b565b6001600160a01b0316856001600160a01b0316141561200857670de0b6b3a764000091506122da565b82156120d157600460008154811061201c57fe5b6000918252602090912001546001600160a01b031663037649238661203f611b6b565b60006040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b03168152602001826001600160a01b03168152602001935050505060206040518083038186803b15801561209e57600080fd5b505afa1580156120b2573d6000803e3d6000fd5b505050506040513d60208110156120c857600080fd5b505191506122da565b600080600080612139896002805480602002602001604051908101604052809291908181526020018280548015611d01576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611ce35750505050506110d8565b925092509250826001600160a01b031663037649238a84846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b03168152602001826001600160a01b03168152602001935050505060206040518083038186803b1580156121ae57600080fd5b505afa1580156121c2573d6000803e3d6000fd5b505050506040513d60208110156121d857600080fd5b505194506121e4611b6b565b6001600160a01b0316826001600160a01b0316146122bc57600460008154811061220a57fe5b6000918252602090912001546001600160a01b031663037649238361222d611b6b565b846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b03168152602001826001600160a01b03168152602001935050505060206040518083038186803b15801561228b57600080fd5b505afa15801561229f573d6000803e3d6000fd5b505050506040513d60208110156122b557600080fd5b50516122c6565b670de0b6b3a76400005b670de0b6b3a7640000908602049550505050505b509392505050565b3b151590565b50805460008255906000526020600020908101906112a191905b808211156123165760008155600101612302565b509056fe6e657720676f7665726e616e63652073686f756c646e277420626520656d7074791dbcb769c96120b1e406b332726074f3608e8f9cd2cb585eb1bd72dd4ec7d60a496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564a26469706673582212201514836fadeb6b5b5acb789408efe9dd71189505cdca1d021edcce7ee9ec083864736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6708,
        "contract": "contracts/OracleBase.sol:OracleBase",
        "label": "governance",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 361,
        "contract": "contracts/OracleBase.sol:OracleBase",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 364,
        "contract": "contracts/OracleBase.sol:OracleBase",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9401,
        "contract": "contracts/OracleBase.sol:OracleBase",
        "label": "keyTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9404,
        "contract": "contracts/OracleBase.sol:OracleBase",
        "label": "pricingTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9408,
        "contract": "contracts/OracleBase.sol:OracleBase",
        "label": "replacementTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 9411,
        "contract": "contracts/OracleBase.sol:OracleBase",
        "label": "swaps",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}