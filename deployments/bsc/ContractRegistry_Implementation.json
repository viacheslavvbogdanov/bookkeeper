{
  "address": "0x433cBE6a76C804122eeCC889980A4525f43Fd33c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_vaults",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "AddressesAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "AddressesRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "PoolsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "PoolsRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "VaultsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "VaultsRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "POOLS_FOLDER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULTS_FOLDER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "folder",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "folder",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "addArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "addPoolsArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "addVaultsArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_vaults",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "folder",
          "type": "uint256"
        }
      ],
      "name": "list",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listVaults",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "folder",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "folder",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "removeArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "removePoolsArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "removeVaultsArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x03edeec1e1e50c7e598977ad61adc8a26009ba1a138b3aa573c7529014f65fba",
  "receipt": {
    "to": null,
    "from": "0x1AA16eAF73c9761bC18748E3A47a0c37403fc618",
    "contractAddress": "0x433cBE6a76C804122eeCC889980A4525f43Fd33c",
    "transactionIndex": 116,
    "gasUsed": "1768350",
    "logsBloom": "0x
    "blockHash": "0x9086c77996f66c4f6d1c7e348586b2015e27c5cb6189489c5dcdcedbf592ea6d",
    "transactionHash": "0x03edeec1e1e50c7e598977ad61adc8a26009ba1a138b3aa573c7529014f65fba",
    "logs": [],
    "blockNumber": 10505902,
    "cumulativeGasUsed": "18872938",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x884843ca341e00b42045110a02d85f3406604449",
      "0x7002fc2d41d4185787f7b019c2517bb8490b9368",
      "0xe5f7396b7f7d52c024be5e8fe229b8e11eefccc1",
      "0x9481251436c1e27e5dba5462c763491b8ee441cd",
      "0x1bb6fdaf6258071f4d2e96d70ffeb8ad392f299b",
      "0xfe7f456f8274355f17243b7282bd88129e894b1a",
      "0x4165884840ee7e6280c512c75b23b098f7e420fc",
      "0x9b36e1dcbb21dfa6863b2711ed6f0f080888072c",
      "0x8e8ca3719360809cd4bfe175de58992e7d3e7874",
      "0x5c6fe09fcefeaca84dc18018cf8acf7476b2498f",
      "0x03292bdfe36591f70575c77847d7f004ffd0966a",
      "0xc2a1fa5753b7c3272f32abec19140658d539e61c",
      "0xea2c3c25985fbb5418c61451c2cbd1311e0ebe9e",
      "0x0694e3cb1055ff33d774d51a55272ddee305f745",
      "0x2fee56e039acccefa3cb1f3051ad00fe550a472c",
      "0x76aaddf1ebaf9300dad18469d01a0ee62633abe7",
      "0xe637e7d1e37875c787b773dbeb28fcc55fe91c16",
      "0x08b6732e1d07726e8f398a0ea97200d26e172066",
      "0xf53c6789f35c4ecf152d2168ca203808595cb524",
      "0xd16a735656f0a310e6ea8f502cf1d6307803d76a",
      "0x57c30567e0dbd1c308fd2c5665c4084f368560a2",
      "0xe9e03506a088eacdfa1a690cd3019ac105d7b871",
      "0x9178f402453b118b6b897ff520256ed63b2d9998",
      "0x03b58ce34e9cb6a908b019228778cbb9f3a1a2ba",
      "0xdeb314a2222884b6c1e848bffcf68dcfbc5c1406",
      "0xfc8c1f0e25d91cb10db243acbca5ac3c422a6277",
      "0x7caa01b3dc8ee91aa6fa7093e184f045e0da8792",
      "0x26a4fe4c858f0d8a11442d358d182f2832a7f84c",
      "0x063eb32430bd63f4144f3e87d3339e4d2a318c52",
      "0xf1121f56961c6dfd40355dde61404d51b3f1c34e",
      "0x221ed06024ee4296fb544a44cfeddf7c9f882cf3",
      "0xd4bc6001937c6ff493e4bae3ba0f812799f86ab0",
      "0x78963b538c4835e00648df764029196700ea8ee9",
      "0xeab819e2be63ffc0df64e7bba4ddb3bdea280310",
      "0xe83f395b076f9b95200f9bec40f5e446599f4f06",
      "0xda88e38735e75b58fee6ea4fc5be576c1e22f6cd",
      "0x8709b440c0f4f6830a468c6f696d010e85c9510b",
      "0x3331039530dd04b5df06c2d226ac28e958bacc0f",
      "0xc6f39cff6797bac5e29275177b6e8e315cf87d95",
      "0xb3b56c7bdc87f9deb7972cd8b5c09329ce421f89"
    ],
    [
      "0xcf5f83f8fe0ab0f9e9c1db07e6606dd598b2bbf5",
      "0x84646f736795a8bc22ab34e05c8982cd058328c7",
      "0x0bb94083d5718a8cb716fadc016187a0d6c99425",
      "0xe1f9a3ee001a2ecc906e8de637dbf20bb2d44633",
      "0xffbd102fafbd9e15c9122d9c62ab299afd4d3e4f",
      "0x6d386490e2367fc31b4acc99ab7c7d4d998a3121",
      "0x33da6b1a05b4afcc5a321aacaa1334bda4345a14",
      "0x374787234b369b56b3701e0b932051b37726096a",
      "0xe604fd5b1317babd0cf2c72f7f5f2ad8c00adbe1",
      "0xad941e12544f49077fc6425cda1871e11cea5288",
      "0xbf2989575de9850f0a4b534740a88f5d2b460a4f",
      "0xe3f309f151746b3c0953e4c0e455bff3dc2176aa",
      "0x9090bccd472b9d11de302572167ded6632e185ab",
      "0xc97ddaa8091abaf79a4910b094830cce5cdd78f4",
      "0x0392f36d2896c966e141c8fd9eca58a7ca9fa8af",
      "0x1bfb4ed996f4356aa705891dedb7d7776402bec1",
      "0xcd8fb1302c30fde56bce5b34211e84561bbf0df1",
      "0x394e653bbfc9a3497a0487abee153ca6498f053d",
      "0xc3f7ffb5d5869b3ade9448d094d81b0521e8326f",
      "0xd75ffa16ffbcf4078d55ff246cfba79bb8ce3f63",
      "0xf7a3a95d0f7e8a5eeae483cdd7b76af287283d34",
      "0x78cf4a86ba3b4c5246d097e5cd0833cb641c1425",
      "0x21fa8c490e7c1a0d3f1c82e63a5d2ee276614c60",
      "0x5089ea6c884a03823672888b57ebce929ece63ca",
      "0x2ce34b1bb247f242f1d2a33811e01138968efbff",
      "0x63671425ef4d25ec2b12c7d05de855c143f16e3b",
      "0x0a7d74604b39229d444855ef294f287099774ac8",
      "0x75071f2653fbc902ebaff908d4c68712a5d1c960",
      "0x129ccee12a9542ff77e066e6f8d7df49f8cbf89d",
      "0x5da237ad194b8bbb008ac8916df99a92a8a7c8eb",
      "0x299b00d031ba65ca3a22a8f7e8059dab0b072247",
      "0xb75f4c87ebed0a2c6e3d6ff62844e3663cf83bb8",
      "0x1c4adff419f6b91e51d0ade953c9bbf5d16a583f",
      "0x2427da81376a0c0a0c654089a951887242d67c92",
      "0xe64bfe13aa99335487f1f42a56cddbffaec83bbf",
      "0x14cb410659b4a4a7ccea99e6f6c9eac8718160df",
      "0x6a0d7383762962be039c197462bf1df377410853",
      "0xf553e1f826f42716cdfe02bde5ee76b2a52fc7eb",
      "0x3d5b0a8cd80e2a87953525fc136c33112e4b885a",
      "0x1274b70bf34e1a57e78c2a2f3e28a4e1b66cbe48",
      "0xfeb902db08e4e1f362866628098d6110dbe3d072",
      "0x59258f4e15a5fc74a7284055a8094f58108dbd4f"
    ]
  ],
  "solcInputHash": "b1169acba278be7558e4cfb8240c572a",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_vaults\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"AddressesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"AddressesRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"PoolsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"PoolsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"VaultsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"VaultsRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POOLS_FOLDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULTS_FOLDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"folder\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"folder\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addPoolsArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addVaultsArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_vaults\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"folder\",\"type\":\"uint256\"}],\"name\":\"list\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listVaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"folder\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"folder\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removeArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removePoolsArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removeVaultsArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ContractRegistry.sol\":\"ContractRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x9abeffe138f098b16557187383ba0f9e8503602fa95cd668132986ee115237ed\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/ArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12 <0.8.0;\\r\\n\\r\\nlibrary ArrayLib {\\r\\n\\r\\n    string constant NOT_IN_ARRAY     = \\\"Not in array\\\";\\r\\n    string constant ALREADY_IN_ARRAY = \\\"Already in array\\\";\\r\\n\\r\\n    // address array\\r\\n\\r\\n    function inArray(address[] storage array, address _item)\\r\\n    internal view returns (bool) {\\r\\n        uint len = array.length;\\r\\n        for (uint i=0; i<len; i++) {\\r\\n            if (array[i]==_item) return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function addUnique(address[] storage array, address _item)\\r\\n    internal {\\r\\n        require(!inArray(array, _item), ALREADY_IN_ARRAY);\\r\\n        array.push(_item);\\r\\n    }\\r\\n\\r\\n    function removeByIndex(address[] storage array, uint256 index)\\r\\n    internal {\\r\\n        uint256 len_1 = array.length - 1;\\r\\n        require(index<=len_1, NOT_IN_ARRAY);\\r\\n        for (uint256 i = index; i < len_1; i++) {\\r\\n            array[i] = array[i + 1];\\r\\n        }\\r\\n        array.pop();\\r\\n    }\\r\\n\\r\\n    function removeFirst(address[] storage array, address _item)\\r\\n    internal {\\r\\n        require(inArray(array, _item), NOT_IN_ARRAY);\\r\\n        uint last = array.length-1;\\r\\n        for (uint i=0; i<=last; i++) {\\r\\n            if (array[i]==_item) {\\r\\n                removeByIndex(array, i);\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addArrayUnique(address[] storage array, address[] memory _items)\\r\\n    internal {\\r\\n        uint len = _items.length;\\r\\n        for (uint i=0; i<len; i++) {\\r\\n            addUnique(array, _items[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeArrayFirst(address[] storage array, address[] memory _items)\\r\\n    internal {\\r\\n        uint len = _items.length;\\r\\n        for (uint i=0; i<len; i++) {\\r\\n            removeFirst(array, _items[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function inArray(uint256[] storage array, uint256 _item)\\r\\n    internal view returns (bool) {\\r\\n        uint len = array.length;\\r\\n        for (uint i=0; i<len; i++) {\\r\\n            if (array[i]==_item) return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function addUnique(uint256[] storage array, uint256 _item)\\r\\n    internal {\\r\\n        require(!inArray(array, _item), ALREADY_IN_ARRAY);\\r\\n        array.push(_item);\\r\\n    }\\r\\n\\r\\n\\r\\n    function removeByIndex(uint256[] storage array, uint256 index)\\r\\n    internal {\\r\\n        uint256 len_1 = array.length - 1;\\r\\n        require(index<=len_1, NOT_IN_ARRAY);\\r\\n        for (uint256 i = index; i < len_1; i++) {\\r\\n            array[i] = array[i + 1];\\r\\n        }\\r\\n        array.pop();\\r\\n    }\\r\\n\\r\\n    function removeFirst(uint256[] storage array, uint256 _item)\\r\\n    internal {\\r\\n        require(inArray(array, _item), NOT_IN_ARRAY);\\r\\n        uint last = array.length-1;\\r\\n        for (uint i=0; i<=last; i++) {\\r\\n            if (array[i]==_item) {\\r\\n                removeByIndex(array, i);\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addArrayUnique(uint256[] storage array, uint256[] memory _items)\\r\\n    internal {\\r\\n        uint len = _items.length;\\r\\n        for (uint i=0; i<len; i++) {\\r\\n            addUnique(array, _items[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeArrayFirst(uint256[] storage array, uint256[] memory _items)\\r\\n    internal {\\r\\n        uint len = _items.length;\\r\\n        for (uint i=0; i<len; i++) {\\r\\n            removeFirst(array, _items[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x6ea12eec1a0888ce866bbc093085b95a3828cc550232c5a62d4a412f4cc4f0b9\",\"license\":\"MIT\"},\"contracts/ContractRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\r\\n\\r\\nimport \\\"./Governable.sol\\\";\\r\\nimport \\\"./ArrayLib.sol\\\";\\r\\n\\r\\ncontract ContractRegistry is Governable, Initializable {\\r\\n    using Address for address;\\r\\n    using ArrayLib for address[];\\r\\n\\r\\n    uint public constant POOLS_FOLDER = 1;\\r\\n    uint public constant VAULTS_FOLDER = 2;\\r\\n\\r\\n    mapping (uint => address[]) public addresses;\\r\\n\\r\\n    event AddressesAdded(address[] addresses);\\r\\n    event AddressesRemoved(address[] addresses);\\r\\n    event PoolsAdded(address[] addresses);\\r\\n    event PoolsRemoved(address[] addresses);\\r\\n    event VaultsAdded(address[] addresses);\\r\\n    event VaultsRemoved(address[] addresses);\\r\\n\\r\\n    address[] private singleAddress;\\r\\n\\r\\n    constructor(address[] memory _pools, address[] memory _vaults)\\r\\n    public Governable(msg.sender) {\\r\\n        singleAddress.push(address(0));\\r\\n    }\\r\\n\\r\\n    function initialize(address[] memory _pools, address[] memory _vaults)\\r\\n    public onlyGovernance initializer {\\r\\n        Governable.setGovernance(msg.sender);\\r\\n        singleAddress.push(address(0));\\r\\n\\r\\n        addPoolsArray(_pools);\\r\\n        addVaultsArray(_vaults);\\r\\n    }\\r\\n\\r\\n    function list(uint folder) public view returns (address[] memory) {\\r\\n        return addresses[folder];\\r\\n    }\\r\\n\\r\\n    function add(uint folder, address _address) public onlyGovernance {\\r\\n        addresses[folder].addUnique(_address);\\r\\n\\r\\n        singleAddress[0] = _address;\\r\\n        emit AddressesAdded(singleAddress);\\r\\n    }\\r\\n\\r\\n    function remove(uint folder, address _address) public onlyGovernance {\\r\\n        addresses[folder].removeFirst(_address);\\r\\n\\r\\n        singleAddress[0] = _address;\\r\\n        emit AddressesRemoved(singleAddress);\\r\\n    }\\r\\n\\r\\n    function addArray(uint folder, address[] memory _addresses) public onlyGovernance {\\r\\n        addresses[folder].addArrayUnique(_addresses);\\r\\n        emit AddressesAdded(_addresses);\\r\\n    }\\r\\n\\r\\n    function removeArray(uint folder, address[] memory _addresses) public onlyGovernance {\\r\\n        addresses[folder].removeArrayFirst(_addresses);\\r\\n        emit AddressesRemoved(_addresses);\\r\\n    }\\r\\n\\r\\n    // Pools\\r\\n\\r\\n    function listPools() public view returns (address[] memory) {\\r\\n        return addresses[POOLS_FOLDER];\\r\\n    }\\r\\n\\r\\n    function addPool(address _address) public onlyGovernance {\\r\\n        addresses[POOLS_FOLDER].addUnique(_address);\\r\\n\\r\\n        singleAddress[0] = _address;\\r\\n        emit PoolsAdded(singleAddress);\\r\\n    }\\r\\n\\r\\n    function removePool(address _address) public onlyGovernance {\\r\\n        addresses[POOLS_FOLDER].removeFirst(_address);\\r\\n\\r\\n        singleAddress[0] = _address;\\r\\n        emit PoolsRemoved(singleAddress);\\r\\n    }\\r\\n\\r\\n    function addPoolsArray(address[] memory _addresses) public onlyGovernance {\\r\\n        addresses[POOLS_FOLDER].addArrayUnique(_addresses);\\r\\n        emit PoolsAdded(_addresses);\\r\\n    }\\r\\n\\r\\n    function removePoolsArray(address[] memory _addresses) public onlyGovernance {\\r\\n        addresses[POOLS_FOLDER].removeArrayFirst(_addresses);\\r\\n        emit PoolsRemoved(_addresses);\\r\\n    }\\r\\n\\r\\n\\r\\n    // Vaults\\r\\n\\r\\n    function listVaults() public view returns (address[] memory) {\\r\\n        return addresses[VAULTS_FOLDER];\\r\\n    }\\r\\n\\r\\n    function addVault(address _address) public onlyGovernance {\\r\\n        addresses[VAULTS_FOLDER].addUnique(_address);\\r\\n\\r\\n        singleAddress[0] = _address;\\r\\n        emit VaultsAdded(singleAddress);\\r\\n    }\\r\\n\\r\\n    function removeVault(address _address) public onlyGovernance {\\r\\n        addresses[VAULTS_FOLDER].removeFirst(_address);\\r\\n\\r\\n        singleAddress[0] = _address;\\r\\n        emit VaultsRemoved(singleAddress);\\r\\n    }\\r\\n\\r\\n    function addVaultsArray(address[] memory _addresses) public onlyGovernance {\\r\\n        addresses[VAULTS_FOLDER].addArrayUnique(_addresses);\\r\\n        emit VaultsAdded(_addresses);\\r\\n    }\\r\\n\\r\\n    function removeVaultsArray(address[] memory _addresses) public onlyGovernance {\\r\\n        addresses[VAULTS_FOLDER].removeArrayFirst(_addresses);\\r\\n        emit VaultsRemoved(_addresses);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x972036834995965e4c645e3d4ad435d7cf0e5084282b775d0396fffb27abd639\",\"license\":\"MIT\"},\"contracts/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.16;\\r\\n\\r\\ncontract Governable {\\r\\n\\r\\n  address public governance;\\r\\n\\r\\n  constructor(address _governance) public {\\r\\n    setGovernance(_governance);\\r\\n  }\\r\\n\\r\\n  modifier onlyGovernance() {\\r\\n    // pass check while governance might not initialized (i.e. in proxy)\\r\\n    require((governance==address(0)) || (msg.sender==governance), \\\"Not governance\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function setGovernance(address _governance) public onlyGovernance {\\r\\n    require(_governance != address(0), \\\"new governance shouldn't be empty\\\");\\r\\n    governance = _governance;\\r\\n  }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xdcde2e004262672837ce7160d44cf33d6ed9cbb9245af113d041ab54fa467a21\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200201238038062002012833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82518660208202830111640100000000821117156200008c57600080fd5b82525081516020918201928201910280838360005b83811015620000bb578181015183820152602001620000a1565b5050505090500160405260200180516040519392919084640100000000821115620000e557600080fd5b908301906020820185811115620000fb57600080fd5b82518660208202830111640100000000821117156200011957600080fd5b82525081516020918201928201910280838360005b83811015620001485781810151838201526020016200012e565b50505050905001604052505050336200016781620001b060201b60201c565b5050600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319169055506200027f565b6000546001600160a01b03161580620001d357506000546001600160a01b031633145b62000216576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b0381166200025d5760405162461bcd60e51b815260040180806020018281038252602181526020018062001ff16021913960400191505060405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b611d62806200028f6000396000f3fe608060405234801561001057600080fd5b50600436106101075760003560e01c8063256b5a021461010c5780632b8bbbe8146101345780633b7d0946146101605780634892bdb6146101865780634f9f79b0146101a057806350cc258e146102415780635aa6e67514610299578063670815a9146102bd57806368795862146102e05780637345afbe146102e857806373cf25f8146102f057806380c9419e1461041357806382638d551461043057806388b5c6ef146104d15780639dfa4e9414610579578063ab033ea9146105a5578063c4c7ab84146105cb578063ceb68c2314610673578063d914cd4b14610699578063e1f01232146106bf578063e46cf10f14610760575b600080fd5b6101326004803603602081101561012257600080fd5b50356001600160a01b0316610801565b005b6101326004803603604081101561014a57600080fd5b50803590602001356001600160a01b0316610935565b6101326004803603602081101561017657600080fd5b50356001600160a01b0316610a60565b61018e610b92565b60408051918252519081900360200190f35b610132600480360360208110156101b657600080fd5b810190602081018135600160201b8111156101d057600080fd5b8201836020820111156101e257600080fd5b803590602001918460208302840111600160201b8311171561020357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610b97945050505050565b610249610c83565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561028557818101518382015260200161026d565b505050509050019250505060405180910390f35b6102a1610cfb565b604080516001600160a01b039092168252519081900360200190f35b6102a1600480360360408110156102d357600080fd5b5080359060200135610d0a565b610249610d3f565b61018e610db5565b6101326004803603604081101561030657600080fd5b810190602081018135600160201b81111561032057600080fd5b82018360208201111561033257600080fd5b803590602001918460208302840111600160201b8311171561035357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156103a257600080fd5b8201836020820111156103b457600080fd5b803590602001918460208302840111600160201b831117156103d557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610dba945050505050565b6102496004803603602081101561042957600080fd5b5035610f34565b6101326004803603602081101561044657600080fd5b810190602081018135600160201b81111561046057600080fd5b82018360208201111561047257600080fd5b803590602001918460208302840111600160201b8311171561049357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610fa0945050505050565b610132600480360360408110156104e757600080fd5b81359190810190604081016020820135600160201b81111561050857600080fd5b82018360208201111561051a57600080fd5b803590602001918460208302840111600160201b8311171561053b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611070945050505050565b6101326004803603604081101561058f57600080fd5b50803590602001356001600160a01b0316611153565b610132600480360360208110156105bb57600080fd5b50356001600160a01b031661127c565b610132600480360360408110156105e157600080fd5b81359190810190604081016020820135600160201b81111561060257600080fd5b82018360208201111561061457600080fd5b803590602001918460208302840111600160201b8311171561063557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611347945050505050565b6101326004803603602081101561068957600080fd5b50356001600160a01b031661140d565b610132600480360360208110156106af57600080fd5b50356001600160a01b031661153f565b610132600480360360208110156106d557600080fd5b810190602081018135600160201b8111156106ef57600080fd5b82018360208201111561070157600080fd5b803590602001918460208302840111600160201b8311171561072257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611671945050505050565b6101326004803603602081101561077657600080fd5b810190602081018135600160201b81111561079057600080fd5b8201836020820111156107a257600080fd5b803590602001918460208302840111600160201b831117156107c357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611741945050505050565b6000546001600160a01b0316158061082357506000546001600160a01b031633145b610865576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60026000526001602052610887600080516020611ced83398151915282611811565b80600260008154811061089657fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600080516020611c9f83398151915260026040518080602001828103825283818154815260200191508054801561092457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610906575b50509250505060405180910390a150565b6000546001600160a01b0316158061095757506000546001600160a01b031633145b610999576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60008281526001602052604090206109b19082611811565b8060026000815481106109c057fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600080516020611c1f833981519152600260405180806020018281038252838181548152602001915080548015610a4e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a30575b50509250505060405180910390a15050565b6000546001600160a01b03161580610a8257506000546001600160a01b031633145b610ac4576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60016000819052602052610ae6600080516020611c7f83398151915282611903565b806002600081548110610af557fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600080516020611d0d833981519152600260405180806020018281038252838181548152602001915080548015610924576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109065750509250505060405180910390a150565b600281565b6000546001600160a01b03161580610bb957506000546001600160a01b031633145b610bfb576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60026000526001602052610c1d600080516020611ced833981519152826119e0565b600080516020611c9f833981519152816040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610c6d578181015183820152602001610c55565b505050509050019250505060405180910390a150565b600260005260016020908152600080516020611ced8339815191528054604080518285028101850190915281815260609390929190830182828015610cf157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610cd3575b5050505050905090565b6000546001600160a01b031681565b60016020528160005260406000208181548110610d2357fe5b6000918252602090912001546001600160a01b03169150829050565b600160008190526020908152600080516020611c7f8339815191528054604080518285028101850190915281815260609390929190830182828015610cf1576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610cd3575050505050905090565b600181565b6000546001600160a01b03161580610ddc57506000546001600160a01b031633145b610e1e576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600054600160a81b900460ff1680610e395750610e39611a12565b80610e4e5750600054600160a01b900460ff16155b610e895760405162461bcd60e51b815260040180806020018281038252602e815260200180611cbf602e913960400191505060405180910390fd5b600054600160a81b900460ff16158015610ec0576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b610ec93361127c565b600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319169055610f1283611671565b610f1b82610b97565b8015610f2f576000805460ff60a81b191690555b505050565b600081815260016020908152604091829020805483518184028101840190945280845260609392830182828015610f9457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f76575b50505050509050919050565b6000546001600160a01b03161580610fc257506000546001600160a01b031633145b611004576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60016000819052602052611026600080516020611c7f83398151915282611a23565b6040805160208082528351818301528351600080516020611d0d83398151915293859392839291830191818601910280838360008315610c6d578181015183820152602001610c55565b6000546001600160a01b0316158061109257506000546001600160a01b031633145b6110d4576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60008281526001602052604090206110ec90826119e0565b600080516020611c1f833981519152816040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561113c578181015183820152602001611124565b505050509050019250505060405180910390a15050565b6000546001600160a01b0316158061117557506000546001600160a01b031633145b6111b7576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60008281526001602052604090206111cf9082611903565b8060026000815481106111de57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600080516020611bde833981519152600260405180806020018281038252838181548152602001915080548015610a4e576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610a305750509250505060405180910390a15050565b6000546001600160a01b0316158061129e57506000546001600160a01b031633145b6112e0576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b0381166113255760405162461bcd60e51b8152600401808060200182810382526021815260200180611bfe6021913960400191505060405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316158061136957506000546001600160a01b031633145b6113ab576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60008281526001602052604090206113c39082611a23565b6040805160208082528351818301528351600080516020611bde8339815191529385939283929183019181860191028083836000831561113c578181015183820152602001611124565b6000546001600160a01b0316158061142f57506000546001600160a01b031633145b611471576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60026000526001602052611493600080516020611ced83398151915282611903565b8060026000815481106114a257fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600080516020611c5f833981519152600260405180806020018281038252838181548152602001915080548015610924576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109065750509250505060405180910390a150565b6000546001600160a01b0316158061156157506000546001600160a01b031633145b6115a3576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600160008190526020526115c5600080516020611c7f83398151915282611811565b8060026000815481106115d457fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600080516020611c3f833981519152600260405180806020018281038252838181548152602001915080548015610924576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109065750509250505060405180910390a150565b6000546001600160a01b0316158061169357506000546001600160a01b031633145b6116d5576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600160008190526020526116f7600080516020611c7f833981519152826119e0565b6040805160208082528351818301528351600080516020611c3f83398151915293859392839291830191818601910280838360008315610c6d578181015183820152602001610c55565b6000546001600160a01b0316158061176357506000546001600160a01b031633145b6117a5576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600260005260016020526117c7600080516020611ced83398151915282611a23565b6040805160208082528351818301528351600080516020611c5f83398151915293859392839291830191818601910280838360008315610c6d578181015183820152602001610c55565b61181b8282611a55565b156040518060400160405280601081526020016f416c726561647920696e20617272617960801b815250906118ce5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561189357818101518382015260200161187b565b50505050905090810190601f1680156118c05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5081546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b03909216919091179055565b61190d8282611a55565b6040518060400160405280600c81526020016b4e6f7420696e20617272617960a01b8152509061197e5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561189357818101518382015260200161187b565b5081546000190160005b8181116119d957826001600160a01b03168482815481106119a557fe5b6000918252602090912001546001600160a01b031614156119d1576119ca8482611ab5565b50506119dc565b600101611988565b50505b5050565b805160005b818110156119d957611a0a848483815181106119fd57fe5b6020026020010151611811565b6001016119e5565b6000611a1d30611bd7565b15905090565b805160005b818110156119d957611a4d84848381518110611a4057fe5b6020026020010151611903565b600101611a28565b8154600090815b81811015611aa857836001600160a01b0316858281548110611a7a57fe5b6000918252602090912001546001600160a01b03161415611aa057600192505050611aaf565b600101611a5c565b5060009150505b92915050565b815460408051808201909152600c81526b4e6f7420696e20617272617960a01b60208201526000199091019081831115611b305760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561189357818101518382015260200161187b565b50815b81811015611ba557838160010181548110611b4a57fe5b9060005260206000200160009054906101000a90046001600160a01b0316848281548110611b7457fe5b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055600101611b33565b5082805480611bb057fe5b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b3b15159056fe1789ae91440b0164ae6f1050010d10dce0541d93de02edee651f288d415247e46e657720676f7665726e616e63652073686f756c646e277420626520656d707479a3aa5aa3df32e732d8928583aa51a9477a8b8749e51399fe58b100ac870a44f29af2f49f0fe48e38ec4cd4438b994734c1e8051ec41e556337eb2fd61bf58d26c5a1532522c0866c8482478455367e2e3941b0f567dd82f9bb150fbbd0455bd1cc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f10b708564a065b529277110300c9a68b4a25145421116bc1f00fa575ff4d15d8496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564d9d16d34ffb15ba3a3d852f0d403e2ce1d691fb54de27ac87cd2f993f3ec330fd99af2b0a689fe2f5737745635b352dde433a9e6cfd600142867592ca7d83a55a26469706673582212207c9dea68169e5da8a5a9f3ec9725dce47e809c6c8af652797a530de75b34591b64736f6c634300060c00336e657720676f7665726e616e63652073686f756c646e277420626520656d707479",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101075760003560e01c8063256b5a021461010c5780632b8bbbe8146101345780633b7d0946146101605780634892bdb6146101865780634f9f79b0146101a057806350cc258e146102415780635aa6e67514610299578063670815a9146102bd57806368795862146102e05780637345afbe146102e857806373cf25f8146102f057806380c9419e1461041357806382638d551461043057806388b5c6ef146104d15780639dfa4e9414610579578063ab033ea9146105a5578063c4c7ab84146105cb578063ceb68c2314610673578063d914cd4b14610699578063e1f01232146106bf578063e46cf10f14610760575b600080fd5b6101326004803603602081101561012257600080fd5b50356001600160a01b0316610801565b005b6101326004803603604081101561014a57600080fd5b50803590602001356001600160a01b0316610935565b6101326004803603602081101561017657600080fd5b50356001600160a01b0316610a60565b61018e610b92565b60408051918252519081900360200190f35b610132600480360360208110156101b657600080fd5b810190602081018135600160201b8111156101d057600080fd5b8201836020820111156101e257600080fd5b803590602001918460208302840111600160201b8311171561020357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610b97945050505050565b610249610c83565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561028557818101518382015260200161026d565b505050509050019250505060405180910390f35b6102a1610cfb565b604080516001600160a01b039092168252519081900360200190f35b6102a1600480360360408110156102d357600080fd5b5080359060200135610d0a565b610249610d3f565b61018e610db5565b6101326004803603604081101561030657600080fd5b810190602081018135600160201b81111561032057600080fd5b82018360208201111561033257600080fd5b803590602001918460208302840111600160201b8311171561035357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156103a257600080fd5b8201836020820111156103b457600080fd5b803590602001918460208302840111600160201b831117156103d557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610dba945050505050565b6102496004803603602081101561042957600080fd5b5035610f34565b6101326004803603602081101561044657600080fd5b810190602081018135600160201b81111561046057600080fd5b82018360208201111561047257600080fd5b803590602001918460208302840111600160201b8311171561049357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610fa0945050505050565b610132600480360360408110156104e757600080fd5b81359190810190604081016020820135600160201b81111561050857600080fd5b82018360208201111561051a57600080fd5b803590602001918460208302840111600160201b8311171561053b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611070945050505050565b6101326004803603604081101561058f57600080fd5b50803590602001356001600160a01b0316611153565b610132600480360360208110156105bb57600080fd5b50356001600160a01b031661127c565b610132600480360360408110156105e157600080fd5b81359190810190604081016020820135600160201b81111561060257600080fd5b82018360208201111561061457600080fd5b803590602001918460208302840111600160201b8311171561063557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611347945050505050565b6101326004803603602081101561068957600080fd5b50356001600160a01b031661140d565b610132600480360360208110156106af57600080fd5b50356001600160a01b031661153f565b610132600480360360208110156106d557600080fd5b810190602081018135600160201b8111156106ef57600080fd5b82018360208201111561070157600080fd5b803590602001918460208302840111600160201b8311171561072257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611671945050505050565b6101326004803603602081101561077657600080fd5b810190602081018135600160201b81111561079057600080fd5b8201836020820111156107a257600080fd5b803590602001918460208302840111600160201b831117156107c357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611741945050505050565b6000546001600160a01b0316158061082357506000546001600160a01b031633145b610865576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60026000526001602052610887600080516020611ced83398151915282611811565b80600260008154811061089657fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600080516020611c9f83398151915260026040518080602001828103825283818154815260200191508054801561092457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610906575b50509250505060405180910390a150565b6000546001600160a01b0316158061095757506000546001600160a01b031633145b610999576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60008281526001602052604090206109b19082611811565b8060026000815481106109c057fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600080516020611c1f833981519152600260405180806020018281038252838181548152602001915080548015610a4e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a30575b50509250505060405180910390a15050565b6000546001600160a01b03161580610a8257506000546001600160a01b031633145b610ac4576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60016000819052602052610ae6600080516020611c7f83398151915282611903565b806002600081548110610af557fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600080516020611d0d833981519152600260405180806020018281038252838181548152602001915080548015610924576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109065750509250505060405180910390a150565b600281565b6000546001600160a01b03161580610bb957506000546001600160a01b031633145b610bfb576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60026000526001602052610c1d600080516020611ced833981519152826119e0565b600080516020611c9f833981519152816040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610c6d578181015183820152602001610c55565b505050509050019250505060405180910390a150565b600260005260016020908152600080516020611ced8339815191528054604080518285028101850190915281815260609390929190830182828015610cf157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610cd3575b5050505050905090565b6000546001600160a01b031681565b60016020528160005260406000208181548110610d2357fe5b6000918252602090912001546001600160a01b03169150829050565b600160008190526020908152600080516020611c7f8339815191528054604080518285028101850190915281815260609390929190830182828015610cf1576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610cd3575050505050905090565b600181565b6000546001600160a01b03161580610ddc57506000546001600160a01b031633145b610e1e576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600054600160a81b900460ff1680610e395750610e39611a12565b80610e4e5750600054600160a01b900460ff16155b610e895760405162461bcd60e51b815260040180806020018281038252602e815260200180611cbf602e913960400191505060405180910390fd5b600054600160a81b900460ff16158015610ec0576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b610ec93361127c565b600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319169055610f1283611671565b610f1b82610b97565b8015610f2f576000805460ff60a81b191690555b505050565b600081815260016020908152604091829020805483518184028101840190945280845260609392830182828015610f9457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f76575b50505050509050919050565b6000546001600160a01b03161580610fc257506000546001600160a01b031633145b611004576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60016000819052602052611026600080516020611c7f83398151915282611a23565b6040805160208082528351818301528351600080516020611d0d83398151915293859392839291830191818601910280838360008315610c6d578181015183820152602001610c55565b6000546001600160a01b0316158061109257506000546001600160a01b031633145b6110d4576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60008281526001602052604090206110ec90826119e0565b600080516020611c1f833981519152816040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561113c578181015183820152602001611124565b505050509050019250505060405180910390a15050565b6000546001600160a01b0316158061117557506000546001600160a01b031633145b6111b7576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60008281526001602052604090206111cf9082611903565b8060026000815481106111de57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600080516020611bde833981519152600260405180806020018281038252838181548152602001915080548015610a4e576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610a305750509250505060405180910390a15050565b6000546001600160a01b0316158061129e57506000546001600160a01b031633145b6112e0576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b0381166113255760405162461bcd60e51b8152600401808060200182810382526021815260200180611bfe6021913960400191505060405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316158061136957506000546001600160a01b031633145b6113ab576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60008281526001602052604090206113c39082611a23565b6040805160208082528351818301528351600080516020611bde8339815191529385939283929183019181860191028083836000831561113c578181015183820152602001611124565b6000546001600160a01b0316158061142f57506000546001600160a01b031633145b611471576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b60026000526001602052611493600080516020611ced83398151915282611903565b8060026000815481106114a257fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600080516020611c5f833981519152600260405180806020018281038252838181548152602001915080548015610924576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109065750509250505060405180910390a150565b6000546001600160a01b0316158061156157506000546001600160a01b031633145b6115a3576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600160008190526020526115c5600080516020611c7f83398151915282611811565b8060026000815481106115d457fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600080516020611c3f833981519152600260405180806020018281038252838181548152602001915080548015610924576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109065750509250505060405180910390a150565b6000546001600160a01b0316158061169357506000546001600160a01b031633145b6116d5576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600160008190526020526116f7600080516020611c7f833981519152826119e0565b6040805160208082528351818301528351600080516020611c3f83398151915293859392839291830191818601910280838360008315610c6d578181015183820152602001610c55565b6000546001600160a01b0316158061176357506000546001600160a01b031633145b6117a5576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600260005260016020526117c7600080516020611ced83398151915282611a23565b6040805160208082528351818301528351600080516020611c5f83398151915293859392839291830191818601910280838360008315610c6d578181015183820152602001610c55565b61181b8282611a55565b156040518060400160405280601081526020016f416c726561647920696e20617272617960801b815250906118ce5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561189357818101518382015260200161187b565b50505050905090810190601f1680156118c05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5081546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b03909216919091179055565b61190d8282611a55565b6040518060400160405280600c81526020016b4e6f7420696e20617272617960a01b8152509061197e5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561189357818101518382015260200161187b565b5081546000190160005b8181116119d957826001600160a01b03168482815481106119a557fe5b6000918252602090912001546001600160a01b031614156119d1576119ca8482611ab5565b50506119dc565b600101611988565b50505b5050565b805160005b818110156119d957611a0a848483815181106119fd57fe5b6020026020010151611811565b6001016119e5565b6000611a1d30611bd7565b15905090565b805160005b818110156119d957611a4d84848381518110611a4057fe5b6020026020010151611903565b600101611a28565b8154600090815b81811015611aa857836001600160a01b0316858281548110611a7a57fe5b6000918252602090912001546001600160a01b03161415611aa057600192505050611aaf565b600101611a5c565b5060009150505b92915050565b815460408051808201909152600c81526b4e6f7420696e20617272617960a01b60208201526000199091019081831115611b305760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561189357818101518382015260200161187b565b50815b81811015611ba557838160010181548110611b4a57fe5b9060005260206000200160009054906101000a90046001600160a01b0316848281548110611b7457fe5b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055600101611b33565b5082805480611bb057fe5b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b3b15159056fe1789ae91440b0164ae6f1050010d10dce0541d93de02edee651f288d415247e46e657720676f7665726e616e63652073686f756c646e277420626520656d707479a3aa5aa3df32e732d8928583aa51a9477a8b8749e51399fe58b100ac870a44f29af2f49f0fe48e38ec4cd4438b994734c1e8051ec41e556337eb2fd61bf58d26c5a1532522c0866c8482478455367e2e3941b0f567dd82f9bb150fbbd0455bd1cc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f10b708564a065b529277110300c9a68b4a25145421116bc1f00fa575ff4d15d8496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564d9d16d34ffb15ba3a3d852f0d403e2ce1d691fb54de27ac87cd2f993f3ec330fd99af2b0a689fe2f5737745635b352dde433a9e6cfd600142867592ca7d83a55a26469706673582212207c9dea68169e5da8a5a9f3ec9725dce47e809c6c8af652797a530de75b34591b64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6708,
        "contract": "contracts/ContractRegistry.sol:ContractRegistry",
        "label": "governance",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 361,
        "contract": "contracts/ContractRegistry.sol:ContractRegistry",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 364,
        "contract": "contracts/ContractRegistry.sol:ContractRegistry",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5475,
        "contract": "contracts/ContractRegistry.sol:ContractRegistry",
        "label": "addresses",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 5508,
        "contract": "contracts/ContractRegistry.sol:ContractRegistry",
        "label": "singleAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}